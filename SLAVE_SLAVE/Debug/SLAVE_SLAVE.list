
SLAVE_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005160  08005160  00006160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800522c  0800522c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800522c  0800522c  0000622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005234  08005234  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005234  08005234  00006234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005238  08005238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800523c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000310  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000036c  2000036c  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c916  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4b  00000000  00000000  000139a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  000157f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000768  00000000  00000000  00016190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9cc  00000000  00000000  000168f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d904  00000000  00000000  000362c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0b5b  00000000  00000000  00043bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00104723  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bac  00000000  00000000  00104768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00107314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005148 	.word	0x08005148

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005148 	.word	0x08005148

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fbec 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f8c2 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f9be 	bl	800060c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000290:	f000 f91c 	bl	80004cc <MX_SPI1_Init>
  MX_SPI3_Init();
 8000294:	f000 f952 	bl	800053c <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000298:	f000 f988 	bl	80005ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize all configured peripherals */
   MX_GPIO_Init();
 800029c:	f000 f9b6 	bl	800060c <MX_GPIO_Init>
   MX_SPI1_Init();
 80002a0:	f000 f914 	bl	80004cc <MX_SPI1_Init>
   MX_SPI3_Init();
 80002a4:	f000 f94a 	bl	800053c <MX_SPI3_Init>
   MX_USART2_UART_Init();
 80002a8:	f000 f980 	bl	80005ac <MX_USART2_UART_Init>
   /* USER CODE BEGIN 2 */
   /* USER CODE BEGIN 2 */
   /* USER CODE BEGIN 2 */
   uart_buf_len = sprintf(uart_buf, "Esperando datos por SPI...\r\n");
 80002ac:	492e      	ldr	r1, [pc, #184]	@ (8000368 <main+0xe8>)
 80002ae:	482f      	ldr	r0, [pc, #188]	@ (800036c <main+0xec>)
 80002b0:	f004 faaa 	bl	8004808 <siprintf>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000370 <main+0xf0>)
 80002b8:	6013      	str	r3, [r2, #0]
   HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80002ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000370 <main+0xf0>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	b29a      	uxth	r2, r3
 80002c0:	f04f 33ff 	mov.w	r3, #4294967295
 80002c4:	4929      	ldr	r1, [pc, #164]	@ (800036c <main+0xec>)
 80002c6:	482b      	ldr	r0, [pc, #172]	@ (8000374 <main+0xf4>)
 80002c8:	f003 fad4 	bl	8003874 <HAL_UART_Transmit>

   // Iniciar recepción por interrupción
   HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_rx_buf1, sizeof(spi_rx_buf1) - 1);
 80002cc:	220a      	movs	r2, #10
 80002ce:	492a      	ldr	r1, [pc, #168]	@ (8000378 <main+0xf8>)
 80002d0:	482a      	ldr	r0, [pc, #168]	@ (800037c <main+0xfc>)
 80002d2:	f002 fc81 	bl	8002bd8 <HAL_SPI_Receive_IT>
   HAL_SPI_Receive_IT(&hspi3, (uint8_t *)spi_rx_buf3, sizeof(spi_rx_buf3) - 1);
 80002d6:	220a      	movs	r2, #10
 80002d8:	4929      	ldr	r1, [pc, #164]	@ (8000380 <main+0x100>)
 80002da:	482a      	ldr	r0, [pc, #168]	@ (8000384 <main+0x104>)
 80002dc:	f002 fc7c 	bl	8002bd8 <HAL_SPI_Receive_IT>

   /* Infinite loop */
   while (1)
   {
     // Manejo de la recepción por SPI1
     if (spi1_received)
 80002e0:	4b29      	ldr	r3, [pc, #164]	@ (8000388 <main+0x108>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d01b      	beq.n	8000322 <main+0xa2>
     {
       spi1_received = 0;
 80002ea:	4b27      	ldr	r3, [pc, #156]	@ (8000388 <main+0x108>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
       Clear_UART_Buffer(&huart2);
 80002f0:	4820      	ldr	r0, [pc, #128]	@ (8000374 <main+0xf4>)
 80002f2:	f000 f875 	bl	80003e0 <Clear_UART_Buffer>
       uart_buf_len = sprintf(uart_buf, "Datos recibidos por SPI1: %s\r\n", spi_rx_buf1);
 80002f6:	4a20      	ldr	r2, [pc, #128]	@ (8000378 <main+0xf8>)
 80002f8:	4924      	ldr	r1, [pc, #144]	@ (800038c <main+0x10c>)
 80002fa:	481c      	ldr	r0, [pc, #112]	@ (800036c <main+0xec>)
 80002fc:	f004 fa84 	bl	8004808 <siprintf>
 8000300:	4603      	mov	r3, r0
 8000302:	4a1b      	ldr	r2, [pc, #108]	@ (8000370 <main+0xf0>)
 8000304:	6013      	str	r3, [r2, #0]
       HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000306:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <main+0xf0>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	b29a      	uxth	r2, r3
 800030c:	f04f 33ff 	mov.w	r3, #4294967295
 8000310:	4916      	ldr	r1, [pc, #88]	@ (800036c <main+0xec>)
 8000312:	4818      	ldr	r0, [pc, #96]	@ (8000374 <main+0xf4>)
 8000314:	f003 faae 	bl	8003874 <HAL_UART_Transmit>

       // Reiniciar recepción por interrupción
       HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_rx_buf1, sizeof(spi_rx_buf1) - 1);
 8000318:	220a      	movs	r2, #10
 800031a:	4917      	ldr	r1, [pc, #92]	@ (8000378 <main+0xf8>)
 800031c:	4817      	ldr	r0, [pc, #92]	@ (800037c <main+0xfc>)
 800031e:	f002 fc5b 	bl	8002bd8 <HAL_SPI_Receive_IT>
     }

     // Manejo de la recepción por SPI3
     if (spi3_received)
 8000322:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <main+0x110>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <main+0x60>
     {
       spi3_received = 0;
 800032c:	4b18      	ldr	r3, [pc, #96]	@ (8000390 <main+0x110>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
       Clear_UART_Buffer(&huart2);
 8000332:	4810      	ldr	r0, [pc, #64]	@ (8000374 <main+0xf4>)
 8000334:	f000 f854 	bl	80003e0 <Clear_UART_Buffer>
       uart_buf_len = sprintf(uart_buf, "Datos recibidos por SPI3: %s\r\n", spi_rx_buf3);
 8000338:	4a11      	ldr	r2, [pc, #68]	@ (8000380 <main+0x100>)
 800033a:	4916      	ldr	r1, [pc, #88]	@ (8000394 <main+0x114>)
 800033c:	480b      	ldr	r0, [pc, #44]	@ (800036c <main+0xec>)
 800033e:	f004 fa63 	bl	8004808 <siprintf>
 8000342:	4603      	mov	r3, r0
 8000344:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <main+0xf0>)
 8000346:	6013      	str	r3, [r2, #0]
       HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000348:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <main+0xf0>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
 8000352:	4906      	ldr	r1, [pc, #24]	@ (800036c <main+0xec>)
 8000354:	4807      	ldr	r0, [pc, #28]	@ (8000374 <main+0xf4>)
 8000356:	f003 fa8d 	bl	8003874 <HAL_UART_Transmit>

       // Reiniciar recepción por interrupción
       HAL_SPI_Receive_IT(&hspi3, (uint8_t *)spi_rx_buf3, sizeof(spi_rx_buf3) - 1);
 800035a:	220a      	movs	r2, #10
 800035c:	4908      	ldr	r1, [pc, #32]	@ (8000380 <main+0x100>)
 800035e:	4809      	ldr	r0, [pc, #36]	@ (8000384 <main+0x104>)
 8000360:	f002 fc3a 	bl	8002bd8 <HAL_SPI_Receive_IT>
     if (spi1_received)
 8000364:	e7bc      	b.n	80002e0 <main+0x60>
 8000366:	bf00      	nop
 8000368:	08005160 	.word	0x08005160
 800036c:	200001c8 	.word	0x200001c8
 8000370:	200001fc 	.word	0x200001fc
 8000374:	20000140 	.word	0x20000140
 8000378:	20000200 	.word	0x20000200
 800037c:	20000078 	.word	0x20000078
 8000380:	2000020c 	.word	0x2000020c
 8000384:	200000dc 	.word	0x200000dc
 8000388:	20000217 	.word	0x20000217
 800038c:	08005180 	.word	0x08005180
 8000390:	20000218 	.word	0x20000218
 8000394:	080051a0 	.word	0x080051a0

08000398 <HAL_SPI_RxCpltCallback>:
   }
 }

 /* Callback para recepción de SPI1 */
 void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
 {
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
   if (hspi->Instance == SPI1)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0a      	ldr	r2, [pc, #40]	@ (80003d0 <HAL_SPI_RxCpltCallback+0x38>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d103      	bne.n	80003b2 <HAL_SPI_RxCpltCallback+0x1a>
   {
     spi1_received = 1;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <HAL_SPI_RxCpltCallback+0x3c>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	701a      	strb	r2, [r3, #0]
   }
   else if (hspi->Instance == SPI3)
   {
     spi3_received = 1;
   }
 }
 80003b0:	e007      	b.n	80003c2 <HAL_SPI_RxCpltCallback+0x2a>
   else if (hspi->Instance == SPI3)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a08      	ldr	r2, [pc, #32]	@ (80003d8 <HAL_SPI_RxCpltCallback+0x40>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d102      	bne.n	80003c2 <HAL_SPI_RxCpltCallback+0x2a>
     spi3_received = 1;
 80003bc:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <HAL_SPI_RxCpltCallback+0x44>)
 80003be:	2201      	movs	r2, #1
 80003c0:	701a      	strb	r2, [r3, #0]
 }
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40013000 	.word	0x40013000
 80003d4:	20000217 	.word	0x20000217
 80003d8:	40003c00 	.word	0x40003c00
 80003dc:	20000218 	.word	0x20000218

080003e0 <Clear_UART_Buffer>:

 /* Función para limpiar el buffer de recepción del UART */
 void Clear_UART_Buffer(UART_HandleTypeDef *huart)
 {
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
   uint8_t temp;
   while (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80003e8:	e004      	b.n	80003f4 <Clear_UART_Buffer+0x14>
   {
     temp = (uint8_t)(huart->Instance->RDR);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	73fb      	strb	r3, [r7, #15]
   while (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 0320 	and.w	r3, r3, #32
 80003fe:	2b20      	cmp	r3, #32
 8000400:	d0f3      	beq.n	80003ea <Clear_UART_Buffer+0xa>
   }
 }
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b0a6      	sub	sp, #152	@ 0x98
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800041a:	2228      	movs	r2, #40	@ 0x28
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f004 fa12 	bl	8004848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2258      	movs	r2, #88	@ 0x58
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f004 fa04 	bl	8004848 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000440:	2302      	movs	r3, #2
 8000442:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000444:	2301      	movs	r3, #1
 8000446:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000448:	2310      	movs	r3, #16
 800044a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044e:	2302      	movs	r3, #2
 8000450:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000458:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800045c:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000460:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fe74 	bl	800115c <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800047a:	f000 f919 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2302      	movs	r3, #2
 8000484:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800048e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000494:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f001 feb2 	bl	8002204 <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004a6:	f000 f903 	bl	80006b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004aa:	2302      	movs	r3, #2
 80004ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 f8c5 	bl	8002644 <HAL_RCCEx_PeriphCLKConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004c0:	f000 f8f6 	bl	80006b0 <Error_Handler>
  }
}
 80004c4:	bf00      	nop
 80004c6:	3798      	adds	r7, #152	@ 0x98
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004d0:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <MX_SPI1_Init+0x68>)
 80004d2:	4a19      	ldr	r2, [pc, #100]	@ (8000538 <MX_SPI1_Init+0x6c>)
 80004d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80004d6:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <MX_SPI1_Init+0x68>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <MX_SPI1_Init+0x68>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004e2:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <MX_SPI1_Init+0x68>)
 80004e4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80004e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004ea:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <MX_SPI1_Init+0x68>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004f0:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <MX_SPI1_Init+0x68>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <MX_SPI1_Init+0x68>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <MX_SPI1_Init+0x68>)
 80004fe:	2200      	movs	r2, #0
 8000500:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <MX_SPI1_Init+0x68>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000508:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <MX_SPI1_Init+0x68>)
 800050a:	2200      	movs	r2, #0
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <MX_SPI1_Init+0x68>)
 8000510:	2207      	movs	r2, #7
 8000512:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000514:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <MX_SPI1_Init+0x68>)
 8000516:	2200      	movs	r2, #0
 8000518:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <MX_SPI1_Init+0x68>)
 800051c:	2200      	movs	r2, #0
 800051e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000520:	4804      	ldr	r0, [pc, #16]	@ (8000534 <MX_SPI1_Init+0x68>)
 8000522:	f002 faad 	bl	8002a80 <HAL_SPI_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800052c:	f000 f8c0 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000078 	.word	0x20000078
 8000538:	40013000 	.word	0x40013000

0800053c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000540:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <MX_SPI3_Init+0x68>)
 8000542:	4a19      	ldr	r2, [pc, #100]	@ (80005a8 <MX_SPI3_Init+0x6c>)
 8000544:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000546:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <MX_SPI3_Init+0x68>)
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800054c:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <MX_SPI3_Init+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000552:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <MX_SPI3_Init+0x68>)
 8000554:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000558:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <MX_SPI3_Init+0x68>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <MX_SPI3_Init+0x68>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <MX_SPI3_Init+0x68>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <MX_SPI3_Init+0x68>)
 800056e:	2200      	movs	r2, #0
 8000570:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <MX_SPI3_Init+0x68>)
 8000574:	2200      	movs	r2, #0
 8000576:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <MX_SPI3_Init+0x68>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <MX_SPI3_Init+0x68>)
 8000580:	2207      	movs	r2, #7
 8000582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <MX_SPI3_Init+0x68>)
 8000586:	2200      	movs	r2, #0
 8000588:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_SPI3_Init+0x68>)
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <MX_SPI3_Init+0x68>)
 8000592:	f002 fa75 	bl	8002a80 <HAL_SPI_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 800059c:	f000 f888 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000dc 	.word	0x200000dc
 80005a8:	40003c00 	.word	0x40003c00

080005ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b0:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005b2:	4a15      	ldr	r2, [pc, #84]	@ (8000608 <MX_USART2_UART_Init+0x5c>)
 80005b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005b6:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80005bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_USART2_UART_Init+0x58>)
 80005f0:	f003 f8f2 	bl	80037d8 <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 f859 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000140 	.word	0x20000140
 8000608:	40004400 	.word	0x40004400

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a20      	ldr	r2, [pc, #128]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000628:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a1a      	ldr	r2, [pc, #104]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000640:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_GPIO_Init+0x9c>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000688:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_GPIO_Init+0xa0>)
 800069a:	f000 fbd5 	bl	8000e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	@ 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000800 	.word	0x48000800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <Error_Handler+0x8>

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <HAL_MspInit+0x44>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000700 <HAL_MspInit+0x44>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <HAL_MspInit+0x44>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <HAL_MspInit+0x44>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <HAL_MspInit+0x44>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_MspInit+0x44>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006f2:	2007      	movs	r0, #7
 80006f4:	f000 faea 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a46      	ldr	r2, [pc, #280]	@ (800083c <HAL_SPI_MspInit+0x138>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d131      	bne.n	800078a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000726:	4b46      	ldr	r3, [pc, #280]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a45      	ldr	r2, [pc, #276]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 800072c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000730:	6193      	str	r3, [r2, #24]
 8000732:	4b43      	ldr	r3, [pc, #268]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b40      	ldr	r3, [pc, #256]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a3f      	ldr	r2, [pc, #252]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b3d      	ldr	r3, [pc, #244]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000756:	23f0      	movs	r3, #240	@ 0xf0
 8000758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000766:	2305      	movs	r3, #5
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000774:	f000 fb68 	bl	8000e48 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	2023      	movs	r0, #35	@ 0x23
 800077e:	f000 fab0 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000782:	2023      	movs	r0, #35	@ 0x23
 8000784:	f000 fac9 	bl	8000d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000788:	e053      	b.n	8000832 <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI3)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a2d      	ldr	r2, [pc, #180]	@ (8000844 <HAL_SPI_MspInit+0x140>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d14e      	bne.n	8000832 <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000794:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	4a29      	ldr	r2, [pc, #164]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 800079a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800079e:	61d3      	str	r3, [r2, #28]
 80007a0:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	4a23      	ldr	r2, [pc, #140]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 80007b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b6:	6153      	str	r3, [r2, #20]
 80007b8:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 80007ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007ce:	6153      	str	r3, [r2, #20]
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <HAL_SPI_MspInit+0x13c>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ee:	2306      	movs	r3, #6
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fc:	f000 fb24 	bl	8000e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000800:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000812:	2306      	movs	r3, #6
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	480a      	ldr	r0, [pc, #40]	@ (8000848 <HAL_SPI_MspInit+0x144>)
 800081e:	f000 fb13 	bl	8000e48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2033      	movs	r0, #51	@ 0x33
 8000828:	f000 fa5b 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800082c:	2033      	movs	r0, #51	@ 0x33
 800082e:	f000 fa74 	bl	8000d1a <HAL_NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3730      	adds	r7, #48	@ 0x30
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40013000 	.word	0x40013000
 8000840:	40021000 	.word	0x40021000
 8000844:	40003c00 	.word	0x40003c00
 8000848:	48000800 	.word	0x48000800

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <HAL_UART_MspInit+0x8c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d130      	bne.n	80008d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086e:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <HAL_UART_MspInit+0x90>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a1a      	ldr	r2, [pc, #104]	@ (80008dc <HAL_UART_MspInit+0x90>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_UART_MspInit+0x90>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_UART_MspInit+0x90>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a14      	ldr	r2, [pc, #80]	@ (80008dc <HAL_UART_MspInit+0x90>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_UART_MspInit+0x90>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800089e:	230c      	movs	r3, #12
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ae:	2307      	movs	r3, #7
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f000 fac4 	bl	8000e48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2026      	movs	r0, #38	@ 0x26
 80008c6:	f000 fa0c 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ca:	2026      	movs	r0, #38	@ 0x26
 80008cc:	f000 fa25 	bl	8000d1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <MemManage_Handler+0x4>

080008f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <UsageFault_Handler+0x4>

08000908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000936:	f000 f8d9 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000944:	4802      	ldr	r0, [pc, #8]	@ (8000950 <SPI1_IRQHandler+0x10>)
 8000946:	f002 faa3 	bl	8002e90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000078 	.word	0x20000078

08000954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000958:	4802      	ldr	r0, [pc, #8]	@ (8000964 <USART2_IRQHandler+0x10>)
 800095a:	f003 f815 	bl	8003988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000140 	.word	0x20000140

08000968 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <SPI3_IRQHandler+0x10>)
 800096e:	f002 fa8f 	bl	8002e90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000dc 	.word	0x200000dc

0800097c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000984:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <_sbrk+0x5c>)
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <_sbrk+0x60>)
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <_sbrk+0x64>)
 800099a:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <_sbrk+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d207      	bcs.n	80009bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ac:	f003 ff54 	bl	8004858 <__errno>
 80009b0:	4603      	mov	r3, r0
 80009b2:	220c      	movs	r2, #12
 80009b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e009      	b.n	80009d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c2:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <_sbrk+0x64>)
 80009cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20010000 	.word	0x20010000
 80009dc:	00000400 	.word	0x00000400
 80009e0:	2000021c 	.word	0x2000021c
 80009e4:	20000370 	.word	0x20000370

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ffea 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	@ (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f003 ff13 	bl	8004864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fc1f 	bl	8000280 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a50:	0800523c 	.word	0x0800523c
  ldr r2, =_sbss
 8000a54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a58:	2000036c 	.word	0x2000036c

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <HAL_Init+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a07      	ldr	r2, [pc, #28]	@ (8000a88 <HAL_Init+0x28>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f000 f92b 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f808 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7c:	f7ff fe1e 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_InitTick+0x54>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <HAL_InitTick+0x58>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f943 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00e      	b.n	8000ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d80a      	bhi.n	8000ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 f90b 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4a06      	ldr	r2, [pc, #24]	@ (8000ae8 <HAL_InitTick+0x5c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000220 	.word	0x20000220

08000b14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000220 	.word	0x20000220

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	@ (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	@ 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff29 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff3e 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff31 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e02e      	b.n	8000dbe <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d008      	beq.n	8000d7c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e020      	b.n	8000dbe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 020e 	bic.w	r2, r2, #14
 8000d8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000da4:	2101      	movs	r1, #1
 8000da6:	fa01 f202 	lsl.w	r2, r1, r2
 8000daa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d005      	beq.n	8000dec <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e027      	b.n	8000e3c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 020e 	bic.w	r2, r2, #14
 8000dfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0201 	bic.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e14:	2101      	movs	r1, #1
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	4798      	blx	r3
    }
  }
  return status;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	e160      	b.n	800111a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8152 	beq.w	8001114 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d005      	beq.n	8000e88 <HAL_GPIO_Init+0x40>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d130      	bne.n	8000eea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	f003 0201 	and.w	r2, r3, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d017      	beq.n	8000f26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d123      	bne.n	8000f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	6939      	ldr	r1, [r7, #16]
 8000f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0203 	and.w	r2, r3, #3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 80ac 	beq.w	8001114 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8001138 <HAL_GPIO_Init+0x2f0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8001138 <HAL_GPIO_Init+0x2f0>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8001138 <HAL_GPIO_Init+0x2f0>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd4:	4a59      	ldr	r2, [pc, #356]	@ (800113c <HAL_GPIO_Init+0x2f4>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ffe:	d025      	beq.n	800104c <HAL_GPIO_Init+0x204>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a4f      	ldr	r2, [pc, #316]	@ (8001140 <HAL_GPIO_Init+0x2f8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d01f      	beq.n	8001048 <HAL_GPIO_Init+0x200>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4e      	ldr	r2, [pc, #312]	@ (8001144 <HAL_GPIO_Init+0x2fc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d019      	beq.n	8001044 <HAL_GPIO_Init+0x1fc>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a4d      	ldr	r2, [pc, #308]	@ (8001148 <HAL_GPIO_Init+0x300>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d013      	beq.n	8001040 <HAL_GPIO_Init+0x1f8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4c      	ldr	r2, [pc, #304]	@ (800114c <HAL_GPIO_Init+0x304>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d00d      	beq.n	800103c <HAL_GPIO_Init+0x1f4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <HAL_GPIO_Init+0x308>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x1f0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a4a      	ldr	r2, [pc, #296]	@ (8001154 <HAL_GPIO_Init+0x30c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_GPIO_Init+0x1ec>
 8001030:	2306      	movs	r3, #6
 8001032:	e00c      	b.n	800104e <HAL_GPIO_Init+0x206>
 8001034:	2307      	movs	r3, #7
 8001036:	e00a      	b.n	800104e <HAL_GPIO_Init+0x206>
 8001038:	2305      	movs	r3, #5
 800103a:	e008      	b.n	800104e <HAL_GPIO_Init+0x206>
 800103c:	2304      	movs	r3, #4
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x206>
 8001040:	2303      	movs	r3, #3
 8001042:	e004      	b.n	800104e <HAL_GPIO_Init+0x206>
 8001044:	2302      	movs	r3, #2
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0x206>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_GPIO_Init+0x206>
 800104c:	2300      	movs	r3, #0
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800105e:	4937      	ldr	r1, [pc, #220]	@ (800113c <HAL_GPIO_Init+0x2f4>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106c:	4b3a      	ldr	r3, [pc, #232]	@ (8001158 <HAL_GPIO_Init+0x310>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001090:	4a31      	ldr	r2, [pc, #196]	@ (8001158 <HAL_GPIO_Init+0x310>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001096:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <HAL_GPIO_Init+0x310>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ba:	4a27      	ldr	r2, [pc, #156]	@ (8001158 <HAL_GPIO_Init+0x310>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c0:	4b25      	ldr	r3, [pc, #148]	@ (8001158 <HAL_GPIO_Init+0x310>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001158 <HAL_GPIO_Init+0x310>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <HAL_GPIO_Init+0x310>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <HAL_GPIO_Init+0x310>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	f47f ae97 	bne.w	8000e58 <HAL_GPIO_Init+0x10>
  }
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	48001000 	.word	0x48001000
 8001150:	48001400 	.word	0x48001400
 8001154:	48001800 	.word	0x48001800
 8001158:	40010400 	.word	0x40010400

0800115c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001162:	af00      	add	r7, sp, #0
 8001164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001168:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800116c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800116e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001172:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	f001 b83a 	b.w	80021f6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001186:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 816f 	beq.w	8001476 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001198:	4bb5      	ldr	r3, [pc, #724]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d00c      	beq.n	80011be <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a4:	4bb2      	ldr	r3, [pc, #712]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d15c      	bne.n	800126a <HAL_RCC_OscConfig+0x10e>
 80011b0:	4baf      	ldr	r3, [pc, #700]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011bc:	d155      	bne.n	800126a <HAL_RCC_OscConfig+0x10e>
 80011be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011c2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	095b      	lsrs	r3, r3, #5
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d102      	bne.n	80011f0 <HAL_RCC_OscConfig+0x94>
 80011ea:	4ba1      	ldr	r3, [pc, #644]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	e015      	b.n	800121c <HAL_RCC_OscConfig+0xc0>
 80011f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011f4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001204:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001208:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800120c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001210:	fa93 f3a3 	rbit	r3, r3
 8001214:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001218:	4b95      	ldr	r3, [pc, #596]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001220:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001224:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001228:	fa92 f2a2 	rbit	r2, r2
 800122c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001230:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f002 021f 	and.w	r2, r2, #31
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8111 	beq.w	8001474 <HAL_RCC_OscConfig+0x318>
 8001252:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001256:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f040 8108 	bne.w	8001474 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	f000 bfc6 	b.w	80021f6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800126e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x12e>
 800127c:	4b7c      	ldr	r3, [pc, #496]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a7b      	ldr	r2, [pc, #492]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e036      	b.n	80012f8 <HAL_RCC_OscConfig+0x19c>
 800128a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800128e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x158>
 800129a:	4b75      	ldr	r3, [pc, #468]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a74      	ldr	r2, [pc, #464]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b72      	ldr	r3, [pc, #456]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a71      	ldr	r2, [pc, #452]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e021      	b.n	80012f8 <HAL_RCC_OscConfig+0x19c>
 80012b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x184>
 80012c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a69      	ldr	r2, [pc, #420]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b67      	ldr	r3, [pc, #412]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a66      	ldr	r2, [pc, #408]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0x19c>
 80012e0:	4b63      	ldr	r3, [pc, #396]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a62      	ldr	r2, [pc, #392]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b60      	ldr	r3, [pc, #384]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a5f      	ldr	r2, [pc, #380]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d059      	beq.n	80013bc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fc04 	bl	8000b14 <HAL_GetTick>
 800130c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001312:	f7ff fbff 	bl	8000b14 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d902      	bls.n	8001328 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	f000 bf67 	b.w	80021f6 <HAL_RCC_OscConfig+0x109a>
 8001328:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800132c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001330:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001334:	fa93 f3a3 	rbit	r3, r3
 8001338:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800133c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001340:	fab3 f383 	clz	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b01      	cmp	r3, #1
 8001352:	d102      	bne.n	800135a <HAL_RCC_OscConfig+0x1fe>
 8001354:	4b46      	ldr	r3, [pc, #280]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	e015      	b.n	8001386 <HAL_RCC_OscConfig+0x22a>
 800135a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800135e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800136e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001372:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001376:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001382:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001386:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800138a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800138e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001392:	fa92 f2a2 	rbit	r2, r2
 8001396:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800139a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800139e:	fab2 f282 	clz	r2, r2
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	f042 0220 	orr.w	r2, r2, #32
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	f002 021f 	and.w	r2, r2, #31
 80013ae:	2101      	movs	r1, #1
 80013b0:	fa01 f202 	lsl.w	r2, r1, r2
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0ab      	beq.n	8001312 <HAL_RCC_OscConfig+0x1b6>
 80013ba:	e05c      	b.n	8001476 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fbaa 	bl	8000b14 <HAL_GetTick>
 80013c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c6:	f7ff fba5 	bl	8000b14 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d902      	bls.n	80013dc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	f000 bf0d 	b.w	80021f6 <HAL_RCC_OscConfig+0x109a>
 80013dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013e0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80013f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d102      	bne.n	800140e <HAL_RCC_OscConfig+0x2b2>
 8001408:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	e015      	b.n	800143a <HAL_RCC_OscConfig+0x2de>
 800140e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001412:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001422:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001426:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800142a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <HAL_RCC_OscConfig+0x314>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800143e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001442:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001446:	fa92 f2a2 	rbit	r2, r2
 800144a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800144e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001452:	fab2 f282 	clz	r2, r2
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	f042 0220 	orr.w	r2, r2, #32
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	f002 021f 	and.w	r2, r2, #31
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ab      	bne.n	80013c6 <HAL_RCC_OscConfig+0x26a>
 800146e:	e002      	b.n	8001476 <HAL_RCC_OscConfig+0x31a>
 8001470:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 817f 	beq.w	800178a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800148c:	4ba7      	ldr	r3, [pc, #668]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001498:	4ba4      	ldr	r3, [pc, #656]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d173      	bne.n	800158c <HAL_RCC_OscConfig+0x430>
 80014a4:	4ba1      	ldr	r3, [pc, #644]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80014ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014b0:	d16c      	bne.n	800158c <HAL_RCC_OscConfig+0x430>
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80014c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d102      	bne.n	80014e2 <HAL_RCC_OscConfig+0x386>
 80014dc:	4b93      	ldr	r3, [pc, #588]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	e013      	b.n	800150a <HAL_RCC_OscConfig+0x3ae>
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80014fa:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80014fe:	fa93 f3a3 	rbit	r3, r3
 8001502:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001506:	4b89      	ldr	r3, [pc, #548]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	2202      	movs	r2, #2
 800150c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001510:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001514:	fa92 f2a2 	rbit	r2, r2
 8001518:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800151c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001520:	fab2 f282 	clz	r2, r2
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	f042 0220 	orr.w	r2, r2, #32
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	f002 021f 	and.w	r2, r2, #31
 8001530:	2101      	movs	r1, #1
 8001532:	fa01 f202 	lsl.w	r2, r1, r2
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00a      	beq.n	8001552 <HAL_RCC_OscConfig+0x3f6>
 800153c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001540:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d002      	beq.n	8001552 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	f000 be52 	b.w	80021f6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	4b76      	ldr	r3, [pc, #472]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	21f8      	movs	r1, #248	@ 0xf8
 8001568:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001570:	fa91 f1a1 	rbit	r1, r1
 8001574:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001578:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800157c:	fab1 f181 	clz	r1, r1
 8001580:	b2c9      	uxtb	r1, r1
 8001582:	408b      	lsls	r3, r1
 8001584:	4969      	ldr	r1, [pc, #420]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e0fe      	b.n	800178a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001590:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8088 	beq.w	80016ae <HAL_RCC_OscConfig+0x552>
 800159e:	2301      	movs	r3, #1
 80015a0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80015b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80015be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	461a      	mov	r2, r3
 80015c6:	2301      	movs	r3, #1
 80015c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff faa3 	bl	8000b14 <HAL_GetTick>
 80015ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fa9e 	bl	8000b14 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d902      	bls.n	80015ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f000 be06 	b.w	80021f6 <HAL_RCC_OscConfig+0x109a>
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80015fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	b2db      	uxtb	r3, r3
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b01      	cmp	r3, #1
 8001612:	d102      	bne.n	800161a <HAL_RCC_OscConfig+0x4be>
 8001614:	4b45      	ldr	r3, [pc, #276]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	e013      	b.n	8001642 <HAL_RCC_OscConfig+0x4e6>
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001632:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	2202      	movs	r2, #2
 8001644:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001648:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800164c:	fa92 f2a2 	rbit	r2, r2
 8001650:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001654:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001658:	fab2 f282 	clz	r2, r2
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	f042 0220 	orr.w	r2, r2, #32
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	f002 021f 	and.w	r2, r2, #31
 8001668:	2101      	movs	r1, #1
 800166a:	fa01 f202 	lsl.w	r2, r1, r2
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0af      	beq.n	80015d4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800167c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001680:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	21f8      	movs	r1, #248	@ 0xf8
 800168a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001692:	fa91 f1a1 	rbit	r1, r1
 8001696:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800169a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800169e:	fab1 f181 	clz	r1, r1
 80016a2:	b2c9      	uxtb	r1, r1
 80016a4:	408b      	lsls	r3, r1
 80016a6:	4921      	ldr	r1, [pc, #132]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
 80016ac:	e06d      	b.n	800178a <HAL_RCC_OscConfig+0x62e>
 80016ae:	2301      	movs	r3, #1
 80016b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80016c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80016ce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	461a      	mov	r2, r3
 80016d6:	2300      	movs	r3, #0
 80016d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fa1b 	bl	8000b14 <HAL_GetTick>
 80016de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e4:	f7ff fa16 	bl	8000b14 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d902      	bls.n	80016fa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	f000 bd7e 	b.w	80021f6 <HAL_RCC_OscConfig+0x109a>
 80016fa:	2302      	movs	r3, #2
 80016fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800170c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x5d4>
 8001724:	4b01      	ldr	r3, [pc, #4]	@ (800172c <HAL_RCC_OscConfig+0x5d0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	e016      	b.n	8001758 <HAL_RCC_OscConfig+0x5fc>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001742:	2302      	movs	r3, #2
 8001744:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001748:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800174c:	fa93 f3a3 	rbit	r3, r3
 8001750:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001754:	4bbf      	ldr	r3, [pc, #764]	@ (8001a54 <HAL_RCC_OscConfig+0x8f8>)
 8001756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001758:	2202      	movs	r2, #2
 800175a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800175e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001762:	fa92 f2a2 	rbit	r2, r2
 8001766:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800176a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800176e:	fab2 f282 	clz	r2, r2
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	f042 0220 	orr.w	r2, r2, #32
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f002 021f 	and.w	r2, r2, #31
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f202 	lsl.w	r2, r1, r2
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ac      	bne.n	80016e4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800178e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 8113 	beq.w	80019c6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d07c      	beq.n	80018aa <HAL_RCC_OscConfig+0x74e>
 80017b0:	2301      	movs	r3, #1
 80017b2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80017c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4ba2      	ldr	r3, [pc, #648]	@ (8001a58 <HAL_RCC_OscConfig+0x8fc>)
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	461a      	mov	r2, r3
 80017d6:	2301      	movs	r3, #1
 80017d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff f99b 	bl	8000b14 <HAL_GetTick>
 80017de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff f996 	bl	8000b14 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d902      	bls.n	80017fa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	f000 bcfe 	b.w	80021f6 <HAL_RCC_OscConfig+0x109a>
 80017fa:	2302      	movs	r3, #2
 80017fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001804:	fa93 f2a3 	rbit	r2, r3
 8001808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800183a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800183e:	2202      	movs	r2, #2
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001846:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fa93 f2a3 	rbit	r2, r3
 8001850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001854:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001858:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a54 <HAL_RCC_OscConfig+0x8f8>)
 800185c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800185e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001862:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001866:	2102      	movs	r1, #2
 8001868:	6019      	str	r1, [r3, #0]
 800186a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800186e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	fa93 f1a3 	rbit	r1, r3
 8001878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001880:	6019      	str	r1, [r3, #0]
  return result;
 8001882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001886:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d09d      	beq.n	80017e4 <HAL_RCC_OscConfig+0x688>
 80018a8:	e08d      	b.n	80019c6 <HAL_RCC_OscConfig+0x86a>
 80018aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018cc:	601a      	str	r2, [r3, #0]
  return result;
 80018ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001a58 <HAL_RCC_OscConfig+0x8fc>)
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff f912 	bl	8000b14 <HAL_GetTick>
 80018f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff f90d 	bl	8000b14 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d902      	bls.n	800190c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	f000 bc75 	b.w	80021f6 <HAL_RCC_OscConfig+0x109a>
 800190c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001910:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001914:	2202      	movs	r2, #2
 8001916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	fa93 f2a3 	rbit	r2, r3
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001934:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001938:	2202      	movs	r2, #2
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001940:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	fa93 f2a3 	rbit	r2, r3
 800194a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001958:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800195c:	2202      	movs	r2, #2
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001964:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001972:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001976:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	4b36      	ldr	r3, [pc, #216]	@ (8001a54 <HAL_RCC_OscConfig+0x8f8>)
 800197a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001984:	2102      	movs	r1, #2
 8001986:	6019      	str	r1, [r3, #0]
 8001988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	fa93 f1a3 	rbit	r1, r3
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800199e:	6019      	str	r1, [r3, #0]
  return result;
 80019a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2101      	movs	r1, #1
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d197      	bne.n	80018f6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 81a5 	beq.w	8001d26 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <HAL_RCC_OscConfig+0x8f8>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <HAL_RCC_OscConfig+0x8f8>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a18      	ldr	r2, [pc, #96]	@ (8001a54 <HAL_RCC_OscConfig+0x8f8>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <HAL_RCC_OscConfig+0x8f8>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a14:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_RCC_OscConfig+0x900>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d121      	bne.n	8001a6c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <HAL_RCC_OscConfig+0x900>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <HAL_RCC_OscConfig+0x900>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a34:	f7ff f86e 	bl	8000b14 <HAL_GetTick>
 8001a38:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e010      	b.n	8001a60 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff f869 	bl	8000b14 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d908      	bls.n	8001a60 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e3d1      	b.n	80021f6 <HAL_RCC_OscConfig+0x109a>
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	10908120 	.word	0x10908120
 8001a5c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4b8d      	ldr	r3, [pc, #564]	@ (8001c98 <HAL_RCC_OscConfig+0xb3c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0e8      	beq.n	8001a3e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x92e>
 8001a7c:	4b87      	ldr	r3, [pc, #540]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a86      	ldr	r2, [pc, #536]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	e035      	b.n	8001af6 <HAL_RCC_OscConfig+0x99a>
 8001a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x958>
 8001a9a:	4b80      	ldr	r3, [pc, #512]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a7f      	ldr	r2, [pc, #508]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a7c      	ldr	r2, [pc, #496]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
 8001ab2:	e020      	b.n	8001af6 <HAL_RCC_OscConfig+0x99a>
 8001ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x982>
 8001ac4:	4b75      	ldr	r3, [pc, #468]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a74      	ldr	r2, [pc, #464]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	4b72      	ldr	r3, [pc, #456]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a71      	ldr	r2, [pc, #452]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0x99a>
 8001ade:	4b6f      	ldr	r3, [pc, #444]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6213      	str	r3, [r2, #32]
 8001aea:	4b6c      	ldr	r3, [pc, #432]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a6b      	ldr	r2, [pc, #428]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8081 	beq.w	8001c0a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff f804 	bl	8000b14 <HAL_GetTick>
 8001b0c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b10:	e00b      	b.n	8001b2a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe ffff 	bl	8000b14 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e365      	b.n	80021f6 <HAL_RCC_OscConfig+0x109a>
 8001b2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b32:	2202      	movs	r2, #2
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	fa93 f2a3 	rbit	r2, r3
 8001b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b48:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b52:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b56:	2202      	movs	r2, #2
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b70:	601a      	str	r2, [r3, #0]
  return result;
 8001b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b76:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d102      	bne.n	8001b96 <HAL_RCC_OscConfig+0xa3a>
 8001b90:	4b42      	ldr	r3, [pc, #264]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	e013      	b.n	8001bbe <HAL_RCC_OscConfig+0xa62>
 8001b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fa93 f2a3 	rbit	r2, r3
 8001bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	4b38      	ldr	r3, [pc, #224]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bc2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	6011      	str	r1, [r2, #0]
 8001bca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bce:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	fa92 f1a2 	rbit	r1, r2
 8001bd8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bdc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001be0:	6011      	str	r1, [r2, #0]
  return result;
 8001be2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001be6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	fab2 f282 	clz	r2, r2
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f002 021f 	and.w	r2, r2, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d084      	beq.n	8001b12 <HAL_RCC_OscConfig+0x9b6>
 8001c08:	e083      	b.n	8001d12 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7fe ff83 	bl	8000b14 <HAL_GetTick>
 8001c0e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7fe ff7e 	bl	8000b14 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e2e4      	b.n	80021f6 <HAL_RCC_OscConfig+0x109a>
 8001c2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c30:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c34:	2202      	movs	r2, #2
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c54:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c58:	2202      	movs	r2, #2
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c60:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c72:	601a      	str	r2, [r3, #0]
  return result;
 8001c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c78:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xb44>
 8001c92:	4b02      	ldr	r3, [pc, #8]	@ (8001c9c <HAL_RCC_OscConfig+0xb40>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	e017      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb6c>
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ca8:	2202      	movs	r2, #2
 8001caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbe:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	4bb3      	ldr	r3, [pc, #716]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ccc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	6011      	str	r1, [r2, #0]
 8001cd4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cd8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	fa92 f1a2 	rbit	r1, r2
 8001ce2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ce6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001cea:	6011      	str	r1, [r2, #0]
  return result;
 8001cec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cf0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	fab2 f282 	clz	r2, r2
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f002 021f 	and.w	r2, r2, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d180      	bne.n	8001c14 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d12:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d105      	bne.n	8001d26 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1a:	4b9e      	ldr	r3, [pc, #632]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4a9d      	ldr	r2, [pc, #628]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 825e 	beq.w	80021f4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d38:	4b96      	ldr	r3, [pc, #600]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	f000 821f 	beq.w	8002184 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	f040 8170 	bne.w	8002038 <HAL_RCC_OscConfig+0xedc>
 8001d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d78:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d7c:	601a      	str	r2, [r3, #0]
  return result;
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d86:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d92:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe feb9 	bl	8000b14 <HAL_GetTick>
 8001da2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da6:	e009      	b.n	8001dbc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe feb4 	bl	8000b14 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e21c      	b.n	80021f6 <HAL_RCC_OscConfig+0x109a>
 8001dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001dc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dce:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ddc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001de0:	601a      	str	r2, [r3, #0]
  return result;
 8001de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001dea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <HAL_RCC_OscConfig+0xcaa>
 8001e00:	4b64      	ldr	r3, [pc, #400]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	e027      	b.n	8001e56 <HAL_RCC_OscConfig+0xcfa>
 8001e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e18:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e26:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e30:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e4c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	4b50      	ldr	r3, [pc, #320]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e5a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e5e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e62:	6011      	str	r1, [r2, #0]
 8001e64:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e68:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	fa92 f1a2 	rbit	r1, r2
 8001e72:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e76:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001e7a:	6011      	str	r1, [r2, #0]
  return result;
 8001e7c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e80:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	fab2 f282 	clz	r2, r2
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f002 021f 	and.w	r2, r2, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d182      	bne.n	8001da8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	f023 020f 	bic.w	r2, r3, #15
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	4937      	ldr	r1, [pc, #220]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001ebc:	4b35      	ldr	r3, [pc, #212]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a19      	ldr	r1, [r3, #32]
 8001ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	492d      	ldr	r1, [pc, #180]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
 8001ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001eec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f04:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f08:	601a      	str	r2, [r3, #0]
  return result;
 8001f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f12:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f1e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	461a      	mov	r2, r3
 8001f26:	2301      	movs	r3, #1
 8001f28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fdf3 	bl	8000b14 <HAL_GetTick>
 8001f2e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f32:	e009      	b.n	8001f48 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe fdee 	bl	8000b14 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e156      	b.n	80021f6 <HAL_RCC_OscConfig+0x109a>
 8001f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f68:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f6c:	601a      	str	r2, [r3, #0]
  return result;
 8001f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f72:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCC_OscConfig+0xe3c>
 8001f8c:	4b01      	ldr	r3, [pc, #4]	@ (8001f94 <HAL_RCC_OscConfig+0xe38>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	e02a      	b.n	8001fe8 <HAL_RCC_OscConfig+0xe8c>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001faa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001fc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fa93 f2a3 	rbit	r2, r3
 8001fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fde:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4b86      	ldr	r3, [pc, #536]	@ (8002200 <HAL_RCC_OscConfig+0x10a4>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fec:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ff0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ff4:	6011      	str	r1, [r2, #0]
 8001ff6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ffa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	fa92 f1a2 	rbit	r1, r2
 8002004:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002008:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800200c:	6011      	str	r1, [r2, #0]
  return result;
 800200e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002012:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	fab2 f282 	clz	r2, r2
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	f43f af7f 	beq.w	8001f34 <HAL_RCC_OscConfig+0xdd8>
 8002036:	e0dd      	b.n	80021f4 <HAL_RCC_OscConfig+0x1098>
 8002038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002040:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002058:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800205c:	601a      	str	r2, [r3, #0]
  return result;
 800205e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002062:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002066:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002072:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	461a      	mov	r2, r3
 800207a:	2300      	movs	r3, #0
 800207c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe fd49 	bl	8000b14 <HAL_GetTick>
 8002082:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002086:	e009      	b.n	800209c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe fd44 	bl	8000b14 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0ac      	b.n	80021f6 <HAL_RCC_OscConfig+0x109a>
 800209c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fa93 f2a3 	rbit	r2, r3
 80020b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020bc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80020c0:	601a      	str	r2, [r3, #0]
  return result;
 80020c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80020ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d102      	bne.n	80020e6 <HAL_RCC_OscConfig+0xf8a>
 80020e0:	4b47      	ldr	r3, [pc, #284]	@ (8002200 <HAL_RCC_OscConfig+0x10a4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	e027      	b.n	8002136 <HAL_RCC_OscConfig+0xfda>
 80020e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ea:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80020ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002106:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002110:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002114:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	4b33      	ldr	r3, [pc, #204]	@ (8002200 <HAL_RCC_OscConfig+0x10a4>)
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800213a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800213e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002142:	6011      	str	r1, [r2, #0]
 8002144:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002148:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	fa92 f1a2 	rbit	r1, r2
 8002152:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002156:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800215a:	6011      	str	r1, [r2, #0]
  return result;
 800215c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002160:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	fab2 f282 	clz	r2, r2
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	f042 0220 	orr.w	r2, r2, #32
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f002 021f 	and.w	r2, r2, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f202 	lsl.w	r2, r1, r2
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d182      	bne.n	8002088 <HAL_RCC_OscConfig+0xf2c>
 8002182:	e037      	b.n	80021f4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002188:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e02e      	b.n	80021f6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002198:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <HAL_RCC_OscConfig+0x10a4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80021a0:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <HAL_RCC_OscConfig+0x10a4>)
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80021ac:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80021b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d117      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80021c4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d10b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80021d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021dc:	f003 020f 	and.w	r2, r3, #15
 80021e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000

08002204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b09e      	sub	sp, #120	@ 0x78
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e162      	b.n	80024e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800221c:	4b90      	ldr	r3, [pc, #576]	@ (8002460 <HAL_RCC_ClockConfig+0x25c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d910      	bls.n	800224c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b8d      	ldr	r3, [pc, #564]	@ (8002460 <HAL_RCC_ClockConfig+0x25c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 0207 	bic.w	r2, r3, #7
 8002232:	498b      	ldr	r1, [pc, #556]	@ (8002460 <HAL_RCC_ClockConfig+0x25c>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b89      	ldr	r3, [pc, #548]	@ (8002460 <HAL_RCC_ClockConfig+0x25c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e14a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b82      	ldr	r3, [pc, #520]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	497f      	ldr	r1, [pc, #508]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80dc 	beq.w	8002430 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d13c      	bne.n	80022fa <HAL_RCC_ClockConfig+0xf6>
 8002280:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002284:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800228e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d102      	bne.n	80022aa <HAL_RCC_ClockConfig+0xa6>
 80022a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	e00f      	b.n	80022ca <HAL_RCC_ClockConfig+0xc6>
 80022aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80022b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80022be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022c6:	4b67      	ldr	r3, [pc, #412]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80022d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022d2:	fa92 f2a2 	rbit	r2, r2
 80022d6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80022d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d17b      	bne.n	80023ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0f3      	b.n	80024e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d13c      	bne.n	800237c <HAL_RCC_ClockConfig+0x178>
 8002302:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002306:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d102      	bne.n	800232c <HAL_RCC_ClockConfig+0x128>
 8002326:	4b4f      	ldr	r3, [pc, #316]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	e00f      	b.n	800234c <HAL_RCC_ClockConfig+0x148>
 800232c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002330:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	647b      	str	r3, [r7, #68]	@ 0x44
 800233a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800233e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002348:	4b46      	ldr	r3, [pc, #280]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002350:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002352:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002354:	fa92 f2a2 	rbit	r2, r2
 8002358:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800235a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800235c:	fab2 f282 	clz	r2, r2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	f042 0220 	orr.w	r2, r2, #32
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f002 021f 	and.w	r2, r2, #31
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f202 	lsl.w	r2, r1, r2
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d13a      	bne.n	80023ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b2      	b.n	80024e2 <HAL_RCC_ClockConfig+0x2de>
 800237c:	2302      	movs	r3, #2
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1a0>
 800239e:	4b31      	ldr	r3, [pc, #196]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e00d      	b.n	80023c0 <HAL_RCC_ClockConfig+0x1bc>
 80023a4:	2302      	movs	r3, #2
 80023a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b0:	2302      	movs	r3, #2
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	4b29      	ldr	r3, [pc, #164]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	2202      	movs	r2, #2
 80023c2:	61ba      	str	r2, [r7, #24]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	fa92 f2a2 	rbit	r2, r2
 80023ca:	617a      	str	r2, [r7, #20]
  return result;
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f042 0220 	orr.w	r2, r2, #32
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f002 021f 	and.w	r2, r2, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f202 	lsl.w	r2, r1, r2
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e079      	b.n	80024e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	491a      	ldr	r1, [pc, #104]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002400:	f7fe fb88 	bl	8000b14 <HAL_GetTick>
 8002404:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	e00a      	b.n	800241e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7fe fb84 	bl	8000b14 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e061      	b.n	80024e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_RCC_ClockConfig+0x260>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 020c 	and.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	429a      	cmp	r2, r3
 800242e:	d1eb      	bne.n	8002408 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_RCC_ClockConfig+0x25c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d214      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <HAL_RCC_ClockConfig+0x25c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	4906      	ldr	r1, [pc, #24]	@ (8002460 <HAL_RCC_ClockConfig+0x25c>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <HAL_RCC_ClockConfig+0x25c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e040      	b.n	80024e2 <HAL_RCC_ClockConfig+0x2de>
 8002460:	40022000 	.word	0x40022000
 8002464:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002474:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <HAL_RCC_ClockConfig+0x2e8>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	491a      	ldr	r1, [pc, #104]	@ (80024ec <HAL_RCC_ClockConfig+0x2e8>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002492:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <HAL_RCC_ClockConfig+0x2e8>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4912      	ldr	r1, [pc, #72]	@ (80024ec <HAL_RCC_ClockConfig+0x2e8>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024a6:	f000 f829 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80024aa:	4601      	mov	r1, r0
 80024ac:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <HAL_RCC_ClockConfig+0x2e8>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b4:	22f0      	movs	r2, #240	@ 0xf0
 80024b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	fa92 f2a2 	rbit	r2, r2
 80024be:	60fa      	str	r2, [r7, #12]
  return result;
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	40d3      	lsrs	r3, r2
 80024ca:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <HAL_RCC_ClockConfig+0x2ec>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	fa21 f303 	lsr.w	r3, r1, r3
 80024d2:	4a08      	ldr	r2, [pc, #32]	@ (80024f4 <HAL_RCC_ClockConfig+0x2f0>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024d6:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <HAL_RCC_ClockConfig+0x2f4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fad6 	bl	8000a8c <HAL_InitTick>
  
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3778      	adds	r7, #120	@ 0x78
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	080051c0 	.word	0x080051c0
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002516:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x98>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b04      	cmp	r3, #4
 8002524:	d002      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x30>
 8002526:	2b08      	cmp	r3, #8
 8002528:	d003      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x36>
 800252a:	e029      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x9c>)
 800252e:	613b      	str	r3, [r7, #16]
      break;
 8002530:	e029      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	0c9b      	lsrs	r3, r3, #18
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	4a18      	ldr	r2, [pc, #96]	@ (800259c <HAL_RCC_GetSysClockFreq+0xa0>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	4a15      	ldr	r2, [pc, #84]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002558:	4a0f      	ldr	r2, [pc, #60]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x9c>)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e007      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800256a:	4a0b      	ldr	r2, [pc, #44]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x9c>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	613b      	str	r3, [r7, #16]
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002582:	613b      	str	r3, [r7, #16]
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	693b      	ldr	r3, [r7, #16]
}
 8002588:	4618      	mov	r0, r3
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40021000 	.word	0x40021000
 8002598:	007a1200 	.word	0x007a1200
 800259c:	080051d8 	.word	0x080051d8
 80025a0:	080051e8 	.word	0x080051e8

080025a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a8:	4b03      	ldr	r3, [pc, #12]	@ (80025b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000000 	.word	0x20000000

080025bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025c2:	f7ff ffef 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025c6:	4601      	mov	r1, r0
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025d0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80025d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	fa92 f2a2 	rbit	r2, r2
 80025dc:	603a      	str	r2, [r7, #0]
  return result;
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	40d3      	lsrs	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	080051d0 	.word	0x080051d0

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002606:	f7ff ffcd 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 800260a:	4601      	mov	r1, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002614:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002618:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	fa92 f2a2 	rbit	r2, r2
 8002620:	603a      	str	r2, [r7, #0]
  return result;
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	fab2 f282 	clz	r2, r2
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	40d3      	lsrs	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	@ (8002640 <HAL_RCC_GetPCLK2Freq+0x40>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	080051d0 	.word	0x080051d0

08002644 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b092      	sub	sp, #72	@ 0x48
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80d4 	beq.w	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002668:	4b4e      	ldr	r3, [pc, #312]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10e      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b4b      	ldr	r3, [pc, #300]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	4a4a      	ldr	r2, [pc, #296]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267e:	61d3      	str	r3, [r2, #28]
 8002680:	4b48      	ldr	r3, [pc, #288]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b45      	ldr	r3, [pc, #276]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b42      	ldr	r3, [pc, #264]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a41      	ldr	r2, [pc, #260]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fa33 	bl	8000b14 <HAL_GetTick>
 80026ae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fe fa2f 	bl	8000b14 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	@ 0x64
 80026be:	d901      	bls.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1d6      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b38      	ldr	r3, [pc, #224]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026d0:	4b34      	ldr	r3, [pc, #208]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8084 	beq.w	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d07c      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026f0:	4b2c      	ldr	r3, [pc, #176]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	4b26      	ldr	r3, [pc, #152]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	461a      	mov	r2, r3
 800271a:	2301      	movs	r3, #1
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800272c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	461a      	mov	r2, r3
 800273e:	2300      	movs	r3, #0
 8002740:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002742:	4a18      	ldr	r2, [pc, #96]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002746:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04b      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fe f9df 	bl	8000b14 <HAL_GetTick>
 8002756:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe f9db 	bl	8000b14 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e180      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002770:	2302      	movs	r3, #2
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
 800277c:	2302      	movs	r3, #2
 800277e:	623b      	str	r3, [r7, #32]
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	61fb      	str	r3, [r7, #28]
  return result;
 8002788:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d108      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800279e:	4b01      	ldr	r3, [pc, #4]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	e00d      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40007000 	.word	0x40007000
 80027ac:	10908100 	.word	0x10908100
 80027b0:	2302      	movs	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	4b9a      	ldr	r3, [pc, #616]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	2202      	movs	r2, #2
 80027c2:	613a      	str	r2, [r7, #16]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	fa92 f2a2 	rbit	r2, r2
 80027ca:	60fa      	str	r2, [r7, #12]
  return result;
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f002 021f 	and.w	r2, r2, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0b7      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	498c      	ldr	r1, [pc, #560]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002804:	4b88      	ldr	r3, [pc, #544]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	4a87      	ldr	r2, [pc, #540]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800280e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800281c:	4b82      	ldr	r3, [pc, #520]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	f023 0203 	bic.w	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	497f      	ldr	r1, [pc, #508]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800283a:	4b7b      	ldr	r3, [pc, #492]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4978      	ldr	r1, [pc, #480]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002858:	4b73      	ldr	r3, [pc, #460]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	4970      	ldr	r1, [pc, #448]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002876:	4b6c      	ldr	r3, [pc, #432]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f023 0210 	bic.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4969      	ldr	r1, [pc, #420]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002894:	4b64      	ldr	r3, [pc, #400]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a0:	4961      	ldr	r1, [pc, #388]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f023 0220 	bic.w	r2, r3, #32
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	495a      	ldr	r1, [pc, #360]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d0:	4b55      	ldr	r3, [pc, #340]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	4952      	ldr	r1, [pc, #328]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d008      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	494b      	ldr	r1, [pc, #300]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800290c:	4b46      	ldr	r3, [pc, #280]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002910:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4943      	ldr	r1, [pc, #268]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800292a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	493c      	ldr	r1, [pc, #240]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002948:	4b37      	ldr	r3, [pc, #220]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	4934      	ldr	r1, [pc, #208]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002966:	4b30      	ldr	r3, [pc, #192]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	492d      	ldr	r1, [pc, #180]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002974:	4313      	orrs	r3, r2
 8002976:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002984:	4b28      	ldr	r3, [pc, #160]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002990:	4925      	ldr	r1, [pc, #148]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029a2:	4b21      	ldr	r3, [pc, #132]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	491e      	ldr	r1, [pc, #120]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80029c0:	4b19      	ldr	r3, [pc, #100]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029cc:	4916      	ldr	r1, [pc, #88]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80029de:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ea:	490f      	ldr	r1, [pc, #60]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	4907      	ldr	r1, [pc, #28]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a1a:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	e002      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a2e:	4913      	ldr	r1, [pc, #76]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a40:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4c:	490b      	ldr	r1, [pc, #44]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a5e:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6a:	4904      	ldr	r1, [pc, #16]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3748      	adds	r7, #72	@ 0x48
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000

08002a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e09d      	b.n	8002bce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aa2:	d009      	beq.n	8002ab8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
 8002aaa:	e005      	b.n	8002ab8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fd fe16 	bl	8000704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002af8:	d902      	bls.n	8002b00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	e002      	b.n	8002b06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b0e:	d007      	beq.n	8002b20 <HAL_SPI_Init+0xa0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b18:	d002      	beq.n	8002b20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b62:	ea42 0103 	orr.w	r1, r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	0c1b      	lsrs	r3, r3, #16
 8002b7c:	f003 0204 	and.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d002      	beq.n	8002bfc <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bfa:	e092      	b.n	8002d22 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d110      	bne.n	8002c26 <HAL_SPI_Receive_IT+0x4e>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c0c:	d10b      	bne.n	8002c26 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2204      	movs	r2, #4
 8002c12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f889 	bl	8002d34 <HAL_SPI_TransmitReceive_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	e07e      	b.n	8002d24 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_SPI_Receive_IT+0x5a>
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d102      	bne.n	8002c38 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c36:	e074      	b.n	8002d22 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_SPI_Receive_IT+0x6e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e06e      	b.n	8002d24 <HAL_SPI_Receive_IT+0x14c>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2204      	movs	r2, #4
 8002c52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	88fa      	ldrh	r2, [r7, #6]
 8002c66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	88fa      	ldrh	r2, [r7, #6]
 8002c6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c92:	d90b      	bls.n	8002cac <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ca2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a21      	ldr	r2, [pc, #132]	@ (8002d2c <HAL_SPI_Receive_IT+0x154>)
 8002ca8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002caa:	e00a      	b.n	8002cc2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cba:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d30 <HAL_SPI_Receive_IT+0x158>)
 8002cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cca:	d10f      	bne.n	8002cec <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cea:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf6:	2b40      	cmp	r3, #64	@ 0x40
 8002cf8:	d007      	beq.n	8002d0a <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002d20:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	08003331 	.word	0x08003331
 8002d30:	080032e1 	.word	0x080032e1

08002d34 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d4c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d54:	7dbb      	ldrb	r3, [r7, #22]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d00d      	beq.n	8002d76 <HAL_SPI_TransmitReceive_IT+0x42>
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d60:	d106      	bne.n	8002d70 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_SPI_TransmitReceive_IT+0x3c>
 8002d6a:	7dbb      	ldrb	r3, [r7, #22]
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d002      	beq.n	8002d76 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
 8002d72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d74:	e07d      	b.n	8002e72 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_SPI_TransmitReceive_IT+0x54>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_SPI_TransmitReceive_IT+0x54>
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d8c:	e071      	b.n	8002e72 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_SPI_TransmitReceive_IT+0x68>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e06b      	b.n	8002e74 <HAL_SPI_TransmitReceive_IT+0x140>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d003      	beq.n	8002db8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2205      	movs	r2, #5
 8002db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	887a      	ldrh	r2, [r7, #2]
 8002dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	887a      	ldrh	r2, [r7, #2]
 8002dda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	887a      	ldrh	r2, [r7, #2]
 8002de2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dee:	d906      	bls.n	8002dfe <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a23      	ldr	r2, [pc, #140]	@ (8002e80 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002df4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002dfa:	651a      	str	r2, [r3, #80]	@ 0x50
 8002dfc:	e005      	b.n	8002e0a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a21      	ldr	r2, [pc, #132]	@ (8002e88 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002e02:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a21      	ldr	r2, [pc, #132]	@ (8002e8c <HAL_SPI_TransmitReceive_IT+0x158>)
 8002e08:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e12:	d802      	bhi.n	8002e1a <HAL_SPI_TransmitReceive_IT+0xe6>
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d908      	bls.n	8002e2c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	e007      	b.n	8002e3c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e3a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e46:	2b40      	cmp	r3, #64	@ 0x40
 8002e48:	d007      	beq.n	8002e5a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002e70:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	0800321b 	.word	0x0800321b
 8002e84:	08003281 	.word	0x08003281
 8002e88:	080030cb 	.word	0x080030cb
 8002e8c:	08003189 	.word	0x08003189

08002e90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
    return;
 8002ece:	e0ce      	b.n	800306e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_SPI_IRQHandler+0x5e>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
    return;
 8002eec:	e0bf      	b.n	800306e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_SPI_IRQHandler+0x7e>
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80b0 	beq.w	800306e <HAL_SPI_IRQHandler+0x1de>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80aa 	beq.w	800306e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d023      	beq.n	8002f6c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d011      	beq.n	8002f54 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f34:	f043 0204 	orr.w	r2, r3, #4
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	e00b      	b.n	8002f6c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]
        return;
 8002f6a:	e080      	b.n	800306e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d014      	beq.n	8002fa0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fae:	f043 0208 	orr.w	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d04f      	beq.n	800306c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fda:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <HAL_SPI_IRQHandler+0x168>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d034      	beq.n	8003062 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0203 	bic.w	r2, r2, #3
 8003006:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	2b00      	cmp	r3, #0
 800300e:	d011      	beq.n	8003034 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003014:	4a17      	ldr	r2, [pc, #92]	@ (8003074 <HAL_SPI_IRQHandler+0x1e4>)
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fed4 	bl	8000dca <HAL_DMA_Abort_IT>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003038:	2b00      	cmp	r3, #0
 800303a:	d016      	beq.n	800306a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003040:	4a0c      	ldr	r2, [pc, #48]	@ (8003074 <HAL_SPI_IRQHandler+0x1e4>)
 8003042:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd febe 	bl	8000dca <HAL_DMA_Abort_IT>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003058:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003060:	e003      	b.n	800306a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f812 	bl	800308c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003068:	e000      	b.n	800306c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800306a:	bf00      	nop
    return;
 800306c:	bf00      	nop
  }
}
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	080030a1 	.word	0x080030a1

08003078 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff ffe5 	bl	800308c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d923      	bls.n	8003126 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	b292      	uxth	r2, r2
 80030ea:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b02      	subs	r3, #2
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	d11f      	bne.n	8003154 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	e016      	b.n	8003154 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f103 020c 	add.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800316e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 faba 	bl	80036f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d912      	bls.n	80031c0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	881a      	ldrh	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b02      	subs	r3, #2
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031be:	e012      	b.n	80031e6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d110      	bne.n	8003212 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031fe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fa71 	bl	80036f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	b292      	uxth	r2, r2
 800322e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003266:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa3e 	bl	80036f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	881a      	ldrh	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003298:	1c9a      	adds	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d110      	bne.n	80032d8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032c4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa0e 	bl	80036f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f103 020c 	add.w	r2, r3, #12
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa28 	bl	8003778 <SPI_CloseRx_ISR>
  }
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	b292      	uxth	r2, r2
 8003344:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	1c9a      	adds	r2, r3, #2
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fa02 	bl	8003778 <SPI_CloseRx_ISR>
  }
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800338c:	f7fd fbc2 	bl	8000b14 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	4413      	add	r3, r2
 800339a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800339c:	f7fd fbba 	bl	8000b14 <HAL_GetTick>
 80033a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033a2:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	015b      	lsls	r3, r3, #5
 80033a8:	0d1b      	lsrs	r3, r3, #20
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033b2:	e054      	b.n	800345e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d050      	beq.n	800345e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033bc:	f7fd fbaa 	bl	8000b14 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d902      	bls.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d13d      	bne.n	800344e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ea:	d111      	bne.n	8003410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f4:	d004      	beq.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fe:	d107      	bne.n	8003410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800340e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003418:	d10f      	bne.n	800343a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e017      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3b01      	subs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	429a      	cmp	r2, r3
 800347a:	d19b      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000000 	.word	0x20000000

0800348c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800349e:	f7fd fb39 	bl	8000b14 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80034ae:	f7fd fb31 	bl	8000b14 <HAL_GetTick>
 80034b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	330c      	adds	r3, #12
 80034ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034bc:	4b3d      	ldr	r3, [pc, #244]	@ (80035b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00da      	lsls	r2, r3, #3
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	0d1b      	lsrs	r3, r3, #20
 80034cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034d4:	e060      	b.n	8003598 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80034dc:	d107      	bne.n	80034ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d050      	beq.n	8003598 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034f6:	f7fd fb0d 	bl	8000b14 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003502:	429a      	cmp	r2, r3
 8003504:	d902      	bls.n	800350c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d13d      	bne.n	8003588 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800351a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003524:	d111      	bne.n	800354a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800352e:	d004      	beq.n	800353a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003538:	d107      	bne.n	800354a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003548:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003552:	d10f      	bne.n	8003574 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003572:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e010      	b.n	80035aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	3b01      	subs	r3, #1
 8003596:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d196      	bne.n	80034d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3728      	adds	r7, #40	@ 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000000 	.word	0x20000000

080035b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035cc:	d111      	bne.n	80035f2 <SPI_EndRxTransaction+0x3a>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d6:	d004      	beq.n	80035e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e0:	d107      	bne.n	80035f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2180      	movs	r1, #128	@ 0x80
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff febd 	bl	800337c <SPI_WaitFlagStateUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e023      	b.n	8003660 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003620:	d11d      	bne.n	800365e <SPI_EndRxTransaction+0xa6>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800362a:	d004      	beq.n	8003636 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003634:	d113      	bne.n	800365e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2200      	movs	r2, #0
 800363e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff ff22 	bl	800348c <SPI_WaitFifoStateUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e000      	b.n	8003660 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2200      	movs	r2, #0
 800367c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff ff03 	bl	800348c <SPI_WaitFifoStateUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	f043 0220 	orr.w	r2, r3, #32
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e027      	b.n	80036ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	2180      	movs	r1, #128	@ 0x80
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff fe68 	bl	800337c <SPI_WaitFlagStateUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b6:	f043 0220 	orr.w	r2, r3, #32
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e014      	b.n	80036ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff fedc 	bl	800348c <SPI_WaitFifoStateUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e000      	b.n	80036ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036fc:	f7fd fa0a 	bl	8000b14 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0220 	bic.w	r2, r2, #32
 8003710:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	2164      	movs	r1, #100	@ 0x64
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffa6 	bl	8003668 <SPI_EndRxTxTransaction>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003732:	2b00      	cmp	r3, #0
 8003734:	d115      	bne.n	8003762 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b04      	cmp	r3, #4
 8003740:	d107      	bne.n	8003752 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fc fe24 	bl	8000398 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003750:	e00e      	b.n	8003770 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fc8c 	bl	8003078 <HAL_SPI_TxRxCpltCallback>
}
 8003760:	e006      	b.n	8003770 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff fc8e 	bl	800308c <HAL_SPI_ErrorCallback>
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800378e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003790:	f7fd f9c0 	bl	8000b14 <HAL_GetTick>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	2164      	movs	r1, #100	@ 0x64
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff0c 	bl	80035b8 <SPI_EndRxTransaction>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fc fde8 	bl	8000398 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80037c8:	e002      	b.n	80037d0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fc5e 	bl	800308c <HAL_SPI_ErrorCallback>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e040      	b.n	800386c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd f826 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	@ 0x24
 8003804:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fd8c 	bl	800433c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fbb5 	bl	8003f94 <UART_SetConfig>
 800382a:	4603      	mov	r3, r0
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e01b      	b.n	800386c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fe0b 	bl	8004480 <UART_CheckIdleState>
 800386a:	4603      	mov	r3, r0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	@ 0x28
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003888:	2b20      	cmp	r3, #32
 800388a:	d177      	bne.n	800397c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_UART_Transmit+0x24>
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e070      	b.n	800397e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2221      	movs	r2, #33	@ 0x21
 80038a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038aa:	f7fd f933 	bl	8000b14 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c8:	d108      	bne.n	80038dc <HAL_UART_Transmit+0x68>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	e003      	b.n	80038e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038e4:	e02f      	b.n	8003946 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	2180      	movs	r1, #128	@ 0x80
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fe6d 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e03b      	b.n	800397e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	881a      	ldrh	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003918:	b292      	uxth	r2, r2
 800391a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	3302      	adds	r3, #2
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	e007      	b.n	8003934 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3301      	adds	r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1c9      	bne.n	80038e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	2140      	movs	r1, #64	@ 0x40
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 fe37 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e005      	b.n	800397e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b0ba      	sub	sp, #232	@ 0xe8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80039b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80039b6:	4013      	ands	r3, r2
 80039b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80039bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d115      	bne.n	80039f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00f      	beq.n	80039f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 82ab 	beq.w	8003f3c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
      }
      return;
 80039ee:	e2a5      	b.n	8003f3c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8117 	beq.w	8003c28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003a0a:	4b85      	ldr	r3, [pc, #532]	@ (8003c20 <HAL_UART_IRQHandler+0x298>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 810a 	beq.w	8003c28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d011      	beq.n	8003a44 <HAL_UART_IRQHandler+0xbc>
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2201      	movs	r2, #1
 8003a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d011      	beq.n	8003a74 <HAL_UART_IRQHandler+0xec>
 8003a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2202      	movs	r2, #2
 8003a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d011      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x11c>
 8003a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2204      	movs	r2, #4
 8003a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a9a:	f043 0202 	orr.w	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d017      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ac0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2208      	movs	r2, #8
 8003ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad6:	f043 0208 	orr.w	r2, r3, #8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d012      	beq.n	8003b12 <HAL_UART_IRQHandler+0x18a>
 8003aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00c      	beq.n	8003b12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8211 	beq.w	8003f40 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d04f      	beq.n	8003c0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fd9d 	bl	80046aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7a:	2b40      	cmp	r3, #64	@ 0x40
 8003b7c:	d141      	bne.n	8003c02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003baa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1d9      	bne.n	8003b7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d013      	beq.n	8003bfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd6:	4a13      	ldr	r2, [pc, #76]	@ (8003c24 <HAL_UART_IRQHandler+0x29c>)
 8003bd8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd f8f3 	bl	8000dca <HAL_DMA_Abort_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d017      	beq.n	8003c1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	e00f      	b.n	8003c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f9b4 	bl	8003f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	e00b      	b.n	8003c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9b0 	bl	8003f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e007      	b.n	8003c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f9ac 	bl	8003f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003c18:	e192      	b.n	8003f40 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1a:	bf00      	nop
    return;
 8003c1c:	e190      	b.n	8003f40 <HAL_UART_IRQHandler+0x5b8>
 8003c1e:	bf00      	nop
 8003c20:	04000120 	.word	0x04000120
 8003c24:	08004773 	.word	0x08004773

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	f040 814b 	bne.w	8003ec8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8144 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 813d 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2210      	movs	r2, #16
 8003c54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	f040 80b5 	bne.w	8003dd0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8164 	beq.w	8003f44 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c86:	429a      	cmp	r2, r3
 8003c88:	f080 815c 	bcs.w	8003f44 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	f000 8086 	beq.w	8003dae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ccc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cd0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1da      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d10:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d14:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d18:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e1      	bne.n	8003cec <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3308      	adds	r3, #8
 8003d48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d4c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e3      	bne.n	8003d28 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d7e:	f023 0310 	bic.w	r3, r3, #16
 8003d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e4      	bne.n	8003d6e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fc ffd0 	bl	8000d4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8d7 	bl	8003f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dce:	e0b9      	b.n	8003f44 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80ab 	beq.w	8003f48 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80a6 	beq.w	8003f48 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e20:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e4      	bne.n	8003dfc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	623b      	str	r3, [r7, #32]
   return(result);
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e56:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e3      	bne.n	8003e32 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	69b9      	ldr	r1, [r7, #24]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	617b      	str	r3, [r7, #20]
   return(result);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e4      	bne.n	8003e7e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f85b 	bl	8003f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ec6:	e03f      	b.n	8003f48 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x56a>
 8003ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fc81 	bl	80047f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ef0:	e02d      	b.n	8003f4e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00e      	beq.n	8003f1c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01c      	beq.n	8003f4c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
    }
    return;
 8003f1a:	e017      	b.n	8003f4c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d012      	beq.n	8003f4e <HAL_UART_IRQHandler+0x5c6>
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00c      	beq.n	8003f4e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fc32 	bl	800479e <UART_EndTransmit_IT>
    return;
 8003f3a:	e008      	b.n	8003f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f3c:	bf00      	nop
 8003f3e:	e006      	b.n	8003f4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f40:	bf00      	nop
 8003f42:	e004      	b.n	8003f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f44:	bf00      	nop
 8003f46:	e002      	b.n	8003f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f4c:	bf00      	nop
  }

}
 8003f4e:	37e8      	adds	r7, #232	@ 0xe8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b92      	ldr	r3, [pc, #584]	@ (8004208 <UART_SetConfig+0x274>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	6979      	ldr	r1, [r7, #20]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a80      	ldr	r2, [pc, #512]	@ (800420c <UART_SetConfig+0x278>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d120      	bne.n	8004052 <UART_SetConfig+0xbe>
 8004010:	4b7f      	ldr	r3, [pc, #508]	@ (8004210 <UART_SetConfig+0x27c>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b03      	cmp	r3, #3
 800401a:	d817      	bhi.n	800404c <UART_SetConfig+0xb8>
 800401c:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <UART_SetConfig+0x90>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004035 	.word	0x08004035
 8004028:	08004041 	.word	0x08004041
 800402c:	08004047 	.word	0x08004047
 8004030:	0800403b 	.word	0x0800403b
 8004034:	2301      	movs	r3, #1
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e0b5      	b.n	80041a6 <UART_SetConfig+0x212>
 800403a:	2302      	movs	r3, #2
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e0b2      	b.n	80041a6 <UART_SetConfig+0x212>
 8004040:	2304      	movs	r3, #4
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e0af      	b.n	80041a6 <UART_SetConfig+0x212>
 8004046:	2308      	movs	r3, #8
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	e0ac      	b.n	80041a6 <UART_SetConfig+0x212>
 800404c:	2310      	movs	r3, #16
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	e0a9      	b.n	80041a6 <UART_SetConfig+0x212>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6f      	ldr	r2, [pc, #444]	@ (8004214 <UART_SetConfig+0x280>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d124      	bne.n	80040a6 <UART_SetConfig+0x112>
 800405c:	4b6c      	ldr	r3, [pc, #432]	@ (8004210 <UART_SetConfig+0x27c>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004064:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004068:	d011      	beq.n	800408e <UART_SetConfig+0xfa>
 800406a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800406e:	d817      	bhi.n	80040a0 <UART_SetConfig+0x10c>
 8004070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004074:	d011      	beq.n	800409a <UART_SetConfig+0x106>
 8004076:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800407a:	d811      	bhi.n	80040a0 <UART_SetConfig+0x10c>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <UART_SetConfig+0xf4>
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004084:	d006      	beq.n	8004094 <UART_SetConfig+0x100>
 8004086:	e00b      	b.n	80040a0 <UART_SetConfig+0x10c>
 8004088:	2300      	movs	r3, #0
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e08b      	b.n	80041a6 <UART_SetConfig+0x212>
 800408e:	2302      	movs	r3, #2
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e088      	b.n	80041a6 <UART_SetConfig+0x212>
 8004094:	2304      	movs	r3, #4
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e085      	b.n	80041a6 <UART_SetConfig+0x212>
 800409a:	2308      	movs	r3, #8
 800409c:	77fb      	strb	r3, [r7, #31]
 800409e:	e082      	b.n	80041a6 <UART_SetConfig+0x212>
 80040a0:	2310      	movs	r3, #16
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	e07f      	b.n	80041a6 <UART_SetConfig+0x212>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004218 <UART_SetConfig+0x284>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d124      	bne.n	80040fa <UART_SetConfig+0x166>
 80040b0:	4b57      	ldr	r3, [pc, #348]	@ (8004210 <UART_SetConfig+0x27c>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80040b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040bc:	d011      	beq.n	80040e2 <UART_SetConfig+0x14e>
 80040be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040c2:	d817      	bhi.n	80040f4 <UART_SetConfig+0x160>
 80040c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040c8:	d011      	beq.n	80040ee <UART_SetConfig+0x15a>
 80040ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040ce:	d811      	bhi.n	80040f4 <UART_SetConfig+0x160>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <UART_SetConfig+0x148>
 80040d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040d8:	d006      	beq.n	80040e8 <UART_SetConfig+0x154>
 80040da:	e00b      	b.n	80040f4 <UART_SetConfig+0x160>
 80040dc:	2300      	movs	r3, #0
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e061      	b.n	80041a6 <UART_SetConfig+0x212>
 80040e2:	2302      	movs	r3, #2
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e05e      	b.n	80041a6 <UART_SetConfig+0x212>
 80040e8:	2304      	movs	r3, #4
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e05b      	b.n	80041a6 <UART_SetConfig+0x212>
 80040ee:	2308      	movs	r3, #8
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e058      	b.n	80041a6 <UART_SetConfig+0x212>
 80040f4:	2310      	movs	r3, #16
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e055      	b.n	80041a6 <UART_SetConfig+0x212>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a47      	ldr	r2, [pc, #284]	@ (800421c <UART_SetConfig+0x288>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d124      	bne.n	800414e <UART_SetConfig+0x1ba>
 8004104:	4b42      	ldr	r3, [pc, #264]	@ (8004210 <UART_SetConfig+0x27c>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800410c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004110:	d011      	beq.n	8004136 <UART_SetConfig+0x1a2>
 8004112:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004116:	d817      	bhi.n	8004148 <UART_SetConfig+0x1b4>
 8004118:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800411c:	d011      	beq.n	8004142 <UART_SetConfig+0x1ae>
 800411e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004122:	d811      	bhi.n	8004148 <UART_SetConfig+0x1b4>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <UART_SetConfig+0x19c>
 8004128:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800412c:	d006      	beq.n	800413c <UART_SetConfig+0x1a8>
 800412e:	e00b      	b.n	8004148 <UART_SetConfig+0x1b4>
 8004130:	2300      	movs	r3, #0
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e037      	b.n	80041a6 <UART_SetConfig+0x212>
 8004136:	2302      	movs	r3, #2
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e034      	b.n	80041a6 <UART_SetConfig+0x212>
 800413c:	2304      	movs	r3, #4
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e031      	b.n	80041a6 <UART_SetConfig+0x212>
 8004142:	2308      	movs	r3, #8
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e02e      	b.n	80041a6 <UART_SetConfig+0x212>
 8004148:	2310      	movs	r3, #16
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e02b      	b.n	80041a6 <UART_SetConfig+0x212>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a33      	ldr	r2, [pc, #204]	@ (8004220 <UART_SetConfig+0x28c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d124      	bne.n	80041a2 <UART_SetConfig+0x20e>
 8004158:	4b2d      	ldr	r3, [pc, #180]	@ (8004210 <UART_SetConfig+0x27c>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004160:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004164:	d011      	beq.n	800418a <UART_SetConfig+0x1f6>
 8004166:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800416a:	d817      	bhi.n	800419c <UART_SetConfig+0x208>
 800416c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004170:	d011      	beq.n	8004196 <UART_SetConfig+0x202>
 8004172:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004176:	d811      	bhi.n	800419c <UART_SetConfig+0x208>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <UART_SetConfig+0x1f0>
 800417c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004180:	d006      	beq.n	8004190 <UART_SetConfig+0x1fc>
 8004182:	e00b      	b.n	800419c <UART_SetConfig+0x208>
 8004184:	2300      	movs	r3, #0
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e00d      	b.n	80041a6 <UART_SetConfig+0x212>
 800418a:	2302      	movs	r3, #2
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e00a      	b.n	80041a6 <UART_SetConfig+0x212>
 8004190:	2304      	movs	r3, #4
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e007      	b.n	80041a6 <UART_SetConfig+0x212>
 8004196:	2308      	movs	r3, #8
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e004      	b.n	80041a6 <UART_SetConfig+0x212>
 800419c:	2310      	movs	r3, #16
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e001      	b.n	80041a6 <UART_SetConfig+0x212>
 80041a2:	2310      	movs	r3, #16
 80041a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ae:	d16b      	bne.n	8004288 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80041b0:	7ffb      	ldrb	r3, [r7, #31]
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d838      	bhi.n	8004228 <UART_SetConfig+0x294>
 80041b6:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <UART_SetConfig+0x228>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	080041f1 	.word	0x080041f1
 80041c8:	08004229 	.word	0x08004229
 80041cc:	080041f7 	.word	0x080041f7
 80041d0:	08004229 	.word	0x08004229
 80041d4:	08004229 	.word	0x08004229
 80041d8:	08004229 	.word	0x08004229
 80041dc:	080041ff 	.word	0x080041ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e0:	f7fe f9ec 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 80041e4:	61b8      	str	r0, [r7, #24]
        break;
 80041e6:	e024      	b.n	8004232 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e8:	f7fe fa0a 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 80041ec:	61b8      	str	r0, [r7, #24]
        break;
 80041ee:	e020      	b.n	8004232 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <UART_SetConfig+0x290>)
 80041f2:	61bb      	str	r3, [r7, #24]
        break;
 80041f4:	e01d      	b.n	8004232 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f6:	f7fe f981 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80041fa:	61b8      	str	r0, [r7, #24]
        break;
 80041fc:	e019      	b.n	8004232 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004202:	61bb      	str	r3, [r7, #24]
        break;
 8004204:	e015      	b.n	8004232 <UART_SetConfig+0x29e>
 8004206:	bf00      	nop
 8004208:	efff69f3 	.word	0xefff69f3
 800420c:	40013800 	.word	0x40013800
 8004210:	40021000 	.word	0x40021000
 8004214:	40004400 	.word	0x40004400
 8004218:	40004800 	.word	0x40004800
 800421c:	40004c00 	.word	0x40004c00
 8004220:	40005000 	.word	0x40005000
 8004224:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	77bb      	strb	r3, [r7, #30]
        break;
 8004230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d073      	beq.n	8004320 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	005a      	lsls	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	441a      	add	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b0f      	cmp	r3, #15
 8004252:	d916      	bls.n	8004282 <UART_SetConfig+0x2ee>
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800425a:	d212      	bcs.n	8004282 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f023 030f 	bic.w	r3, r3, #15
 8004264:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	b29a      	uxth	r2, r3
 8004272:	89fb      	ldrh	r3, [r7, #14]
 8004274:	4313      	orrs	r3, r2
 8004276:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	89fa      	ldrh	r2, [r7, #14]
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	e04e      	b.n	8004320 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	77bb      	strb	r3, [r7, #30]
 8004286:	e04b      	b.n	8004320 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004288:	7ffb      	ldrb	r3, [r7, #31]
 800428a:	2b08      	cmp	r3, #8
 800428c:	d827      	bhi.n	80042de <UART_SetConfig+0x34a>
 800428e:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <UART_SetConfig+0x300>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042c1 	.word	0x080042c1
 800429c:	080042c9 	.word	0x080042c9
 80042a0:	080042df 	.word	0x080042df
 80042a4:	080042cf 	.word	0x080042cf
 80042a8:	080042df 	.word	0x080042df
 80042ac:	080042df 	.word	0x080042df
 80042b0:	080042df 	.word	0x080042df
 80042b4:	080042d7 	.word	0x080042d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7fe f980 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 80042bc:	61b8      	str	r0, [r7, #24]
        break;
 80042be:	e013      	b.n	80042e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7fe f99e 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 80042c4:	61b8      	str	r0, [r7, #24]
        break;
 80042c6:	e00f      	b.n	80042e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <UART_SetConfig+0x3a4>)
 80042ca:	61bb      	str	r3, [r7, #24]
        break;
 80042cc:	e00c      	b.n	80042e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ce:	f7fe f915 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80042d2:	61b8      	str	r0, [r7, #24]
        break;
 80042d4:	e008      	b.n	80042e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042da:	61bb      	str	r3, [r7, #24]
        break;
 80042dc:	e004      	b.n	80042e8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	77bb      	strb	r3, [r7, #30]
        break;
 80042e6:	bf00      	nop
    }

    if (pclk != 0U)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	085a      	lsrs	r2, r3, #1
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	441a      	add	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b0f      	cmp	r3, #15
 8004306:	d909      	bls.n	800431c <UART_SetConfig+0x388>
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430e:	d205      	bcs.n	800431c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	e001      	b.n	8004320 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800432c:	7fbb      	ldrb	r3, [r7, #30]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	007a1200 	.word	0x007a1200

0800433c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01a      	beq.n	8004452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800443a:	d10a      	bne.n	8004452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b098      	sub	sp, #96	@ 0x60
 8004484:	af02      	add	r7, sp, #8
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004490:	f7fc fb40 	bl	8000b14 <HAL_GetTick>
 8004494:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d12e      	bne.n	8004502 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ac:	2200      	movs	r2, #0
 80044ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f88c 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d021      	beq.n	8004502 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e062      	b.n	80045c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b04      	cmp	r3, #4
 800450e:	d149      	bne.n	80045a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	2200      	movs	r2, #0
 800451a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f856 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d03c      	beq.n	80045a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	623b      	str	r3, [r7, #32]
   return(result);
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800453e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004548:	633b      	str	r3, [r7, #48]	@ 0x30
 800454a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800454e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e6      	bne.n	800452a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60fb      	str	r3, [r7, #12]
   return(result);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800457c:	61fa      	str	r2, [r7, #28]
 800457e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	617b      	str	r3, [r7, #20]
   return(result);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e011      	b.n	80045c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3758      	adds	r7, #88	@ 0x58
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e0:	e04f      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d04b      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fc fa93 	bl	8000b14 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <UART_WaitOnFlagUntilTimeout+0x30>
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e04e      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d037      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b80      	cmp	r3, #128	@ 0x80
 8004616:	d034      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b40      	cmp	r3, #64	@ 0x40
 800461c:	d031      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b08      	cmp	r3, #8
 800462a:	d110      	bne.n	800464e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2208      	movs	r2, #8
 8004632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f838 	bl	80046aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2208      	movs	r2, #8
 800463e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e029      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800465c:	d111      	bne.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f81e 	bl	80046aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e00f      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4013      	ands	r3, r2
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	bf0c      	ite	eq
 8004692:	2301      	moveq	r3, #1
 8004694:	2300      	movne	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	429a      	cmp	r2, r3
 800469e:	d0a0      	beq.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b095      	sub	sp, #84	@ 0x54
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e6      	bne.n	80046b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3308      	adds	r3, #8
 80046ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3308      	adds	r3, #8
 8004702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004704:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800470a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471c:	2b01      	cmp	r3, #1
 800471e:	d118      	bne.n	8004752 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	60bb      	str	r3, [r7, #8]
   return(result);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f023 0310 	bic.w	r3, r3, #16
 8004734:	647b      	str	r3, [r7, #68]	@ 0x44
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6979      	ldr	r1, [r7, #20]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	613b      	str	r3, [r7, #16]
   return(result);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e6      	bne.n	8004720 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004766:	bf00      	nop
 8004768:	3754      	adds	r7, #84	@ 0x54
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff fbe9 	bl	8003f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b088      	sub	sp, #32
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	613b      	str	r3, [r7, #16]
   return(result);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e6      	bne.n	80047a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fbb5 	bl	8003f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <siprintf>:
 8004808:	b40e      	push	{r1, r2, r3}
 800480a:	b500      	push	{lr}
 800480c:	b09c      	sub	sp, #112	@ 0x70
 800480e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004810:	9002      	str	r0, [sp, #8]
 8004812:	9006      	str	r0, [sp, #24]
 8004814:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004818:	4809      	ldr	r0, [pc, #36]	@ (8004840 <siprintf+0x38>)
 800481a:	9107      	str	r1, [sp, #28]
 800481c:	9104      	str	r1, [sp, #16]
 800481e:	4909      	ldr	r1, [pc, #36]	@ (8004844 <siprintf+0x3c>)
 8004820:	f853 2b04 	ldr.w	r2, [r3], #4
 8004824:	9105      	str	r1, [sp, #20]
 8004826:	6800      	ldr	r0, [r0, #0]
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	a902      	add	r1, sp, #8
 800482c:	f000 f994 	bl	8004b58 <_svfiprintf_r>
 8004830:	9b02      	ldr	r3, [sp, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	b01c      	add	sp, #112	@ 0x70
 8004838:	f85d eb04 	ldr.w	lr, [sp], #4
 800483c:	b003      	add	sp, #12
 800483e:	4770      	bx	lr
 8004840:	2000000c 	.word	0x2000000c
 8004844:	ffff0208 	.word	0xffff0208

08004848 <memset>:
 8004848:	4402      	add	r2, r0
 800484a:	4603      	mov	r3, r0
 800484c:	4293      	cmp	r3, r2
 800484e:	d100      	bne.n	8004852 <memset+0xa>
 8004850:	4770      	bx	lr
 8004852:	f803 1b01 	strb.w	r1, [r3], #1
 8004856:	e7f9      	b.n	800484c <memset+0x4>

08004858 <__errno>:
 8004858:	4b01      	ldr	r3, [pc, #4]	@ (8004860 <__errno+0x8>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	2000000c 	.word	0x2000000c

08004864 <__libc_init_array>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4d0d      	ldr	r5, [pc, #52]	@ (800489c <__libc_init_array+0x38>)
 8004868:	4c0d      	ldr	r4, [pc, #52]	@ (80048a0 <__libc_init_array+0x3c>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	2600      	movs	r6, #0
 8004870:	42a6      	cmp	r6, r4
 8004872:	d109      	bne.n	8004888 <__libc_init_array+0x24>
 8004874:	4d0b      	ldr	r5, [pc, #44]	@ (80048a4 <__libc_init_array+0x40>)
 8004876:	4c0c      	ldr	r4, [pc, #48]	@ (80048a8 <__libc_init_array+0x44>)
 8004878:	f000 fc66 	bl	8005148 <_init>
 800487c:	1b64      	subs	r4, r4, r5
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	2600      	movs	r6, #0
 8004882:	42a6      	cmp	r6, r4
 8004884:	d105      	bne.n	8004892 <__libc_init_array+0x2e>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	f855 3b04 	ldr.w	r3, [r5], #4
 800488c:	4798      	blx	r3
 800488e:	3601      	adds	r6, #1
 8004890:	e7ee      	b.n	8004870 <__libc_init_array+0xc>
 8004892:	f855 3b04 	ldr.w	r3, [r5], #4
 8004896:	4798      	blx	r3
 8004898:	3601      	adds	r6, #1
 800489a:	e7f2      	b.n	8004882 <__libc_init_array+0x1e>
 800489c:	08005234 	.word	0x08005234
 80048a0:	08005234 	.word	0x08005234
 80048a4:	08005234 	.word	0x08005234
 80048a8:	08005238 	.word	0x08005238

080048ac <__retarget_lock_acquire_recursive>:
 80048ac:	4770      	bx	lr

080048ae <__retarget_lock_release_recursive>:
 80048ae:	4770      	bx	lr

080048b0 <_free_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4605      	mov	r5, r0
 80048b4:	2900      	cmp	r1, #0
 80048b6:	d041      	beq.n	800493c <_free_r+0x8c>
 80048b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048bc:	1f0c      	subs	r4, r1, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfb8      	it	lt
 80048c2:	18e4      	addlt	r4, r4, r3
 80048c4:	f000 f8e0 	bl	8004a88 <__malloc_lock>
 80048c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004940 <_free_r+0x90>)
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	b933      	cbnz	r3, 80048dc <_free_r+0x2c>
 80048ce:	6063      	str	r3, [r4, #4]
 80048d0:	6014      	str	r4, [r2, #0]
 80048d2:	4628      	mov	r0, r5
 80048d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048d8:	f000 b8dc 	b.w	8004a94 <__malloc_unlock>
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d908      	bls.n	80048f2 <_free_r+0x42>
 80048e0:	6820      	ldr	r0, [r4, #0]
 80048e2:	1821      	adds	r1, r4, r0
 80048e4:	428b      	cmp	r3, r1
 80048e6:	bf01      	itttt	eq
 80048e8:	6819      	ldreq	r1, [r3, #0]
 80048ea:	685b      	ldreq	r3, [r3, #4]
 80048ec:	1809      	addeq	r1, r1, r0
 80048ee:	6021      	streq	r1, [r4, #0]
 80048f0:	e7ed      	b.n	80048ce <_free_r+0x1e>
 80048f2:	461a      	mov	r2, r3
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	b10b      	cbz	r3, 80048fc <_free_r+0x4c>
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d9fa      	bls.n	80048f2 <_free_r+0x42>
 80048fc:	6811      	ldr	r1, [r2, #0]
 80048fe:	1850      	adds	r0, r2, r1
 8004900:	42a0      	cmp	r0, r4
 8004902:	d10b      	bne.n	800491c <_free_r+0x6c>
 8004904:	6820      	ldr	r0, [r4, #0]
 8004906:	4401      	add	r1, r0
 8004908:	1850      	adds	r0, r2, r1
 800490a:	4283      	cmp	r3, r0
 800490c:	6011      	str	r1, [r2, #0]
 800490e:	d1e0      	bne.n	80048d2 <_free_r+0x22>
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	6053      	str	r3, [r2, #4]
 8004916:	4408      	add	r0, r1
 8004918:	6010      	str	r0, [r2, #0]
 800491a:	e7da      	b.n	80048d2 <_free_r+0x22>
 800491c:	d902      	bls.n	8004924 <_free_r+0x74>
 800491e:	230c      	movs	r3, #12
 8004920:	602b      	str	r3, [r5, #0]
 8004922:	e7d6      	b.n	80048d2 <_free_r+0x22>
 8004924:	6820      	ldr	r0, [r4, #0]
 8004926:	1821      	adds	r1, r4, r0
 8004928:	428b      	cmp	r3, r1
 800492a:	bf04      	itt	eq
 800492c:	6819      	ldreq	r1, [r3, #0]
 800492e:	685b      	ldreq	r3, [r3, #4]
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	bf04      	itt	eq
 8004934:	1809      	addeq	r1, r1, r0
 8004936:	6021      	streq	r1, [r4, #0]
 8004938:	6054      	str	r4, [r2, #4]
 800493a:	e7ca      	b.n	80048d2 <_free_r+0x22>
 800493c:	bd38      	pop	{r3, r4, r5, pc}
 800493e:	bf00      	nop
 8004940:	20000368 	.word	0x20000368

08004944 <sbrk_aligned>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4e0f      	ldr	r6, [pc, #60]	@ (8004984 <sbrk_aligned+0x40>)
 8004948:	460c      	mov	r4, r1
 800494a:	6831      	ldr	r1, [r6, #0]
 800494c:	4605      	mov	r5, r0
 800494e:	b911      	cbnz	r1, 8004956 <sbrk_aligned+0x12>
 8004950:	f000 fba6 	bl	80050a0 <_sbrk_r>
 8004954:	6030      	str	r0, [r6, #0]
 8004956:	4621      	mov	r1, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 fba1 	bl	80050a0 <_sbrk_r>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	d103      	bne.n	800496a <sbrk_aligned+0x26>
 8004962:	f04f 34ff 	mov.w	r4, #4294967295
 8004966:	4620      	mov	r0, r4
 8004968:	bd70      	pop	{r4, r5, r6, pc}
 800496a:	1cc4      	adds	r4, r0, #3
 800496c:	f024 0403 	bic.w	r4, r4, #3
 8004970:	42a0      	cmp	r0, r4
 8004972:	d0f8      	beq.n	8004966 <sbrk_aligned+0x22>
 8004974:	1a21      	subs	r1, r4, r0
 8004976:	4628      	mov	r0, r5
 8004978:	f000 fb92 	bl	80050a0 <_sbrk_r>
 800497c:	3001      	adds	r0, #1
 800497e:	d1f2      	bne.n	8004966 <sbrk_aligned+0x22>
 8004980:	e7ef      	b.n	8004962 <sbrk_aligned+0x1e>
 8004982:	bf00      	nop
 8004984:	20000364 	.word	0x20000364

08004988 <_malloc_r>:
 8004988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800498c:	1ccd      	adds	r5, r1, #3
 800498e:	f025 0503 	bic.w	r5, r5, #3
 8004992:	3508      	adds	r5, #8
 8004994:	2d0c      	cmp	r5, #12
 8004996:	bf38      	it	cc
 8004998:	250c      	movcc	r5, #12
 800499a:	2d00      	cmp	r5, #0
 800499c:	4606      	mov	r6, r0
 800499e:	db01      	blt.n	80049a4 <_malloc_r+0x1c>
 80049a0:	42a9      	cmp	r1, r5
 80049a2:	d904      	bls.n	80049ae <_malloc_r+0x26>
 80049a4:	230c      	movs	r3, #12
 80049a6:	6033      	str	r3, [r6, #0]
 80049a8:	2000      	movs	r0, #0
 80049aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a84 <_malloc_r+0xfc>
 80049b2:	f000 f869 	bl	8004a88 <__malloc_lock>
 80049b6:	f8d8 3000 	ldr.w	r3, [r8]
 80049ba:	461c      	mov	r4, r3
 80049bc:	bb44      	cbnz	r4, 8004a10 <_malloc_r+0x88>
 80049be:	4629      	mov	r1, r5
 80049c0:	4630      	mov	r0, r6
 80049c2:	f7ff ffbf 	bl	8004944 <sbrk_aligned>
 80049c6:	1c43      	adds	r3, r0, #1
 80049c8:	4604      	mov	r4, r0
 80049ca:	d158      	bne.n	8004a7e <_malloc_r+0xf6>
 80049cc:	f8d8 4000 	ldr.w	r4, [r8]
 80049d0:	4627      	mov	r7, r4
 80049d2:	2f00      	cmp	r7, #0
 80049d4:	d143      	bne.n	8004a5e <_malloc_r+0xd6>
 80049d6:	2c00      	cmp	r4, #0
 80049d8:	d04b      	beq.n	8004a72 <_malloc_r+0xea>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	4639      	mov	r1, r7
 80049de:	4630      	mov	r0, r6
 80049e0:	eb04 0903 	add.w	r9, r4, r3
 80049e4:	f000 fb5c 	bl	80050a0 <_sbrk_r>
 80049e8:	4581      	cmp	r9, r0
 80049ea:	d142      	bne.n	8004a72 <_malloc_r+0xea>
 80049ec:	6821      	ldr	r1, [r4, #0]
 80049ee:	1a6d      	subs	r5, r5, r1
 80049f0:	4629      	mov	r1, r5
 80049f2:	4630      	mov	r0, r6
 80049f4:	f7ff ffa6 	bl	8004944 <sbrk_aligned>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d03a      	beq.n	8004a72 <_malloc_r+0xea>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	442b      	add	r3, r5
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	f8d8 3000 	ldr.w	r3, [r8]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	bb62      	cbnz	r2, 8004a64 <_malloc_r+0xdc>
 8004a0a:	f8c8 7000 	str.w	r7, [r8]
 8004a0e:	e00f      	b.n	8004a30 <_malloc_r+0xa8>
 8004a10:	6822      	ldr	r2, [r4, #0]
 8004a12:	1b52      	subs	r2, r2, r5
 8004a14:	d420      	bmi.n	8004a58 <_malloc_r+0xd0>
 8004a16:	2a0b      	cmp	r2, #11
 8004a18:	d917      	bls.n	8004a4a <_malloc_r+0xc2>
 8004a1a:	1961      	adds	r1, r4, r5
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	6025      	str	r5, [r4, #0]
 8004a20:	bf18      	it	ne
 8004a22:	6059      	strne	r1, [r3, #4]
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	bf08      	it	eq
 8004a28:	f8c8 1000 	streq.w	r1, [r8]
 8004a2c:	5162      	str	r2, [r4, r5]
 8004a2e:	604b      	str	r3, [r1, #4]
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 f82f 	bl	8004a94 <__malloc_unlock>
 8004a36:	f104 000b 	add.w	r0, r4, #11
 8004a3a:	1d23      	adds	r3, r4, #4
 8004a3c:	f020 0007 	bic.w	r0, r0, #7
 8004a40:	1ac2      	subs	r2, r0, r3
 8004a42:	bf1c      	itt	ne
 8004a44:	1a1b      	subne	r3, r3, r0
 8004a46:	50a3      	strne	r3, [r4, r2]
 8004a48:	e7af      	b.n	80049aa <_malloc_r+0x22>
 8004a4a:	6862      	ldr	r2, [r4, #4]
 8004a4c:	42a3      	cmp	r3, r4
 8004a4e:	bf0c      	ite	eq
 8004a50:	f8c8 2000 	streq.w	r2, [r8]
 8004a54:	605a      	strne	r2, [r3, #4]
 8004a56:	e7eb      	b.n	8004a30 <_malloc_r+0xa8>
 8004a58:	4623      	mov	r3, r4
 8004a5a:	6864      	ldr	r4, [r4, #4]
 8004a5c:	e7ae      	b.n	80049bc <_malloc_r+0x34>
 8004a5e:	463c      	mov	r4, r7
 8004a60:	687f      	ldr	r7, [r7, #4]
 8004a62:	e7b6      	b.n	80049d2 <_malloc_r+0x4a>
 8004a64:	461a      	mov	r2, r3
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	d1fb      	bne.n	8004a64 <_malloc_r+0xdc>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6053      	str	r3, [r2, #4]
 8004a70:	e7de      	b.n	8004a30 <_malloc_r+0xa8>
 8004a72:	230c      	movs	r3, #12
 8004a74:	6033      	str	r3, [r6, #0]
 8004a76:	4630      	mov	r0, r6
 8004a78:	f000 f80c 	bl	8004a94 <__malloc_unlock>
 8004a7c:	e794      	b.n	80049a8 <_malloc_r+0x20>
 8004a7e:	6005      	str	r5, [r0, #0]
 8004a80:	e7d6      	b.n	8004a30 <_malloc_r+0xa8>
 8004a82:	bf00      	nop
 8004a84:	20000368 	.word	0x20000368

08004a88 <__malloc_lock>:
 8004a88:	4801      	ldr	r0, [pc, #4]	@ (8004a90 <__malloc_lock+0x8>)
 8004a8a:	f7ff bf0f 	b.w	80048ac <__retarget_lock_acquire_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20000360 	.word	0x20000360

08004a94 <__malloc_unlock>:
 8004a94:	4801      	ldr	r0, [pc, #4]	@ (8004a9c <__malloc_unlock+0x8>)
 8004a96:	f7ff bf0a 	b.w	80048ae <__retarget_lock_release_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	20000360 	.word	0x20000360

08004aa0 <__ssputs_r>:
 8004aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	688e      	ldr	r6, [r1, #8]
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	42be      	cmp	r6, r7
 8004aaa:	680b      	ldr	r3, [r1, #0]
 8004aac:	4682      	mov	sl, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	4690      	mov	r8, r2
 8004ab2:	d82d      	bhi.n	8004b10 <__ssputs_r+0x70>
 8004ab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ab8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004abc:	d026      	beq.n	8004b0c <__ssputs_r+0x6c>
 8004abe:	6965      	ldr	r5, [r4, #20]
 8004ac0:	6909      	ldr	r1, [r1, #16]
 8004ac2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ac6:	eba3 0901 	sub.w	r9, r3, r1
 8004aca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ace:	1c7b      	adds	r3, r7, #1
 8004ad0:	444b      	add	r3, r9
 8004ad2:	106d      	asrs	r5, r5, #1
 8004ad4:	429d      	cmp	r5, r3
 8004ad6:	bf38      	it	cc
 8004ad8:	461d      	movcc	r5, r3
 8004ada:	0553      	lsls	r3, r2, #21
 8004adc:	d527      	bpl.n	8004b2e <__ssputs_r+0x8e>
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f7ff ff52 	bl	8004988 <_malloc_r>
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	b360      	cbz	r0, 8004b42 <__ssputs_r+0xa2>
 8004ae8:	6921      	ldr	r1, [r4, #16]
 8004aea:	464a      	mov	r2, r9
 8004aec:	f000 fae8 	bl	80050c0 <memcpy>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	6126      	str	r6, [r4, #16]
 8004afe:	6165      	str	r5, [r4, #20]
 8004b00:	444e      	add	r6, r9
 8004b02:	eba5 0509 	sub.w	r5, r5, r9
 8004b06:	6026      	str	r6, [r4, #0]
 8004b08:	60a5      	str	r5, [r4, #8]
 8004b0a:	463e      	mov	r6, r7
 8004b0c:	42be      	cmp	r6, r7
 8004b0e:	d900      	bls.n	8004b12 <__ssputs_r+0x72>
 8004b10:	463e      	mov	r6, r7
 8004b12:	6820      	ldr	r0, [r4, #0]
 8004b14:	4632      	mov	r2, r6
 8004b16:	4641      	mov	r1, r8
 8004b18:	f000 faa8 	bl	800506c <memmove>
 8004b1c:	68a3      	ldr	r3, [r4, #8]
 8004b1e:	1b9b      	subs	r3, r3, r6
 8004b20:	60a3      	str	r3, [r4, #8]
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	4433      	add	r3, r6
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2e:	462a      	mov	r2, r5
 8004b30:	f000 fad4 	bl	80050dc <_realloc_r>
 8004b34:	4606      	mov	r6, r0
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d1e0      	bne.n	8004afc <__ssputs_r+0x5c>
 8004b3a:	6921      	ldr	r1, [r4, #16]
 8004b3c:	4650      	mov	r0, sl
 8004b3e:	f7ff feb7 	bl	80048b0 <_free_r>
 8004b42:	230c      	movs	r3, #12
 8004b44:	f8ca 3000 	str.w	r3, [sl]
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b4e:	81a3      	strh	r3, [r4, #12]
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	e7e9      	b.n	8004b2a <__ssputs_r+0x8a>
	...

08004b58 <_svfiprintf_r>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	4698      	mov	r8, r3
 8004b5e:	898b      	ldrh	r3, [r1, #12]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	b09d      	sub	sp, #116	@ 0x74
 8004b64:	4607      	mov	r7, r0
 8004b66:	460d      	mov	r5, r1
 8004b68:	4614      	mov	r4, r2
 8004b6a:	d510      	bpl.n	8004b8e <_svfiprintf_r+0x36>
 8004b6c:	690b      	ldr	r3, [r1, #16]
 8004b6e:	b973      	cbnz	r3, 8004b8e <_svfiprintf_r+0x36>
 8004b70:	2140      	movs	r1, #64	@ 0x40
 8004b72:	f7ff ff09 	bl	8004988 <_malloc_r>
 8004b76:	6028      	str	r0, [r5, #0]
 8004b78:	6128      	str	r0, [r5, #16]
 8004b7a:	b930      	cbnz	r0, 8004b8a <_svfiprintf_r+0x32>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	b01d      	add	sp, #116	@ 0x74
 8004b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8a:	2340      	movs	r3, #64	@ 0x40
 8004b8c:	616b      	str	r3, [r5, #20]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b92:	2320      	movs	r3, #32
 8004b94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b9c:	2330      	movs	r3, #48	@ 0x30
 8004b9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d3c <_svfiprintf_r+0x1e4>
 8004ba2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ba6:	f04f 0901 	mov.w	r9, #1
 8004baa:	4623      	mov	r3, r4
 8004bac:	469a      	mov	sl, r3
 8004bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bb2:	b10a      	cbz	r2, 8004bb8 <_svfiprintf_r+0x60>
 8004bb4:	2a25      	cmp	r2, #37	@ 0x25
 8004bb6:	d1f9      	bne.n	8004bac <_svfiprintf_r+0x54>
 8004bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bbc:	d00b      	beq.n	8004bd6 <_svfiprintf_r+0x7e>
 8004bbe:	465b      	mov	r3, fp
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	f7ff ff6b 	bl	8004aa0 <__ssputs_r>
 8004bca:	3001      	adds	r0, #1
 8004bcc:	f000 80a7 	beq.w	8004d1e <_svfiprintf_r+0x1c6>
 8004bd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bd2:	445a      	add	r2, fp
 8004bd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 809f 	beq.w	8004d1e <_svfiprintf_r+0x1c6>
 8004be0:	2300      	movs	r3, #0
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bea:	f10a 0a01 	add.w	sl, sl, #1
 8004bee:	9304      	str	r3, [sp, #16]
 8004bf0:	9307      	str	r3, [sp, #28]
 8004bf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bf8:	4654      	mov	r4, sl
 8004bfa:	2205      	movs	r2, #5
 8004bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c00:	484e      	ldr	r0, [pc, #312]	@ (8004d3c <_svfiprintf_r+0x1e4>)
 8004c02:	f7fb faed 	bl	80001e0 <memchr>
 8004c06:	9a04      	ldr	r2, [sp, #16]
 8004c08:	b9d8      	cbnz	r0, 8004c42 <_svfiprintf_r+0xea>
 8004c0a:	06d0      	lsls	r0, r2, #27
 8004c0c:	bf44      	itt	mi
 8004c0e:	2320      	movmi	r3, #32
 8004c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c14:	0711      	lsls	r1, r2, #28
 8004c16:	bf44      	itt	mi
 8004c18:	232b      	movmi	r3, #43	@ 0x2b
 8004c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c24:	d015      	beq.n	8004c52 <_svfiprintf_r+0xfa>
 8004c26:	9a07      	ldr	r2, [sp, #28]
 8004c28:	4654      	mov	r4, sl
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f04f 0c0a 	mov.w	ip, #10
 8004c30:	4621      	mov	r1, r4
 8004c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c36:	3b30      	subs	r3, #48	@ 0x30
 8004c38:	2b09      	cmp	r3, #9
 8004c3a:	d94b      	bls.n	8004cd4 <_svfiprintf_r+0x17c>
 8004c3c:	b1b0      	cbz	r0, 8004c6c <_svfiprintf_r+0x114>
 8004c3e:	9207      	str	r2, [sp, #28]
 8004c40:	e014      	b.n	8004c6c <_svfiprintf_r+0x114>
 8004c42:	eba0 0308 	sub.w	r3, r0, r8
 8004c46:	fa09 f303 	lsl.w	r3, r9, r3
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	9304      	str	r3, [sp, #16]
 8004c4e:	46a2      	mov	sl, r4
 8004c50:	e7d2      	b.n	8004bf8 <_svfiprintf_r+0xa0>
 8004c52:	9b03      	ldr	r3, [sp, #12]
 8004c54:	1d19      	adds	r1, r3, #4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	9103      	str	r1, [sp, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bfbb      	ittet	lt
 8004c5e:	425b      	neglt	r3, r3
 8004c60:	f042 0202 	orrlt.w	r2, r2, #2
 8004c64:	9307      	strge	r3, [sp, #28]
 8004c66:	9307      	strlt	r3, [sp, #28]
 8004c68:	bfb8      	it	lt
 8004c6a:	9204      	strlt	r2, [sp, #16]
 8004c6c:	7823      	ldrb	r3, [r4, #0]
 8004c6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c70:	d10a      	bne.n	8004c88 <_svfiprintf_r+0x130>
 8004c72:	7863      	ldrb	r3, [r4, #1]
 8004c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c76:	d132      	bne.n	8004cde <_svfiprintf_r+0x186>
 8004c78:	9b03      	ldr	r3, [sp, #12]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	9203      	str	r2, [sp, #12]
 8004c80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c84:	3402      	adds	r4, #2
 8004c86:	9305      	str	r3, [sp, #20]
 8004c88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d4c <_svfiprintf_r+0x1f4>
 8004c8c:	7821      	ldrb	r1, [r4, #0]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	4650      	mov	r0, sl
 8004c92:	f7fb faa5 	bl	80001e0 <memchr>
 8004c96:	b138      	cbz	r0, 8004ca8 <_svfiprintf_r+0x150>
 8004c98:	9b04      	ldr	r3, [sp, #16]
 8004c9a:	eba0 000a 	sub.w	r0, r0, sl
 8004c9e:	2240      	movs	r2, #64	@ 0x40
 8004ca0:	4082      	lsls	r2, r0
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	3401      	adds	r4, #1
 8004ca6:	9304      	str	r3, [sp, #16]
 8004ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cac:	4824      	ldr	r0, [pc, #144]	@ (8004d40 <_svfiprintf_r+0x1e8>)
 8004cae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cb2:	2206      	movs	r2, #6
 8004cb4:	f7fb fa94 	bl	80001e0 <memchr>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d036      	beq.n	8004d2a <_svfiprintf_r+0x1d2>
 8004cbc:	4b21      	ldr	r3, [pc, #132]	@ (8004d44 <_svfiprintf_r+0x1ec>)
 8004cbe:	bb1b      	cbnz	r3, 8004d08 <_svfiprintf_r+0x1b0>
 8004cc0:	9b03      	ldr	r3, [sp, #12]
 8004cc2:	3307      	adds	r3, #7
 8004cc4:	f023 0307 	bic.w	r3, r3, #7
 8004cc8:	3308      	adds	r3, #8
 8004cca:	9303      	str	r3, [sp, #12]
 8004ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cce:	4433      	add	r3, r6
 8004cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cd2:	e76a      	b.n	8004baa <_svfiprintf_r+0x52>
 8004cd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd8:	460c      	mov	r4, r1
 8004cda:	2001      	movs	r0, #1
 8004cdc:	e7a8      	b.n	8004c30 <_svfiprintf_r+0xd8>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	3401      	adds	r4, #1
 8004ce2:	9305      	str	r3, [sp, #20]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f04f 0c0a 	mov.w	ip, #10
 8004cea:	4620      	mov	r0, r4
 8004cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf0:	3a30      	subs	r2, #48	@ 0x30
 8004cf2:	2a09      	cmp	r2, #9
 8004cf4:	d903      	bls.n	8004cfe <_svfiprintf_r+0x1a6>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0c6      	beq.n	8004c88 <_svfiprintf_r+0x130>
 8004cfa:	9105      	str	r1, [sp, #20]
 8004cfc:	e7c4      	b.n	8004c88 <_svfiprintf_r+0x130>
 8004cfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d02:	4604      	mov	r4, r0
 8004d04:	2301      	movs	r3, #1
 8004d06:	e7f0      	b.n	8004cea <_svfiprintf_r+0x192>
 8004d08:	ab03      	add	r3, sp, #12
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d48 <_svfiprintf_r+0x1f0>)
 8004d10:	a904      	add	r1, sp, #16
 8004d12:	4638      	mov	r0, r7
 8004d14:	f3af 8000 	nop.w
 8004d18:	1c42      	adds	r2, r0, #1
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	d1d6      	bne.n	8004ccc <_svfiprintf_r+0x174>
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	065b      	lsls	r3, r3, #25
 8004d22:	f53f af2d 	bmi.w	8004b80 <_svfiprintf_r+0x28>
 8004d26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d28:	e72c      	b.n	8004b84 <_svfiprintf_r+0x2c>
 8004d2a:	ab03      	add	r3, sp, #12
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	462a      	mov	r2, r5
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <_svfiprintf_r+0x1f0>)
 8004d32:	a904      	add	r1, sp, #16
 8004d34:	4638      	mov	r0, r7
 8004d36:	f000 f879 	bl	8004e2c <_printf_i>
 8004d3a:	e7ed      	b.n	8004d18 <_svfiprintf_r+0x1c0>
 8004d3c:	080051f8 	.word	0x080051f8
 8004d40:	08005202 	.word	0x08005202
 8004d44:	00000000 	.word	0x00000000
 8004d48:	08004aa1 	.word	0x08004aa1
 8004d4c:	080051fe 	.word	0x080051fe

08004d50 <_printf_common>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	4616      	mov	r6, r2
 8004d56:	4698      	mov	r8, r3
 8004d58:	688a      	ldr	r2, [r1, #8]
 8004d5a:	690b      	ldr	r3, [r1, #16]
 8004d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d60:	4293      	cmp	r3, r2
 8004d62:	bfb8      	it	lt
 8004d64:	4613      	movlt	r3, r2
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d6c:	4607      	mov	r7, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	b10a      	cbz	r2, 8004d76 <_printf_common+0x26>
 8004d72:	3301      	adds	r3, #1
 8004d74:	6033      	str	r3, [r6, #0]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	0699      	lsls	r1, r3, #26
 8004d7a:	bf42      	ittt	mi
 8004d7c:	6833      	ldrmi	r3, [r6, #0]
 8004d7e:	3302      	addmi	r3, #2
 8004d80:	6033      	strmi	r3, [r6, #0]
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	f015 0506 	ands.w	r5, r5, #6
 8004d88:	d106      	bne.n	8004d98 <_printf_common+0x48>
 8004d8a:	f104 0a19 	add.w	sl, r4, #25
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	6832      	ldr	r2, [r6, #0]
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dc26      	bgt.n	8004de6 <_printf_common+0x96>
 8004d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	3b00      	subs	r3, #0
 8004da0:	bf18      	it	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	0692      	lsls	r2, r2, #26
 8004da6:	d42b      	bmi.n	8004e00 <_printf_common+0xb0>
 8004da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dac:	4641      	mov	r1, r8
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c8      	blx	r9
 8004db2:	3001      	adds	r0, #1
 8004db4:	d01e      	beq.n	8004df4 <_printf_common+0xa4>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	f003 0306 	and.w	r3, r3, #6
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf02      	ittt	eq
 8004dc2:	68e5      	ldreq	r5, [r4, #12]
 8004dc4:	6833      	ldreq	r3, [r6, #0]
 8004dc6:	1aed      	subeq	r5, r5, r3
 8004dc8:	68a3      	ldr	r3, [r4, #8]
 8004dca:	bf0c      	ite	eq
 8004dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd0:	2500      	movne	r5, #0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bfc4      	itt	gt
 8004dd6:	1a9b      	subgt	r3, r3, r2
 8004dd8:	18ed      	addgt	r5, r5, r3
 8004dda:	2600      	movs	r6, #0
 8004ddc:	341a      	adds	r4, #26
 8004dde:	42b5      	cmp	r5, r6
 8004de0:	d11a      	bne.n	8004e18 <_printf_common+0xc8>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e008      	b.n	8004df8 <_printf_common+0xa8>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4652      	mov	r2, sl
 8004dea:	4641      	mov	r1, r8
 8004dec:	4638      	mov	r0, r7
 8004dee:	47c8      	blx	r9
 8004df0:	3001      	adds	r0, #1
 8004df2:	d103      	bne.n	8004dfc <_printf_common+0xac>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	e7c6      	b.n	8004d8e <_printf_common+0x3e>
 8004e00:	18e1      	adds	r1, r4, r3
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	2030      	movs	r0, #48	@ 0x30
 8004e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e0a:	4422      	add	r2, r4
 8004e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e14:	3302      	adds	r3, #2
 8004e16:	e7c7      	b.n	8004da8 <_printf_common+0x58>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	4638      	mov	r0, r7
 8004e20:	47c8      	blx	r9
 8004e22:	3001      	adds	r0, #1
 8004e24:	d0e6      	beq.n	8004df4 <_printf_common+0xa4>
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7d9      	b.n	8004dde <_printf_common+0x8e>
	...

08004e2c <_printf_i>:
 8004e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	7e0f      	ldrb	r7, [r1, #24]
 8004e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e34:	2f78      	cmp	r7, #120	@ 0x78
 8004e36:	4691      	mov	r9, r2
 8004e38:	4680      	mov	r8, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e42:	d807      	bhi.n	8004e54 <_printf_i+0x28>
 8004e44:	2f62      	cmp	r7, #98	@ 0x62
 8004e46:	d80a      	bhi.n	8004e5e <_printf_i+0x32>
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	f000 80d2 	beq.w	8004ff2 <_printf_i+0x1c6>
 8004e4e:	2f58      	cmp	r7, #88	@ 0x58
 8004e50:	f000 80b9 	beq.w	8004fc6 <_printf_i+0x19a>
 8004e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e5c:	e03a      	b.n	8004ed4 <_printf_i+0xa8>
 8004e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e62:	2b15      	cmp	r3, #21
 8004e64:	d8f6      	bhi.n	8004e54 <_printf_i+0x28>
 8004e66:	a101      	add	r1, pc, #4	@ (adr r1, 8004e6c <_printf_i+0x40>)
 8004e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004ed9 	.word	0x08004ed9
 8004e74:	08004e55 	.word	0x08004e55
 8004e78:	08004e55 	.word	0x08004e55
 8004e7c:	08004e55 	.word	0x08004e55
 8004e80:	08004e55 	.word	0x08004e55
 8004e84:	08004ed9 	.word	0x08004ed9
 8004e88:	08004e55 	.word	0x08004e55
 8004e8c:	08004e55 	.word	0x08004e55
 8004e90:	08004e55 	.word	0x08004e55
 8004e94:	08004e55 	.word	0x08004e55
 8004e98:	08004fd9 	.word	0x08004fd9
 8004e9c:	08004f03 	.word	0x08004f03
 8004ea0:	08004f93 	.word	0x08004f93
 8004ea4:	08004e55 	.word	0x08004e55
 8004ea8:	08004e55 	.word	0x08004e55
 8004eac:	08004ffb 	.word	0x08004ffb
 8004eb0:	08004e55 	.word	0x08004e55
 8004eb4:	08004f03 	.word	0x08004f03
 8004eb8:	08004e55 	.word	0x08004e55
 8004ebc:	08004e55 	.word	0x08004e55
 8004ec0:	08004f9b 	.word	0x08004f9b
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6032      	str	r2, [r6, #0]
 8004ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e09d      	b.n	8005014 <_printf_i+0x1e8>
 8004ed8:	6833      	ldr	r3, [r6, #0]
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	1d19      	adds	r1, r3, #4
 8004ede:	6031      	str	r1, [r6, #0]
 8004ee0:	0606      	lsls	r6, r0, #24
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0xbc>
 8004ee4:	681d      	ldr	r5, [r3, #0]
 8004ee6:	e003      	b.n	8004ef0 <_printf_i+0xc4>
 8004ee8:	0645      	lsls	r5, r0, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0xb8>
 8004eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	da03      	bge.n	8004efc <_printf_i+0xd0>
 8004ef4:	232d      	movs	r3, #45	@ 0x2d
 8004ef6:	426d      	negs	r5, r5
 8004ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efc:	4859      	ldr	r0, [pc, #356]	@ (8005064 <_printf_i+0x238>)
 8004efe:	230a      	movs	r3, #10
 8004f00:	e011      	b.n	8004f26 <_printf_i+0xfa>
 8004f02:	6821      	ldr	r1, [r4, #0]
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	0608      	lsls	r0, r1, #24
 8004f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f0c:	d402      	bmi.n	8004f14 <_printf_i+0xe8>
 8004f0e:	0649      	lsls	r1, r1, #25
 8004f10:	bf48      	it	mi
 8004f12:	b2ad      	uxthmi	r5, r5
 8004f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f16:	4853      	ldr	r0, [pc, #332]	@ (8005064 <_printf_i+0x238>)
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	bf14      	ite	ne
 8004f1c:	230a      	movne	r3, #10
 8004f1e:	2308      	moveq	r3, #8
 8004f20:	2100      	movs	r1, #0
 8004f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f26:	6866      	ldr	r6, [r4, #4]
 8004f28:	60a6      	str	r6, [r4, #8]
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	bfa2      	ittt	ge
 8004f2e:	6821      	ldrge	r1, [r4, #0]
 8004f30:	f021 0104 	bicge.w	r1, r1, #4
 8004f34:	6021      	strge	r1, [r4, #0]
 8004f36:	b90d      	cbnz	r5, 8004f3c <_printf_i+0x110>
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	d04b      	beq.n	8004fd4 <_printf_i+0x1a8>
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f42:	fb03 5711 	mls	r7, r3, r1, r5
 8004f46:	5dc7      	ldrb	r7, [r0, r7]
 8004f48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f4c:	462f      	mov	r7, r5
 8004f4e:	42bb      	cmp	r3, r7
 8004f50:	460d      	mov	r5, r1
 8004f52:	d9f4      	bls.n	8004f3e <_printf_i+0x112>
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d10b      	bne.n	8004f70 <_printf_i+0x144>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	07df      	lsls	r7, r3, #31
 8004f5c:	d508      	bpl.n	8004f70 <_printf_i+0x144>
 8004f5e:	6923      	ldr	r3, [r4, #16]
 8004f60:	6861      	ldr	r1, [r4, #4]
 8004f62:	4299      	cmp	r1, r3
 8004f64:	bfde      	ittt	le
 8004f66:	2330      	movle	r3, #48	@ 0x30
 8004f68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f70:	1b92      	subs	r2, r2, r6
 8004f72:	6122      	str	r2, [r4, #16]
 8004f74:	f8cd a000 	str.w	sl, [sp]
 8004f78:	464b      	mov	r3, r9
 8004f7a:	aa03      	add	r2, sp, #12
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4640      	mov	r0, r8
 8004f80:	f7ff fee6 	bl	8004d50 <_printf_common>
 8004f84:	3001      	adds	r0, #1
 8004f86:	d14a      	bne.n	800501e <_printf_i+0x1f2>
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	b004      	add	sp, #16
 8004f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f043 0320 	orr.w	r3, r3, #32
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	4833      	ldr	r0, [pc, #204]	@ (8005068 <_printf_i+0x23c>)
 8004f9c:	2778      	movs	r7, #120	@ 0x78
 8004f9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	6831      	ldr	r1, [r6, #0]
 8004fa6:	061f      	lsls	r7, r3, #24
 8004fa8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fac:	d402      	bmi.n	8004fb4 <_printf_i+0x188>
 8004fae:	065f      	lsls	r7, r3, #25
 8004fb0:	bf48      	it	mi
 8004fb2:	b2ad      	uxthmi	r5, r5
 8004fb4:	6031      	str	r1, [r6, #0]
 8004fb6:	07d9      	lsls	r1, r3, #31
 8004fb8:	bf44      	itt	mi
 8004fba:	f043 0320 	orrmi.w	r3, r3, #32
 8004fbe:	6023      	strmi	r3, [r4, #0]
 8004fc0:	b11d      	cbz	r5, 8004fca <_printf_i+0x19e>
 8004fc2:	2310      	movs	r3, #16
 8004fc4:	e7ac      	b.n	8004f20 <_printf_i+0xf4>
 8004fc6:	4827      	ldr	r0, [pc, #156]	@ (8005064 <_printf_i+0x238>)
 8004fc8:	e7e9      	b.n	8004f9e <_printf_i+0x172>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	f023 0320 	bic.w	r3, r3, #32
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	e7f6      	b.n	8004fc2 <_printf_i+0x196>
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	e7bd      	b.n	8004f54 <_printf_i+0x128>
 8004fd8:	6833      	ldr	r3, [r6, #0]
 8004fda:	6825      	ldr	r5, [r4, #0]
 8004fdc:	6961      	ldr	r1, [r4, #20]
 8004fde:	1d18      	adds	r0, r3, #4
 8004fe0:	6030      	str	r0, [r6, #0]
 8004fe2:	062e      	lsls	r6, r5, #24
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	d501      	bpl.n	8004fec <_printf_i+0x1c0>
 8004fe8:	6019      	str	r1, [r3, #0]
 8004fea:	e002      	b.n	8004ff2 <_printf_i+0x1c6>
 8004fec:	0668      	lsls	r0, r5, #25
 8004fee:	d5fb      	bpl.n	8004fe8 <_printf_i+0x1bc>
 8004ff0:	8019      	strh	r1, [r3, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	4616      	mov	r6, r2
 8004ff8:	e7bc      	b.n	8004f74 <_printf_i+0x148>
 8004ffa:	6833      	ldr	r3, [r6, #0]
 8004ffc:	1d1a      	adds	r2, r3, #4
 8004ffe:	6032      	str	r2, [r6, #0]
 8005000:	681e      	ldr	r6, [r3, #0]
 8005002:	6862      	ldr	r2, [r4, #4]
 8005004:	2100      	movs	r1, #0
 8005006:	4630      	mov	r0, r6
 8005008:	f7fb f8ea 	bl	80001e0 <memchr>
 800500c:	b108      	cbz	r0, 8005012 <_printf_i+0x1e6>
 800500e:	1b80      	subs	r0, r0, r6
 8005010:	6060      	str	r0, [r4, #4]
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	2300      	movs	r3, #0
 8005018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800501c:	e7aa      	b.n	8004f74 <_printf_i+0x148>
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d0ad      	beq.n	8004f88 <_printf_i+0x15c>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	079b      	lsls	r3, r3, #30
 8005030:	d413      	bmi.n	800505a <_printf_i+0x22e>
 8005032:	68e0      	ldr	r0, [r4, #12]
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	4298      	cmp	r0, r3
 8005038:	bfb8      	it	lt
 800503a:	4618      	movlt	r0, r3
 800503c:	e7a6      	b.n	8004f8c <_printf_i+0x160>
 800503e:	2301      	movs	r3, #1
 8005040:	4632      	mov	r2, r6
 8005042:	4649      	mov	r1, r9
 8005044:	4640      	mov	r0, r8
 8005046:	47d0      	blx	sl
 8005048:	3001      	adds	r0, #1
 800504a:	d09d      	beq.n	8004f88 <_printf_i+0x15c>
 800504c:	3501      	adds	r5, #1
 800504e:	68e3      	ldr	r3, [r4, #12]
 8005050:	9903      	ldr	r1, [sp, #12]
 8005052:	1a5b      	subs	r3, r3, r1
 8005054:	42ab      	cmp	r3, r5
 8005056:	dcf2      	bgt.n	800503e <_printf_i+0x212>
 8005058:	e7eb      	b.n	8005032 <_printf_i+0x206>
 800505a:	2500      	movs	r5, #0
 800505c:	f104 0619 	add.w	r6, r4, #25
 8005060:	e7f5      	b.n	800504e <_printf_i+0x222>
 8005062:	bf00      	nop
 8005064:	08005209 	.word	0x08005209
 8005068:	0800521a 	.word	0x0800521a

0800506c <memmove>:
 800506c:	4288      	cmp	r0, r1
 800506e:	b510      	push	{r4, lr}
 8005070:	eb01 0402 	add.w	r4, r1, r2
 8005074:	d902      	bls.n	800507c <memmove+0x10>
 8005076:	4284      	cmp	r4, r0
 8005078:	4623      	mov	r3, r4
 800507a:	d807      	bhi.n	800508c <memmove+0x20>
 800507c:	1e43      	subs	r3, r0, #1
 800507e:	42a1      	cmp	r1, r4
 8005080:	d008      	beq.n	8005094 <memmove+0x28>
 8005082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800508a:	e7f8      	b.n	800507e <memmove+0x12>
 800508c:	4402      	add	r2, r0
 800508e:	4601      	mov	r1, r0
 8005090:	428a      	cmp	r2, r1
 8005092:	d100      	bne.n	8005096 <memmove+0x2a>
 8005094:	bd10      	pop	{r4, pc}
 8005096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800509a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800509e:	e7f7      	b.n	8005090 <memmove+0x24>

080050a0 <_sbrk_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4d06      	ldr	r5, [pc, #24]	@ (80050bc <_sbrk_r+0x1c>)
 80050a4:	2300      	movs	r3, #0
 80050a6:	4604      	mov	r4, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	f7fb fc66 	bl	800097c <_sbrk>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d102      	bne.n	80050ba <_sbrk_r+0x1a>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	b103      	cbz	r3, 80050ba <_sbrk_r+0x1a>
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	2000035c 	.word	0x2000035c

080050c0 <memcpy>:
 80050c0:	440a      	add	r2, r1
 80050c2:	4291      	cmp	r1, r2
 80050c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050c8:	d100      	bne.n	80050cc <memcpy+0xc>
 80050ca:	4770      	bx	lr
 80050cc:	b510      	push	{r4, lr}
 80050ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d6:	4291      	cmp	r1, r2
 80050d8:	d1f9      	bne.n	80050ce <memcpy+0xe>
 80050da:	bd10      	pop	{r4, pc}

080050dc <_realloc_r>:
 80050dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e0:	4680      	mov	r8, r0
 80050e2:	4615      	mov	r5, r2
 80050e4:	460c      	mov	r4, r1
 80050e6:	b921      	cbnz	r1, 80050f2 <_realloc_r+0x16>
 80050e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ec:	4611      	mov	r1, r2
 80050ee:	f7ff bc4b 	b.w	8004988 <_malloc_r>
 80050f2:	b92a      	cbnz	r2, 8005100 <_realloc_r+0x24>
 80050f4:	f7ff fbdc 	bl	80048b0 <_free_r>
 80050f8:	2400      	movs	r4, #0
 80050fa:	4620      	mov	r0, r4
 80050fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005100:	f000 f81a 	bl	8005138 <_malloc_usable_size_r>
 8005104:	4285      	cmp	r5, r0
 8005106:	4606      	mov	r6, r0
 8005108:	d802      	bhi.n	8005110 <_realloc_r+0x34>
 800510a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800510e:	d8f4      	bhi.n	80050fa <_realloc_r+0x1e>
 8005110:	4629      	mov	r1, r5
 8005112:	4640      	mov	r0, r8
 8005114:	f7ff fc38 	bl	8004988 <_malloc_r>
 8005118:	4607      	mov	r7, r0
 800511a:	2800      	cmp	r0, #0
 800511c:	d0ec      	beq.n	80050f8 <_realloc_r+0x1c>
 800511e:	42b5      	cmp	r5, r6
 8005120:	462a      	mov	r2, r5
 8005122:	4621      	mov	r1, r4
 8005124:	bf28      	it	cs
 8005126:	4632      	movcs	r2, r6
 8005128:	f7ff ffca 	bl	80050c0 <memcpy>
 800512c:	4621      	mov	r1, r4
 800512e:	4640      	mov	r0, r8
 8005130:	f7ff fbbe 	bl	80048b0 <_free_r>
 8005134:	463c      	mov	r4, r7
 8005136:	e7e0      	b.n	80050fa <_realloc_r+0x1e>

08005138 <_malloc_usable_size_r>:
 8005138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800513c:	1f18      	subs	r0, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	bfbc      	itt	lt
 8005142:	580b      	ldrlt	r3, [r1, r0]
 8005144:	18c0      	addlt	r0, r0, r3
 8005146:	4770      	bx	lr

08005148 <_init>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr

08005154 <_fini>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr
