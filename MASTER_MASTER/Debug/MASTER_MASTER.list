
MASTER_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004e28  08004e28  00005e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef0  08004ef0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef0  08004ef0  00005ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef8  08004ef8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00005ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000300  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000035c  2000035c  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c86c  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd9  00000000  00000000  000128f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  000146d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000750  00000000  00000000  00015058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9d2  00000000  00000000  000157a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d870  00000000  00000000  0003517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0b3d  00000000  00000000  000429ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103527  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b24  00000000  00000000  0010356c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00106090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e10 	.word	0x08004e10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004e10 	.word	0x08004e10

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fb84 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f8c6 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f990 	bl	80005b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000290:	f000 f920 	bl	80004d4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000294:	f000 f95c 	bl	8000550 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Infinite loop */
  uart_buf_len = sprintf(uart_buf, "LISTO PARA ENVIAR");
 8000298:	4953      	ldr	r1, [pc, #332]	@ (80003e8 <main+0x168>)
 800029a:	4854      	ldr	r0, [pc, #336]	@ (80003ec <main+0x16c>)
 800029c:	f004 f918 	bl	80044d0 <siprintf>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a53      	ldr	r2, [pc, #332]	@ (80003f0 <main+0x170>)
 80002a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN 2 */
  while (1)
  {
      // Recibe el selector del slave
      if (HAL_UART_Receive(&huart2, &slave_selector, 1, HAL_MAX_DELAY) == HAL_OK)
 80002a6:	f04f 33ff 	mov.w	r3, #4294967295
 80002aa:	2201      	movs	r2, #1
 80002ac:	4951      	ldr	r1, [pc, #324]	@ (80003f4 <main+0x174>)
 80002ae:	4852      	ldr	r0, [pc, #328]	@ (80003f8 <main+0x178>)
 80002b0:	f003 f905 	bl	80034be <HAL_UART_Receive>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d1f5      	bne.n	80002a6 <main+0x26>
      {
          // Convierte el carácter recibido al número real del selector
          slave_selector -= '0';  // '0' tiene el valor 48, así que restamos 48 para obtener el número real
 80002ba:	4b4e      	ldr	r3, [pc, #312]	@ (80003f4 <main+0x174>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3b30      	subs	r3, #48	@ 0x30
 80002c0:	4a4c      	ldr	r2, [pc, #304]	@ (80003f4 <main+0x174>)
 80002c2:	6013      	str	r3, [r2, #0]

          // Ajusta el GPIO para seleccionar el slave adecuado
          if (slave_selector == 1)  // Selecciona GPIOA4
 80002c4:	4b4b      	ldr	r3, [pc, #300]	@ (80003f4 <main+0x174>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d10b      	bne.n	80002e4 <main+0x64>
          {
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Activa GPIOA4
 80002cc:	2200      	movs	r2, #0
 80002ce:	2110      	movs	r1, #16
 80002d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d4:	f000 feda 	bl	800108c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);    // Desactiva GPIOB6
 80002d8:	2201      	movs	r2, #1
 80002da:	2140      	movs	r1, #64	@ 0x40
 80002dc:	4847      	ldr	r0, [pc, #284]	@ (80003fc <main+0x17c>)
 80002de:	f000 fed5 	bl	800108c <HAL_GPIO_WritePin>
 80002e2:	e023      	b.n	800032c <main+0xac>
          }
          else if (slave_selector == 2)  // Selecciona GPIOB6
 80002e4:	4b43      	ldr	r3, [pc, #268]	@ (80003f4 <main+0x174>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d10b      	bne.n	8000304 <main+0x84>
          {
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);    // Desactiva GPIOA4
 80002ec:	2201      	movs	r2, #1
 80002ee:	2110      	movs	r1, #16
 80002f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f4:	f000 feca 	bl	800108c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // Activa GPIOB6
 80002f8:	2200      	movs	r2, #0
 80002fa:	2140      	movs	r1, #64	@ 0x40
 80002fc:	483f      	ldr	r0, [pc, #252]	@ (80003fc <main+0x17c>)
 80002fe:	f000 fec5 	bl	800108c <HAL_GPIO_WritePin>
 8000302:	e013      	b.n	800032c <main+0xac>
          }
          else
          {
              uart_buf_len = sprintf(uart_buf, "Selector de slave no válido: %d\r\n", slave_selector);
 8000304:	4b3b      	ldr	r3, [pc, #236]	@ (80003f4 <main+0x174>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	461a      	mov	r2, r3
 800030a:	493d      	ldr	r1, [pc, #244]	@ (8000400 <main+0x180>)
 800030c:	4837      	ldr	r0, [pc, #220]	@ (80003ec <main+0x16c>)
 800030e:	f004 f8df 	bl	80044d0 <siprintf>
 8000312:	4603      	mov	r3, r0
 8000314:	4a36      	ldr	r2, [pc, #216]	@ (80003f0 <main+0x170>)
 8000316:	6013      	str	r3, [r2, #0]
              HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000318:	4b35      	ldr	r3, [pc, #212]	@ (80003f0 <main+0x170>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	b29a      	uxth	r2, r3
 800031e:	f04f 33ff 	mov.w	r3, #4294967295
 8000322:	4932      	ldr	r1, [pc, #200]	@ (80003ec <main+0x16c>)
 8000324:	4834      	ldr	r0, [pc, #208]	@ (80003f8 <main+0x178>)
 8000326:	f003 f841 	bl	80033ac <HAL_UART_Transmit>
              continue;  // Continúa con el siguiente ciclo del bucle
 800032a:	e05c      	b.n	80003e6 <main+0x166>
          }

          // Recibe el primer byte que contiene los dos dígitos del tamaño del mensaje
          if (HAL_UART_Receive(&huart2, (uint8_t *)msg_length_digits, 2, HAL_MAX_DELAY) == HAL_OK)
 800032c:	f04f 33ff 	mov.w	r3, #4294967295
 8000330:	2202      	movs	r2, #2
 8000332:	4934      	ldr	r1, [pc, #208]	@ (8000404 <main+0x184>)
 8000334:	4830      	ldr	r0, [pc, #192]	@ (80003f8 <main+0x178>)
 8000336:	f003 f8c2 	bl	80034be <HAL_UART_Receive>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1b2      	bne.n	80002a6 <main+0x26>
          {
              // Procesa el primer dígito para la longitud del mensaje
              msg_length = (msg_length_digits[0] - '0') * 10 + (msg_length_digits[1] - '0');
 8000340:	4b30      	ldr	r3, [pc, #192]	@ (8000404 <main+0x184>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	0092      	lsls	r2, r2, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b2d      	ldr	r3, [pc, #180]	@ (8000404 <main+0x184>)
 8000350:	785b      	ldrb	r3, [r3, #1]
 8000352:	4413      	add	r3, r2
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3b10      	subs	r3, #16
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <main+0x188>)
 800035c:	701a      	strb	r2, [r3, #0]

              if (msg_length > MAX_MSG_LENGTH)
 800035e:	4b2a      	ldr	r3, [pc, #168]	@ (8000408 <main+0x188>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b32      	cmp	r3, #50	@ 0x32
 8000364:	d902      	bls.n	800036c <main+0xec>
                  msg_length = MAX_MSG_LENGTH;  // Limita el tamaño del mensaje
 8000366:	4b28      	ldr	r3, [pc, #160]	@ (8000408 <main+0x188>)
 8000368:	2232      	movs	r2, #50	@ 0x32
 800036a:	701a      	strb	r2, [r3, #0]

              // Recibe el mensaje completo
              if (HAL_UART_Receive(&huart2, (uint8_t *)spi_tx_buf, msg_length, HAL_MAX_DELAY) == HAL_OK)
 800036c:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <main+0x188>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	461a      	mov	r2, r3
 8000372:	f04f 33ff 	mov.w	r3, #4294967295
 8000376:	4925      	ldr	r1, [pc, #148]	@ (800040c <main+0x18c>)
 8000378:	481f      	ldr	r0, [pc, #124]	@ (80003f8 <main+0x178>)
 800037a:	f003 f8a0 	bl	80034be <HAL_UART_Receive>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d190      	bne.n	80002a6 <main+0x26>
              {
                  // Envía el mensaje recibido al slave seleccionado
                  HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_tx_buf, msg_length, HAL_MAX_DELAY);
 8000384:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <main+0x188>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	461a      	mov	r2, r3
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	491f      	ldr	r1, [pc, #124]	@ (800040c <main+0x18c>)
 8000390:	481f      	ldr	r0, [pc, #124]	@ (8000410 <main+0x190>)
 8000392:	f002 fbd0 	bl	8002b36 <HAL_SPI_Transmit>

                  // Mensaje de confirmación
                  uart_buf_len = sprintf(uart_buf, "Mensaje enviado al slave %d: %s\r\n", slave_selector, spi_tx_buf);
 8000396:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <main+0x174>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <main+0x18c>)
 800039c:	491d      	ldr	r1, [pc, #116]	@ (8000414 <main+0x194>)
 800039e:	4813      	ldr	r0, [pc, #76]	@ (80003ec <main+0x16c>)
 80003a0:	f004 f896 	bl	80044d0 <siprintf>
 80003a4:	4603      	mov	r3, r0
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <main+0x170>)
 80003a8:	6013      	str	r3, [r2, #0]
                  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80003aa:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <main+0x170>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	f04f 33ff 	mov.w	r3, #4294967295
 80003b4:	490d      	ldr	r1, [pc, #52]	@ (80003ec <main+0x16c>)
 80003b6:	4810      	ldr	r0, [pc, #64]	@ (80003f8 <main+0x178>)
 80003b8:	f002 fff8 	bl	80033ac <HAL_UART_Transmit>

                  // Después de la transmisión, libera el pin NSS
                  if (slave_selector == 1)
 80003bc:	4b0d      	ldr	r3, [pc, #52]	@ (80003f4 <main+0x174>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d106      	bne.n	80003d2 <main+0x152>
                  {
                      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Desactiva GPIOA4
 80003c4:	2201      	movs	r2, #1
 80003c6:	2110      	movs	r1, #16
 80003c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003cc:	f000 fe5e 	bl	800108c <HAL_GPIO_WritePin>
 80003d0:	e769      	b.n	80002a6 <main+0x26>
                  }
                  else if (slave_selector == 2)
 80003d2:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <main+0x174>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	f47f af65 	bne.w	80002a6 <main+0x26>
                  {
                      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // Desactiva GPIOB6
 80003dc:	2201      	movs	r2, #1
 80003de:	2140      	movs	r1, #64	@ 0x40
 80003e0:	4806      	ldr	r0, [pc, #24]	@ (80003fc <main+0x17c>)
 80003e2:	f000 fe53 	bl	800108c <HAL_GPIO_WritePin>
      if (HAL_UART_Receive(&huart2, &slave_selector, 1, HAL_MAX_DELAY) == HAL_OK)
 80003e6:	e75e      	b.n	80002a6 <main+0x26>
 80003e8:	08004e28 	.word	0x08004e28
 80003ec:	20000198 	.word	0x20000198
 80003f0:	200001fc 	.word	0x200001fc
 80003f4:	20000208 	.word	0x20000208
 80003f8:	200000dc 	.word	0x200000dc
 80003fc:	48000400 	.word	0x48000400
 8000400:	08004e3c 	.word	0x08004e3c
 8000404:	20000204 	.word	0x20000204
 8000408:	20000200 	.word	0x20000200
 800040c:	20000164 	.word	0x20000164
 8000410:	20000078 	.word	0x20000078
 8000414:	08004e60 	.word	0x08004e60

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b0a6      	sub	sp, #152	@ 0x98
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000422:	2228      	movs	r2, #40	@ 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f004 f872 	bl	8004510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2258      	movs	r2, #88	@ 0x58
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f004 f864 	bl	8004510 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000448:	2302      	movs	r3, #2
 800044a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	2310      	movs	r3, #16
 8000452:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000456:	2302      	movs	r3, #2
 8000458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000460:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000464:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fe20 	bl	80010bc <HAL_RCC_OscConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000482:	f000 f911 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000486:	230f      	movs	r3, #15
 8000488:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048a:	2302      	movs	r3, #2
 800048c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000496:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004a0:	2102      	movs	r1, #2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 fe5e 	bl	8002164 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004ae:	f000 f8fb 	bl	80006a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	4618      	mov	r0, r3
 80004be:	f002 f871 	bl	80025a4 <HAL_RCCEx_PeriphCLKConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004c8:	f000 f8ee 	bl	80006a8 <Error_Handler>
  }
}
 80004cc:	bf00      	nop
 80004ce:	3798      	adds	r7, #152	@ 0x98
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000548 <MX_SPI1_Init+0x74>)
 80004da:	4a1c      	ldr	r2, [pc, #112]	@ (800054c <MX_SPI1_Init+0x78>)
 80004dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004de:	4b1a      	ldr	r3, [pc, #104]	@ (8000548 <MX_SPI1_Init+0x74>)
 80004e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004e6:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <MX_SPI1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004ec:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <MX_SPI1_Init+0x74>)
 80004ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80004f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004f4:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <MX_SPI1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004fa:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <MX_SPI1_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000500:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <MX_SPI1_Init+0x74>)
 8000502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000506:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <MX_SPI1_Init+0x74>)
 800050a:	2238      	movs	r2, #56	@ 0x38
 800050c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800050e:	4b0e      	ldr	r3, [pc, #56]	@ (8000548 <MX_SPI1_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_SPI1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800051a:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <MX_SPI1_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000520:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_SPI1_Init+0x74>)
 8000522:	2207      	movs	r2, #7
 8000524:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000526:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <MX_SPI1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_SPI1_Init+0x74>)
 800052e:	2208      	movs	r2, #8
 8000530:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000532:	4805      	ldr	r0, [pc, #20]	@ (8000548 <MX_SPI1_Init+0x74>)
 8000534:	f002 fa54 	bl	80029e0 <HAL_SPI_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800053e:	f000 f8b3 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000078 	.word	0x20000078
 800054c:	40013000 	.word	0x40013000

08000550 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000556:	4a15      	ldr	r2, [pc, #84]	@ (80005ac <MX_USART2_UART_Init+0x5c>)
 8000558:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800055a:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 800055c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000560:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000576:	220c      	movs	r2, #12
 8000578:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000594:	f002 febc 	bl	8003310 <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800059e:	f000 f883 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000dc 	.word	0x200000dc
 80005ac:	40004400 	.word	0x40004400

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b35      	ldr	r3, [pc, #212]	@ (800069c <MX_GPIO_Init+0xec>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a34      	ldr	r2, [pc, #208]	@ (800069c <MX_GPIO_Init+0xec>)
 80005cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b32      	ldr	r3, [pc, #200]	@ (800069c <MX_GPIO_Init+0xec>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <MX_GPIO_Init+0xec>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a2e      	ldr	r2, [pc, #184]	@ (800069c <MX_GPIO_Init+0xec>)
 80005e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <MX_GPIO_Init+0xec>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <MX_GPIO_Init+0xec>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a28      	ldr	r2, [pc, #160]	@ (800069c <MX_GPIO_Init+0xec>)
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b26      	ldr	r3, [pc, #152]	@ (800069c <MX_GPIO_Init+0xec>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b23      	ldr	r3, [pc, #140]	@ (800069c <MX_GPIO_Init+0xec>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a22      	ldr	r2, [pc, #136]	@ (800069c <MX_GPIO_Init+0xec>)
 8000614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <MX_GPIO_Init+0xec>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2110      	movs	r1, #16
 800062a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062e:	f000 fd2d 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2140      	movs	r1, #64	@ 0x40
 8000636:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000638:	f000 fd28 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000642:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4814      	ldr	r0, [pc, #80]	@ (80006a4 <MX_GPIO_Init+0xf4>)
 8000654:	f000 fb90 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000658:	2310      	movs	r3, #16
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f000 fb81 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000676:	2340      	movs	r3, #64	@ 0x40
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 800068e:	f000 fb73 	bl	8000d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	@ 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000
 80006a0:	48000400 	.word	0x48000400
 80006a4:	48000800 	.word	0x48000800

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <Error_Handler+0x8>

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <HAL_MspInit+0x44>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <HAL_MspInit+0x44>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <HAL_MspInit+0x44>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <HAL_MspInit+0x44>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a08      	ldr	r2, [pc, #32]	@ (80006f8 <HAL_MspInit+0x44>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <HAL_MspInit+0x44>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ea:	2007      	movs	r0, #7
 80006ec:	f000 fa86 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1b      	ldr	r2, [pc, #108]	@ (8000788 <HAL_SPI_MspInit+0x8c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d130      	bne.n	8000780 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800071e:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <HAL_SPI_MspInit+0x90>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a1a      	ldr	r2, [pc, #104]	@ (800078c <HAL_SPI_MspInit+0x90>)
 8000724:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <HAL_SPI_MspInit+0x90>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <HAL_SPI_MspInit+0x90>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a14      	ldr	r2, [pc, #80]	@ (800078c <HAL_SPI_MspInit+0x90>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_SPI_MspInit+0x90>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800074e:	23e0      	movs	r3, #224	@ 0xe0
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800075e:	2305      	movs	r3, #5
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076c:	f000 fb04 	bl	8000d78 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	2023      	movs	r0, #35	@ 0x23
 8000776:	f000 fa4c 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800077a:	2023      	movs	r0, #35	@ 0x23
 800077c:	f000 fa65 	bl	8000c4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	@ 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40013000 	.word	0x40013000
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <HAL_UART_MspInit+0x8c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d130      	bne.n	8000814 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e2:	230c      	movs	r3, #12
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f2:	2307      	movs	r3, #7
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000800:	f000 faba 	bl	8000d78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2026      	movs	r0, #38	@ 0x26
 800080a:	f000 fa02 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800080e:	2026      	movs	r0, #38	@ 0x26
 8000810:	f000 fa1b 	bl	8000c4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	@ 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40004400 	.word	0x40004400
 8000820:	40021000 	.word	0x40021000

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <NMI_Handler+0x4>

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <MemManage_Handler+0x4>

0800083c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087a:	f000 f8cf 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <SPI1_IRQHandler+0x10>)
 800088a:	f002 fac9 	bl	8002e20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000078 	.word	0x20000078

08000898 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <USART2_IRQHandler+0x10>)
 800089e:	f002 fed7 	bl	8003650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000dc 	.word	0x200000dc

080008ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b4:	4a14      	ldr	r2, [pc, #80]	@ (8000908 <_sbrk+0x5c>)
 80008b6:	4b15      	ldr	r3, [pc, #84]	@ (800090c <_sbrk+0x60>)
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c0:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <_sbrk+0x64>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <_sbrk+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d207      	bcs.n	80008ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008dc:	f003 fe20 	bl	8004520 <__errno>
 80008e0:	4603      	mov	r3, r0
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	e009      	b.n	8000900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f2:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <_sbrk+0x64>)
 80008fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008fe:	68fb      	ldr	r3, [r7, #12]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20010000 	.word	0x20010000
 800090c:	00000400 	.word	0x00000400
 8000910:	2000020c 	.word	0x2000020c
 8000914:	20000360 	.word	0x20000360

08000918 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800093c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000974 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000940:	f7ff ffea 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <LoopForever+0x6>)
  ldr r1, =_edata
 8000946:	490d      	ldr	r1, [pc, #52]	@ (800097c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000948:	4a0d      	ldr	r2, [pc, #52]	@ (8000980 <LoopForever+0xe>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800095c:	4c0a      	ldr	r4, [pc, #40]	@ (8000988 <LoopForever+0x16>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096a:	f003 fddf 	bl	800452c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800096e:	f7ff fc87 	bl	8000280 <main>

08000972 <LoopForever>:

LoopForever:
    b LoopForever
 8000972:	e7fe      	b.n	8000972 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000974:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000980:	08004f00 	.word	0x08004f00
  ldr r2, =_sbss
 8000984:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000988:	2000035c 	.word	0x2000035c

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>
	...

08000990 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <HAL_Init+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	@ (80009b8 <HAL_Init+0x28>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 f92b 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 f808 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff fe82 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f943 	bl	8000c66 <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f90b 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	@ (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000210 	.word	0x20000210

08000a44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000210 	.word	0x20000210

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4907      	ldr	r1, [pc, #28]	@ (8000af8 <__NVIC_EnableIRQ+0x38>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	@ (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	@ 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	@ 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff8e 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff29 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff3e 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff8e 	bl	8000b50 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5d 	bl	8000afc <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff31 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffa2 	bl	8000bb8 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e02e      	b.n	8000cee <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d008      	beq.n	8000cac <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e020      	b.n	8000cee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 020e 	bic.w	r2, r2, #14
 8000cba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0201 	bic.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d005      	beq.n	8000d1c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2204      	movs	r2, #4
 8000d14:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e027      	b.n	8000d6c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 020e 	bic.w	r2, r2, #14
 8000d2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0201 	bic.w	r2, r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d44:	2101      	movs	r1, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	4798      	blx	r3
    }
  }
  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d86:	e160      	b.n	800104a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 8152 	beq.w	8001044 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d005      	beq.n	8000db8 <HAL_GPIO_Init+0x40>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d130      	bne.n	8000e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dee:	2201      	movs	r2, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	f003 0201 	and.w	r2, r3, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d017      	beq.n	8000e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d123      	bne.n	8000eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	6939      	ldr	r1, [r7, #16]
 8000ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0203 	and.w	r2, r3, #3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 80ac 	beq.w	8001044 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	4b5e      	ldr	r3, [pc, #376]	@ (8001068 <HAL_GPIO_Init+0x2f0>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8001068 <HAL_GPIO_Init+0x2f0>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8001068 <HAL_GPIO_Init+0x2f0>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f04:	4a59      	ldr	r2, [pc, #356]	@ (800106c <HAL_GPIO_Init+0x2f4>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f2e:	d025      	beq.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a4f      	ldr	r2, [pc, #316]	@ (8001070 <HAL_GPIO_Init+0x2f8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d01f      	beq.n	8000f78 <HAL_GPIO_Init+0x200>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4e      	ldr	r2, [pc, #312]	@ (8001074 <HAL_GPIO_Init+0x2fc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d019      	beq.n	8000f74 <HAL_GPIO_Init+0x1fc>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4d      	ldr	r2, [pc, #308]	@ (8001078 <HAL_GPIO_Init+0x300>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d013      	beq.n	8000f70 <HAL_GPIO_Init+0x1f8>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d00d      	beq.n	8000f6c <HAL_GPIO_Init+0x1f4>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a4b      	ldr	r2, [pc, #300]	@ (8001080 <HAL_GPIO_Init+0x308>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d007      	beq.n	8000f68 <HAL_GPIO_Init+0x1f0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001084 <HAL_GPIO_Init+0x30c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d101      	bne.n	8000f64 <HAL_GPIO_Init+0x1ec>
 8000f60:	2306      	movs	r3, #6
 8000f62:	e00c      	b.n	8000f7e <HAL_GPIO_Init+0x206>
 8000f64:	2307      	movs	r3, #7
 8000f66:	e00a      	b.n	8000f7e <HAL_GPIO_Init+0x206>
 8000f68:	2305      	movs	r3, #5
 8000f6a:	e008      	b.n	8000f7e <HAL_GPIO_Init+0x206>
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x206>
 8000f70:	2303      	movs	r3, #3
 8000f72:	e004      	b.n	8000f7e <HAL_GPIO_Init+0x206>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x206>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x206>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	f002 0203 	and.w	r2, r2, #3
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f8e:	4937      	ldr	r1, [pc, #220]	@ (800106c <HAL_GPIO_Init+0x2f4>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <HAL_GPIO_Init+0x310>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fc0:	4a31      	ldr	r2, [pc, #196]	@ (8001088 <HAL_GPIO_Init+0x310>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc6:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <HAL_GPIO_Init+0x310>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fea:	4a27      	ldr	r2, [pc, #156]	@ (8001088 <HAL_GPIO_Init+0x310>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ff0:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <HAL_GPIO_Init+0x310>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001014:	4a1c      	ldr	r2, [pc, #112]	@ (8001088 <HAL_GPIO_Init+0x310>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_GPIO_Init+0x310>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800103e:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <HAL_GPIO_Init+0x310>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f ae97 	bne.w	8000d88 <HAL_GPIO_Init+0x10>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	48000400 	.word	0x48000400
 8001074:	48000800 	.word	0x48000800
 8001078:	48000c00 	.word	0x48000c00
 800107c:	48001000 	.word	0x48001000
 8001080:	48001400 	.word	0x48001400
 8001084:	48001800 	.word	0x48001800
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	f001 b83a 	b.w	8002156 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 816f 	beq.w	80013d6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f8:	4bb5      	ldr	r3, [pc, #724]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	d00c      	beq.n	800111e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001104:	4bb2      	ldr	r3, [pc, #712]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d15c      	bne.n	80011ca <HAL_RCC_OscConfig+0x10e>
 8001110:	4baf      	ldr	r3, [pc, #700]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800111c:	d155      	bne.n	80011ca <HAL_RCC_OscConfig+0x10e>
 800111e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001122:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001132:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <HAL_RCC_OscConfig+0x94>
 800114a:	4ba1      	ldr	r3, [pc, #644]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	e015      	b.n	800117c <HAL_RCC_OscConfig+0xc0>
 8001150:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001154:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001164:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001168:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800116c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001178:	4b95      	ldr	r3, [pc, #596]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001180:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001184:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001188:	fa92 f2a2 	rbit	r2, r2
 800118c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001190:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001194:	fab2 f282 	clz	r2, r2
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	f002 021f 	and.w	r2, r2, #31
 80011a4:	2101      	movs	r1, #1
 80011a6:	fa01 f202 	lsl.w	r2, r1, r2
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8111 	beq.w	80013d4 <HAL_RCC_OscConfig+0x318>
 80011b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8108 	bne.w	80013d4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f000 bfc6 	b.w	8002156 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x12e>
 80011dc:	4b7c      	ldr	r3, [pc, #496]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a7b      	ldr	r2, [pc, #492]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e036      	b.n	8001258 <HAL_RCC_OscConfig+0x19c>
 80011ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x158>
 80011fa:	4b75      	ldr	r3, [pc, #468]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a74      	ldr	r2, [pc, #464]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b72      	ldr	r3, [pc, #456]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a71      	ldr	r2, [pc, #452]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e021      	b.n	8001258 <HAL_RCC_OscConfig+0x19c>
 8001214:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001218:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x184>
 8001226:	4b6a      	ldr	r3, [pc, #424]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a69      	ldr	r2, [pc, #420]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b67      	ldr	r3, [pc, #412]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a66      	ldr	r2, [pc, #408]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e00b      	b.n	8001258 <HAL_RCC_OscConfig+0x19c>
 8001240:	4b63      	ldr	r3, [pc, #396]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a62      	ldr	r2, [pc, #392]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b60      	ldr	r3, [pc, #384]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a5f      	ldr	r2, [pc, #380]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001256:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800125c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d059      	beq.n	800131c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fbec 	bl	8000a44 <HAL_GetTick>
 800126c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001272:	f7ff fbe7 	bl	8000a44 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	@ 0x64
 8001280:	d902      	bls.n	8001288 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	f000 bf67 	b.w	8002156 <HAL_RCC_OscConfig+0x109a>
 8001288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800128c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800129c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d102      	bne.n	80012ba <HAL_RCC_OscConfig+0x1fe>
 80012b4:	4b46      	ldr	r3, [pc, #280]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	e015      	b.n	80012e6 <HAL_RCC_OscConfig+0x22a>
 80012ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012be:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80012ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012d2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80012d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80012e2:	4b3b      	ldr	r3, [pc, #236]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012ea:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80012ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80012f2:	fa92 f2a2 	rbit	r2, r2
 80012f6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80012fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	f042 0220 	orr.w	r2, r2, #32
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f002 021f 	and.w	r2, r2, #31
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0ab      	beq.n	8001272 <HAL_RCC_OscConfig+0x1b6>
 800131a:	e05c      	b.n	80013d6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fb92 	bl	8000a44 <HAL_GetTick>
 8001320:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001326:	f7ff fb8d 	bl	8000a44 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d902      	bls.n	800133c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	f000 bf0d 	b.w	8002156 <HAL_RCC_OscConfig+0x109a>
 800133c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001340:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001350:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d102      	bne.n	800136e <HAL_RCC_OscConfig+0x2b2>
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	e015      	b.n	800139a <HAL_RCC_OscConfig+0x2de>
 800136e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001372:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001382:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001386:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800138a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_RCC_OscConfig+0x314>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800139e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80013a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80013a6:	fa92 f2a2 	rbit	r2, r2
 80013aa:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80013ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80013b2:	fab2 f282 	clz	r2, r2
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	f042 0220 	orr.w	r2, r2, #32
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	f002 021f 	and.w	r2, r2, #31
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f202 	lsl.w	r2, r1, r2
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ab      	bne.n	8001326 <HAL_RCC_OscConfig+0x26a>
 80013ce:	e002      	b.n	80013d6 <HAL_RCC_OscConfig+0x31a>
 80013d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 817f 	beq.w	80016ea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013ec:	4ba7      	ldr	r3, [pc, #668]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00c      	beq.n	8001412 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013f8:	4ba4      	ldr	r3, [pc, #656]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d173      	bne.n	80014ec <HAL_RCC_OscConfig+0x430>
 8001404:	4ba1      	ldr	r3, [pc, #644]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800140c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001410:	d16c      	bne.n	80014ec <HAL_RCC_OscConfig+0x430>
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001424:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d102      	bne.n	8001442 <HAL_RCC_OscConfig+0x386>
 800143c:	4b93      	ldr	r3, [pc, #588]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	e013      	b.n	800146a <HAL_RCC_OscConfig+0x3ae>
 8001442:	2302      	movs	r3, #2
 8001444:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800145a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001466:	4b89      	ldr	r3, [pc, #548]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	2202      	movs	r2, #2
 800146c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001470:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001474:	fa92 f2a2 	rbit	r2, r2
 8001478:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800147c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001480:	fab2 f282 	clz	r2, r2
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	f042 0220 	orr.w	r2, r2, #32
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	f002 021f 	and.w	r2, r2, #31
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00a      	beq.n	80014b2 <HAL_RCC_OscConfig+0x3f6>
 800149c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d002      	beq.n	80014b2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f000 be52 	b.w	8002156 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b2:	4b76      	ldr	r3, [pc, #472]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	21f8      	movs	r1, #248	@ 0xf8
 80014c8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80014d0:	fa91 f1a1 	rbit	r1, r1
 80014d4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80014d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80014dc:	fab1 f181 	clz	r1, r1
 80014e0:	b2c9      	uxtb	r1, r1
 80014e2:	408b      	lsls	r3, r1
 80014e4:	4969      	ldr	r1, [pc, #420]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	e0fe      	b.n	80016ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8088 	beq.w	800160e <HAL_RCC_OscConfig+0x552>
 80014fe:	2301      	movs	r3, #1
 8001500:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001510:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	fab3 f383 	clz	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800151e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	461a      	mov	r2, r3
 8001526:	2301      	movs	r3, #1
 8001528:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fa8b 	bl	8000a44 <HAL_GetTick>
 800152e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fa86 	bl	8000a44 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d902      	bls.n	800154a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	f000 be06 	b.w	8002156 <HAL_RCC_OscConfig+0x109a>
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001554:	fa93 f3a3 	rbit	r3, r3
 8001558:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800155c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b01      	cmp	r3, #1
 8001572:	d102      	bne.n	800157a <HAL_RCC_OscConfig+0x4be>
 8001574:	4b45      	ldr	r3, [pc, #276]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	e013      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e6>
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001592:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800159e:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a2:	2202      	movs	r2, #2
 80015a4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80015a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80015ac:	fa92 f2a2 	rbit	r2, r2
 80015b0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80015b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80015b8:	fab2 f282 	clz	r2, r2
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	f042 0220 	orr.w	r2, r2, #32
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	f002 021f 	and.w	r2, r2, #31
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f202 	lsl.w	r2, r1, r2
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0af      	beq.n	8001534 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	21f8      	movs	r1, #248	@ 0xf8
 80015ea:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80015f2:	fa91 f1a1 	rbit	r1, r1
 80015f6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80015fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80015fe:	fab1 f181 	clz	r1, r1
 8001602:	b2c9      	uxtb	r1, r1
 8001604:	408b      	lsls	r3, r1
 8001606:	4921      	ldr	r1, [pc, #132]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e06d      	b.n	80016ea <HAL_RCC_OscConfig+0x62e>
 800160e:	2301      	movs	r3, #1
 8001610:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001620:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800162e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	461a      	mov	r2, r3
 8001636:	2300      	movs	r3, #0
 8001638:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fa03 	bl	8000a44 <HAL_GetTick>
 800163e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff f9fe 	bl	8000a44 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d902      	bls.n	800165a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	f000 bd7e 	b.w	8002156 <HAL_RCC_OscConfig+0x109a>
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800166c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x5d4>
 8001684:	4b01      	ldr	r3, [pc, #4]	@ (800168c <HAL_RCC_OscConfig+0x5d0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	e016      	b.n	80016b8 <HAL_RCC_OscConfig+0x5fc>
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800169a:	fa93 f3a3 	rbit	r3, r3
 800169e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80016a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80016b4:	4bbf      	ldr	r3, [pc, #764]	@ (80019b4 <HAL_RCC_OscConfig+0x8f8>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	2202      	movs	r2, #2
 80016ba:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80016be:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80016c2:	fa92 f2a2 	rbit	r2, r2
 80016c6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80016ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80016ce:	fab2 f282 	clz	r2, r2
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f042 0220 	orr.w	r2, r2, #32
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f002 021f 	and.w	r2, r2, #31
 80016de:	2101      	movs	r1, #1
 80016e0:	fa01 f202 	lsl.w	r2, r1, r2
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ac      	bne.n	8001644 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8113 	beq.w	8001926 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001704:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d07c      	beq.n	800180a <HAL_RCC_OscConfig+0x74e>
 8001710:	2301      	movs	r3, #1
 8001712:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001722:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	4ba2      	ldr	r3, [pc, #648]	@ (80019b8 <HAL_RCC_OscConfig+0x8fc>)
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	461a      	mov	r2, r3
 8001736:	2301      	movs	r3, #1
 8001738:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff f983 	bl	8000a44 <HAL_GetTick>
 800173e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	e00a      	b.n	800175a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff f97e 	bl	8000a44 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d902      	bls.n	800175a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	f000 bcfe 	b.w	8002156 <HAL_RCC_OscConfig+0x109a>
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001764:	fa93 f2a3 	rbit	r2, r3
 8001768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800177a:	2202      	movs	r2, #2
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f2a3 	rbit	r2, r3
 80017b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b7e      	ldr	r3, [pc, #504]	@ (80019b4 <HAL_RCC_OscConfig+0x8f8>)
 80017bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017c6:	2102      	movs	r1, #2
 80017c8:	6019      	str	r1, [r3, #0]
 80017ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f1a3 	rbit	r1, r3
 80017d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017e0:	6019      	str	r1, [r3, #0]
  return result;
 80017e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2101      	movs	r1, #1
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d09d      	beq.n	8001744 <HAL_RCC_OscConfig+0x688>
 8001808:	e08d      	b.n	8001926 <HAL_RCC_OscConfig+0x86a>
 800180a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800181a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001828:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800182c:	601a      	str	r2, [r3, #0]
  return result;
 800182e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001832:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001836:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	4b5d      	ldr	r3, [pc, #372]	@ (80019b8 <HAL_RCC_OscConfig+0x8fc>)
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	461a      	mov	r2, r3
 8001848:	2300      	movs	r3, #0
 800184a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7ff f8fa 	bl	8000a44 <HAL_GetTick>
 8001850:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff f8f5 	bl	8000a44 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d902      	bls.n	800186c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	f000 bc75 	b.w	8002156 <HAL_RCC_OscConfig+0x109a>
 800186c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001870:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fa93 f2a3 	rbit	r2, r3
 8001886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001894:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001898:	2202      	movs	r2, #2
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fa93 f2a3 	rbit	r2, r3
 80018ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <HAL_RCC_OscConfig+0x8f8>)
 80018da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018e4:	2102      	movs	r1, #2
 80018e6:	6019      	str	r1, [r3, #0]
 80018e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f1a3 	rbit	r1, r3
 80018f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80018fe:	6019      	str	r1, [r3, #0]
  return result;
 8001900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001904:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	2101      	movs	r1, #1
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d197      	bne.n	8001856 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 81a5 	beq.w	8001c86 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001942:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <HAL_RCC_OscConfig+0x8f8>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_RCC_OscConfig+0x8f8>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a18      	ldr	r2, [pc, #96]	@ (80019b4 <HAL_RCC_OscConfig+0x8f8>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <HAL_RCC_OscConfig+0x8f8>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001970:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001974:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001976:	2301      	movs	r3, #1
 8001978:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <HAL_RCC_OscConfig+0x900>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d121      	bne.n	80019cc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <HAL_RCC_OscConfig+0x900>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	@ (80019bc <HAL_RCC_OscConfig+0x900>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001992:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001994:	f7ff f856 	bl	8000a44 <HAL_GetTick>
 8001998:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	e010      	b.n	80019c0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199e:	f7ff f851 	bl	8000a44 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	@ 0x64
 80019ac:	d908      	bls.n	80019c0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e3d1      	b.n	8002156 <HAL_RCC_OscConfig+0x109a>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	10908120 	.word	0x10908120
 80019bc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b8d      	ldr	r3, [pc, #564]	@ (8001bf8 <HAL_RCC_OscConfig+0xb3c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0e8      	beq.n	800199e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x92e>
 80019dc:	4b87      	ldr	r3, [pc, #540]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a86      	ldr	r2, [pc, #536]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e035      	b.n	8001a56 <HAL_RCC_OscConfig+0x99a>
 80019ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x958>
 80019fa:	4b80      	ldr	r3, [pc, #512]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a7f      	ldr	r2, [pc, #508]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6213      	str	r3, [r2, #32]
 8001a06:	4b7d      	ldr	r3, [pc, #500]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a0c:	f023 0304 	bic.w	r3, r3, #4
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	e020      	b.n	8001a56 <HAL_RCC_OscConfig+0x99a>
 8001a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d10c      	bne.n	8001a3e <HAL_RCC_OscConfig+0x982>
 8001a24:	4b75      	ldr	r3, [pc, #468]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a74      	ldr	r2, [pc, #464]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	4b72      	ldr	r3, [pc, #456]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a71      	ldr	r2, [pc, #452]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0x99a>
 8001a3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a6e      	ldr	r2, [pc, #440]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a6b      	ldr	r2, [pc, #428]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8081 	beq.w	8001b6a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7fe ffec 	bl	8000a44 <HAL_GetTick>
 8001a6c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	e00b      	b.n	8001a8a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7fe ffe7 	bl	8000a44 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e365      	b.n	8002156 <HAL_RCC_OscConfig+0x109a>
 8001a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001a92:	2202      	movs	r2, #2
 8001a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001abe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001acc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001ad0:	601a      	str	r2, [r3, #0]
  return result;
 8001ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001ada:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d102      	bne.n	8001af6 <HAL_RCC_OscConfig+0xa3a>
 8001af0:	4b42      	ldr	r3, [pc, #264]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	e013      	b.n	8001b1e <HAL_RCC_OscConfig+0xa62>
 8001af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001afe:	2202      	movs	r2, #2
 8001b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b06:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b14:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4b38      	ldr	r3, [pc, #224]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b22:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b26:	2102      	movs	r1, #2
 8001b28:	6011      	str	r1, [r2, #0]
 8001b2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b2e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	fa92 f1a2 	rbit	r1, r2
 8001b38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b3c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001b40:	6011      	str	r1, [r2, #0]
  return result;
 8001b42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b46:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	fab2 f282 	clz	r2, r2
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f002 021f 	and.w	r2, r2, #31
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d084      	beq.n	8001a72 <HAL_RCC_OscConfig+0x9b6>
 8001b68:	e083      	b.n	8001c72 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7fe ff6b 	bl	8000a44 <HAL_GetTick>
 8001b6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7fe ff66 	bl	8000a44 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e2e4      	b.n	8002156 <HAL_RCC_OscConfig+0x109a>
 8001b8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b90:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001b94:	2202      	movs	r2, #2
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001baa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bb8:	2202      	movs	r2, #2
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001bd2:	601a      	str	r2, [r3, #0]
  return result;
 8001bd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001bdc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0xb44>
 8001bf2:	4b02      	ldr	r3, [pc, #8]	@ (8001bfc <HAL_RCC_OscConfig+0xb40>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	e017      	b.n	8001c28 <HAL_RCC_OscConfig+0xb6c>
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c04:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c08:	2202      	movs	r2, #2
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c10:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	4bb3      	ldr	r3, [pc, #716]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c2c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c30:	2102      	movs	r1, #2
 8001c32:	6011      	str	r1, [r2, #0]
 8001c34:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c38:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	fa92 f1a2 	rbit	r1, r2
 8001c42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c46:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001c4a:	6011      	str	r1, [r2, #0]
  return result;
 8001c4c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c50:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	fab2 f282 	clz	r2, r2
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f002 021f 	and.w	r2, r2, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d180      	bne.n	8001b74 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c72:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d105      	bne.n	8001c86 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a9d      	ldr	r2, [pc, #628]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001c80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 825e 	beq.w	8002154 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c98:	4b96      	ldr	r3, [pc, #600]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	f000 821f 	beq.w	80020e4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001caa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	f040 8170 	bne.w	8001f98 <HAL_RCC_OscConfig+0xedc>
 8001cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001cdc:	601a      	str	r2, [r3, #0]
  return result;
 8001cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ce6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cf2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7fe fea1 	bl	8000a44 <HAL_GetTick>
 8001d02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	e009      	b.n	8001d1c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d08:	f7fe fe9c 	bl	8000a44 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e21c      	b.n	8002156 <HAL_RCC_OscConfig+0x109a>
 8001d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d20:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fa93 f2a3 	rbit	r2, r3
 8001d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d40:	601a      	str	r2, [r3, #0]
  return result;
 8001d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d46:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_OscConfig+0xcaa>
 8001d60:	4b64      	ldr	r3, [pc, #400]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	e027      	b.n	8001db6 <HAL_RCC_OscConfig+0xcfa>
 8001d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001d6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d78:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fa93 f2a3 	rbit	r2, r3
 8001d82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d86:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001d94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	fa93 f2a3 	rbit	r2, r3
 8001da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dac:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	4b50      	ldr	r3, [pc, #320]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001dbe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001dc2:	6011      	str	r1, [r2, #0]
 8001dc4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dc8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	fa92 f1a2 	rbit	r1, r2
 8001dd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dd6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001dda:	6011      	str	r1, [r2, #0]
  return result;
 8001ddc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001de0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f042 0220 	orr.w	r2, r2, #32
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f002 021f 	and.w	r2, r2, #31
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d182      	bne.n	8001d08 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e02:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e06:	f023 020f 	bic.w	r2, r3, #15
 8001e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	4937      	ldr	r1, [pc, #220]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001e1c:	4b35      	ldr	r3, [pc, #212]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6a19      	ldr	r1, [r3, #32]
 8001e30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	492d      	ldr	r1, [pc, #180]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
 8001e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e48:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e56:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e64:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e68:	601a      	str	r2, [r3, #0]
  return result;
 8001e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e72:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e7e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	461a      	mov	r2, r3
 8001e86:	2301      	movs	r3, #1
 8001e88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fddb 	bl	8000a44 <HAL_GetTick>
 8001e8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e92:	e009      	b.n	8001ea8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7fe fdd6 	bl	8000a44 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e156      	b.n	8002156 <HAL_RCC_OscConfig+0x109a>
 8001ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eba:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ecc:	601a      	str	r2, [r3, #0]
  return result;
 8001ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ed6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xe3c>
 8001eec:	4b01      	ldr	r3, [pc, #4]	@ (8001ef4 <HAL_RCC_OscConfig+0xe38>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	e02a      	b.n	8001f48 <HAL_RCC_OscConfig+0xe8c>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	fa93 f2a3 	rbit	r2, r3
 8001f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f18:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f22:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f30:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	4b86      	ldr	r3, [pc, #536]	@ (8002160 <HAL_RCC_OscConfig+0x10a4>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f4c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f50:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f54:	6011      	str	r1, [r2, #0]
 8001f56:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f5a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	fa92 f1a2 	rbit	r1, r2
 8001f64:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f68:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001f6c:	6011      	str	r1, [r2, #0]
  return result;
 8001f6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f72:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	fab2 f282 	clz	r2, r2
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f002 021f 	and.w	r2, r2, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f43f af7f 	beq.w	8001e94 <HAL_RCC_OscConfig+0xdd8>
 8001f96:	e0dd      	b.n	8002154 <HAL_RCC_OscConfig+0x1098>
 8001f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001fa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001faa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001fbc:	601a      	str	r2, [r3, #0]
  return result;
 8001fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001fc6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fd2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2300      	movs	r3, #0
 8001fdc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7fe fd31 	bl	8000a44 <HAL_GetTick>
 8001fe2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	e009      	b.n	8001ffc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7fe fd2c 	bl	8000a44 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0ac      	b.n	8002156 <HAL_RCC_OscConfig+0x109a>
 8001ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002000:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002004:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002020:	601a      	str	r2, [r3, #0]
  return result;
 8002022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002026:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800202a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d102      	bne.n	8002046 <HAL_RCC_OscConfig+0xf8a>
 8002040:	4b47      	ldr	r3, [pc, #284]	@ (8002160 <HAL_RCC_OscConfig+0x10a4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	e027      	b.n	8002096 <HAL_RCC_OscConfig+0xfda>
 8002046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800204e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002058:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002066:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002070:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002074:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fa93 f2a3 	rbit	r2, r3
 8002088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <HAL_RCC_OscConfig+0x10a4>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800209a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800209e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020a2:	6011      	str	r1, [r2, #0]
 80020a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	fa92 f1a2 	rbit	r1, r2
 80020b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020b6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80020ba:	6011      	str	r1, [r2, #0]
  return result;
 80020bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020c0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	fab2 f282 	clz	r2, r2
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f042 0220 	orr.w	r2, r2, #32
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f002 021f 	and.w	r2, r2, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d182      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xf2c>
 80020e2:	e037      	b.n	8002154 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e02e      	b.n	8002156 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f8:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <HAL_RCC_OscConfig+0x10a4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <HAL_RCC_OscConfig+0x10a4>)
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002108:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800210c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002110:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002114:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	429a      	cmp	r2, r3
 800211e:	d117      	bne.n	8002150 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002120:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002124:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002134:	429a      	cmp	r2, r3
 8002136:	d10b      	bne.n	8002150 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800213c:	f003 020f 	and.w	r2, r3, #15
 8002140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002144:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b09e      	sub	sp, #120	@ 0x78
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e162      	b.n	8002442 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b90      	ldr	r3, [pc, #576]	@ (80023c0 <HAL_RCC_ClockConfig+0x25c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d910      	bls.n	80021ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b8d      	ldr	r3, [pc, #564]	@ (80023c0 <HAL_RCC_ClockConfig+0x25c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	498b      	ldr	r1, [pc, #556]	@ (80023c0 <HAL_RCC_ClockConfig+0x25c>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b89      	ldr	r3, [pc, #548]	@ (80023c0 <HAL_RCC_ClockConfig+0x25c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e14a      	b.n	8002442 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b82      	ldr	r3, [pc, #520]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	497f      	ldr	r1, [pc, #508]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80dc 	beq.w	8002390 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d13c      	bne.n	800225a <HAL_RCC_ClockConfig+0xf6>
 80021e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d102      	bne.n	800220a <HAL_RCC_ClockConfig+0xa6>
 8002204:	4b6f      	ldr	r3, [pc, #444]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	e00f      	b.n	800222a <HAL_RCC_ClockConfig+0xc6>
 800220a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800220e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	667b      	str	r3, [r7, #100]	@ 0x64
 8002218:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800221c:	663b      	str	r3, [r7, #96]	@ 0x60
 800221e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002226:	4b67      	ldr	r3, [pc, #412]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800222e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002232:	fa92 f2a2 	rbit	r2, r2
 8002236:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002238:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800223a:	fab2 f282 	clz	r2, r2
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	f042 0220 	orr.w	r2, r2, #32
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	f002 021f 	and.w	r2, r2, #31
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f202 	lsl.w	r2, r1, r2
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d17b      	bne.n	800234e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0f3      	b.n	8002442 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d13c      	bne.n	80022dc <HAL_RCC_ClockConfig+0x178>
 8002262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002266:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <HAL_RCC_ClockConfig+0x128>
 8002286:	4b4f      	ldr	r3, [pc, #316]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	e00f      	b.n	80022ac <HAL_RCC_ClockConfig+0x148>
 800228c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002290:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	647b      	str	r3, [r7, #68]	@ 0x44
 800229a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800229e:	643b      	str	r3, [r7, #64]	@ 0x40
 80022a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022a8:	4b46      	ldr	r3, [pc, #280]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022b0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80022b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022b4:	fa92 f2a2 	rbit	r2, r2
 80022b8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80022ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f042 0220 	orr.w	r2, r2, #32
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	f002 021f 	and.w	r2, r2, #31
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f202 	lsl.w	r2, r1, r2
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d13a      	bne.n	800234e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0b2      	b.n	8002442 <HAL_RCC_ClockConfig+0x2de>
 80022dc:	2302      	movs	r3, #2
 80022de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_ClockConfig+0x1a0>
 80022fe:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	e00d      	b.n	8002320 <HAL_RCC_ClockConfig+0x1bc>
 8002304:	2302      	movs	r3, #2
 8002306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002310:	2302      	movs	r3, #2
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	2202      	movs	r2, #2
 8002322:	61ba      	str	r2, [r7, #24]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	fa92 f2a2 	rbit	r2, r2
 800232a:	617a      	str	r2, [r7, #20]
  return result;
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	fab2 f282 	clz	r2, r2
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	f042 0220 	orr.w	r2, r2, #32
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f002 021f 	and.w	r2, r2, #31
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e079      	b.n	8002442 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234e:	4b1d      	ldr	r3, [pc, #116]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f023 0203 	bic.w	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	491a      	ldr	r1, [pc, #104]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002360:	f7fe fb70 	bl	8000a44 <HAL_GetTick>
 8002364:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	e00a      	b.n	800237e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002368:	f7fe fb6c 	bl	8000a44 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e061      	b.n	8002442 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 020c 	and.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	429a      	cmp	r2, r3
 800238e:	d1eb      	bne.n	8002368 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002390:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCC_ClockConfig+0x25c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d214      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <HAL_RCC_ClockConfig+0x25c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	4906      	ldr	r1, [pc, #24]	@ (80023c0 <HAL_RCC_ClockConfig+0x25c>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <HAL_RCC_ClockConfig+0x25c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e040      	b.n	8002442 <HAL_RCC_ClockConfig+0x2de>
 80023c0:	40022000 	.word	0x40022000
 80023c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <HAL_RCC_ClockConfig+0x2e8>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	491a      	ldr	r1, [pc, #104]	@ (800244c <HAL_RCC_ClockConfig+0x2e8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <HAL_RCC_ClockConfig+0x2e8>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4912      	ldr	r1, [pc, #72]	@ (800244c <HAL_RCC_ClockConfig+0x2e8>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002406:	f000 f829 	bl	800245c <HAL_RCC_GetSysClockFreq>
 800240a:	4601      	mov	r1, r0
 800240c:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_RCC_ClockConfig+0x2e8>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002414:	22f0      	movs	r2, #240	@ 0xf0
 8002416:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	fa92 f2a2 	rbit	r2, r2
 800241e:	60fa      	str	r2, [r7, #12]
  return result;
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	fab2 f282 	clz	r2, r2
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	40d3      	lsrs	r3, r2
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <HAL_RCC_ClockConfig+0x2ec>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	fa21 f303 	lsr.w	r3, r1, r3
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <HAL_RCC_ClockConfig+0x2f0>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <HAL_RCC_ClockConfig+0x2f4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fabe 	bl	80009bc <HAL_InitTick>
  
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3778      	adds	r7, #120	@ 0x78
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	08004e84 	.word	0x08004e84
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002476:	4b1f      	ldr	r3, [pc, #124]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b04      	cmp	r3, #4
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x30>
 8002486:	2b08      	cmp	r3, #8
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x36>
 800248a:	e029      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800248c:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800248e:	613b      	str	r3, [r7, #16]
      break;
 8002490:	e029      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	0c9b      	lsrs	r3, r3, #18
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	4a18      	ldr	r2, [pc, #96]	@ (80024fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	4a15      	ldr	r2, [pc, #84]	@ (8002500 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024b8:	4a0f      	ldr	r2, [pc, #60]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e007      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024ca:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	613b      	str	r3, [r7, #16]
      break;
 80024de:	e002      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e2:	613b      	str	r3, [r7, #16]
      break;
 80024e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e6:	693b      	ldr	r3, [r7, #16]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	08004e9c 	.word	0x08004e9c
 8002500:	08004eac 	.word	0x08004eac

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	@ (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000000 	.word	0x20000000

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002522:	f7ff ffef 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002526:	4601      	mov	r1, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002530:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002534:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	fa92 f2a2 	rbit	r2, r2
 800253c:	603a      	str	r2, [r7, #0]
  return result;
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	40d3      	lsrs	r3, r2
 8002548:	4a04      	ldr	r2, [pc, #16]	@ (800255c <HAL_RCC_GetPCLK1Freq+0x40>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	08004e94 	.word	0x08004e94

08002560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002566:	f7ff ffcd 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 800256a:	4601      	mov	r1, r0
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002574:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002578:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	fa92 f2a2 	rbit	r2, r2
 8002580:	603a      	str	r2, [r7, #0]
  return result;
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	fab2 f282 	clz	r2, r2
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	40d3      	lsrs	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08004e94 	.word	0x08004e94

080025a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b092      	sub	sp, #72	@ 0x48
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80d4 	beq.w	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10e      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025de:	61d3      	str	r3, [r2, #28]
 80025e0:	4b48      	ldr	r3, [pc, #288]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b45      	ldr	r3, [pc, #276]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d118      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b42      	ldr	r3, [pc, #264]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a41      	ldr	r2, [pc, #260]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002608:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7fe fa1b 	bl	8000a44 <HAL_GetTick>
 800260e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e008      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7fe fa17 	bl	8000a44 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b64      	cmp	r3, #100	@ 0x64
 800261e:	d901      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1d6      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b38      	ldr	r3, [pc, #224]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002630:	4b34      	ldr	r3, [pc, #208]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002638:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800263a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8084 	beq.w	800274a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800264a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800264c:	429a      	cmp	r2, r3
 800264e:	d07c      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002650:	4b2c      	ldr	r3, [pc, #176]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800265a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	4b26      	ldr	r3, [pc, #152]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	461a      	mov	r2, r3
 800267a:	2301      	movs	r3, #1
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002682:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800268c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	461a      	mov	r2, r3
 800269e:	2300      	movs	r3, #0
 80026a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026a2:	4a18      	ldr	r2, [pc, #96]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d04b      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe f9c7 	bl	8000a44 <HAL_GetTick>
 80026b6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe f9c3 	bl	8000a44 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e180      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026d0:	2302      	movs	r3, #2
 80026d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
 80026dc:	2302      	movs	r3, #2
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	61fb      	str	r3, [r7, #28]
  return result;
 80026e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d108      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80026fe:	4b01      	ldr	r3, [pc, #4]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	e00d      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002704:	40021000 	.word	0x40021000
 8002708:	40007000 	.word	0x40007000
 800270c:	10908100 	.word	0x10908100
 8002710:	2302      	movs	r3, #2
 8002712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	4b9a      	ldr	r3, [pc, #616]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	2202      	movs	r2, #2
 8002722:	613a      	str	r2, [r7, #16]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	fa92 f2a2 	rbit	r2, r2
 800272a:	60fa      	str	r2, [r7, #12]
  return result;
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0b7      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800274a:	4b8f      	ldr	r3, [pc, #572]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	498c      	ldr	r1, [pc, #560]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800275c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002764:	4b88      	ldr	r3, [pc, #544]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	4a87      	ldr	r2, [pc, #540]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800276e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800277c:	4b82      	ldr	r3, [pc, #520]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002780:	f023 0203 	bic.w	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	497f      	ldr	r1, [pc, #508]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800279a:	4b7b      	ldr	r3, [pc, #492]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	4978      	ldr	r1, [pc, #480]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027b8:	4b73      	ldr	r3, [pc, #460]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4970      	ldr	r1, [pc, #448]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f023 0210 	bic.w	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4969      	ldr	r1, [pc, #420]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027f4:	4b64      	ldr	r3, [pc, #400]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002800:	4961      	ldr	r1, [pc, #388]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002812:	4b5d      	ldr	r3, [pc, #372]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f023 0220 	bic.w	r2, r3, #32
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	495a      	ldr	r1, [pc, #360]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002830:	4b55      	ldr	r3, [pc, #340]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002834:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	4952      	ldr	r1, [pc, #328]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800284e:	4b4e      	ldr	r3, [pc, #312]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	494b      	ldr	r1, [pc, #300]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800286c:	4b46      	ldr	r3, [pc, #280]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4943      	ldr	r1, [pc, #268]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800288a:	4b3f      	ldr	r3, [pc, #252]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	493c      	ldr	r1, [pc, #240]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028a8:	4b37      	ldr	r3, [pc, #220]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	4934      	ldr	r1, [pc, #208]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028c6:	4b30      	ldr	r3, [pc, #192]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d2:	492d      	ldr	r1, [pc, #180]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028e4:	4b28      	ldr	r3, [pc, #160]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f0:	4925      	ldr	r1, [pc, #148]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002902:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	491e      	ldr	r1, [pc, #120]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002920:	4b19      	ldr	r3, [pc, #100]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002924:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292c:	4916      	ldr	r1, [pc, #88]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800293e:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294a:	490f      	ldr	r1, [pc, #60]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800295c:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002960:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	4907      	ldr	r1, [pc, #28]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00c      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800297a:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	e002      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800298e:	4913      	ldr	r1, [pc, #76]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002990:	4313      	orrs	r3, r2
 8002992:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80029a0:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ac:	490b      	ldr	r1, [pc, #44]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ca:	4904      	ldr	r1, [pc, #16]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3748      	adds	r7, #72	@ 0x48
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e09d      	b.n	8002b2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d108      	bne.n	8002a0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a02:	d009      	beq.n	8002a18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
 8002a0a:	e005      	b.n	8002a18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fd fe62 	bl	80006fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a58:	d902      	bls.n	8002a60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e002      	b.n	8002a66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002a6e:	d007      	beq.n	8002a80 <HAL_SPI_Init+0xa0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac2:	ea42 0103 	orr.w	r1, r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	0c1b      	lsrs	r3, r3, #16
 8002adc:	f003 0204 	and.w	r2, r3, #4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002afc:	ea42 0103 	orr.w	r1, r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b088      	sub	sp, #32
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_SPI_Transmit+0x22>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e15f      	b.n	8002e18 <HAL_SPI_Transmit+0x2e2>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b60:	f7fd ff70 	bl	8000a44 <HAL_GetTick>
 8002b64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d002      	beq.n	8002b7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
 8002b78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b7a:	e148      	b.n	8002e0e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_SPI_Transmit+0x52>
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b8c:	e13f      	b.n	8002e0e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bd8:	d10f      	bne.n	8002bfa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c04:	2b40      	cmp	r3, #64	@ 0x40
 8002c06:	d007      	beq.n	8002c18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c20:	d94f      	bls.n	8002cc2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Transmit+0xfa>
 8002c2a:	8afb      	ldrh	r3, [r7, #22]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d142      	bne.n	8002cb6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c34:	881a      	ldrh	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c40:	1c9a      	adds	r2, r3, #2
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c54:	e02f      	b.n	8002cb6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d112      	bne.n	8002c8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c74:	1c9a      	adds	r2, r3, #2
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c88:	e015      	b.n	8002cb6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c8a:	f7fd fedb 	bl	8000a44 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d803      	bhi.n	8002ca2 <HAL_SPI_Transmit+0x16c>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d102      	bne.n	8002ca8 <HAL_SPI_Transmit+0x172>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002cb4:	e0ab      	b.n	8002e0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ca      	bne.n	8002c56 <HAL_SPI_Transmit+0x120>
 8002cc0:	e080      	b.n	8002dc4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_SPI_Transmit+0x19a>
 8002cca:	8afb      	ldrh	r3, [r7, #22]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d174      	bne.n	8002dba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d912      	bls.n	8002d00 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cea:	1c9a      	adds	r2, r3, #2
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b02      	subs	r3, #2
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cfe:	e05c      	b.n	8002dba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d26:	e048      	b.n	8002dba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d12b      	bne.n	8002d8e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d912      	bls.n	8002d66 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	881a      	ldrh	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d50:	1c9a      	adds	r2, r3, #2
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b02      	subs	r3, #2
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d64:	e029      	b.n	8002dba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	7812      	ldrb	r2, [r2, #0]
 8002d72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d8c:	e015      	b.n	8002dba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d8e:	f7fd fe59 	bl	8000a44 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d803      	bhi.n	8002da6 <HAL_SPI_Transmit+0x270>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d102      	bne.n	8002dac <HAL_SPI_Transmit+0x276>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002db8:	e029      	b.n	8002e0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1b1      	bne.n	8002d28 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fa5b 	bl	8003284 <SPI_EndRxTxTransaction>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e003      	b.n	8002e0e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10e      	bne.n	8002e60 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
    return;
 8002e5e:	e0ce      	b.n	8002ffe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_SPI_IRQHandler+0x5e>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
    return;
 8002e7c:	e0bf      	b.n	8002ffe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <HAL_SPI_IRQHandler+0x7e>
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80b0 	beq.w	8002ffe <HAL_SPI_IRQHandler+0x1de>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80aa 	beq.w	8002ffe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d023      	beq.n	8002efc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d011      	beq.n	8002ee4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	e00b      	b.n	8002efc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
        return;
 8002efa:	e080      	b.n	8002ffe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d014      	beq.n	8002f30 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f3e:	f043 0208 	orr.w	r2, r3, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d04f      	beq.n	8002ffc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f6a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <HAL_SPI_IRQHandler+0x168>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d034      	beq.n	8002ff2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0203 	bic.w	r2, r2, #3
 8002f96:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d011      	beq.n	8002fc4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa4:	4a17      	ldr	r2, [pc, #92]	@ (8003004 <HAL_SPI_IRQHandler+0x1e4>)
 8002fa6:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fea4 	bl	8000cfa <HAL_DMA_Abort_IT>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d016      	beq.n	8002ffa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003004 <HAL_SPI_IRQHandler+0x1e4>)
 8002fd2:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fe8e 	bl	8000cfa <HAL_DMA_Abort_IT>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002ff0:	e003      	b.n	8002ffa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f808 	bl	8003008 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ff8:	e000      	b.n	8002ffc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002ffa:	bf00      	nop
    return;
 8002ffc:	bf00      	nop
  }
}
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	0800301d 	.word	0x0800301d

08003008 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff ffe5 	bl	8003008 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003058:	f7fd fcf4 	bl	8000a44 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	4413      	add	r3, r2
 8003066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003068:	f7fd fcec 	bl	8000a44 <HAL_GetTick>
 800306c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800306e:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	015b      	lsls	r3, r3, #5
 8003074:	0d1b      	lsrs	r3, r3, #20
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800307e:	e054      	b.n	800312a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d050      	beq.n	800312a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003088:	f7fd fcdc 	bl	8000a44 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	429a      	cmp	r2, r3
 8003096:	d902      	bls.n	800309e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d13d      	bne.n	800311a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b6:	d111      	bne.n	80030dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c0:	d004      	beq.n	80030cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ca:	d107      	bne.n	80030dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e4:	d10f      	bne.n	8003106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e017      	b.n	800314a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3b01      	subs	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	429a      	cmp	r2, r3
 8003146:	d19b      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000000 	.word	0x20000000

08003158 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	@ 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800316a:	f7fd fc6b 	bl	8000a44 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	4413      	add	r3, r2
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800317a:	f7fd fc63 	bl	8000a44 <HAL_GetTick>
 800317e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003188:	4b3d      	ldr	r3, [pc, #244]	@ (8003280 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00da      	lsls	r2, r3, #3
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	0d1b      	lsrs	r3, r3, #20
 8003198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031a0:	e060      	b.n	8003264 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80031a8:	d107      	bne.n	80031ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d104      	bne.n	80031ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d050      	beq.n	8003264 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031c2:	f7fd fc3f 	bl	8000a44 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d902      	bls.n	80031d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d13d      	bne.n	8003254 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031f0:	d111      	bne.n	8003216 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031fa:	d004      	beq.n	8003206 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003204:	d107      	bne.n	8003216 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003214:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321e:	d10f      	bne.n	8003240 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800323e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e010      	b.n	8003276 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	3b01      	subs	r3, #1
 8003262:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4013      	ands	r3, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d196      	bne.n	80031a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3728      	adds	r7, #40	@ 0x28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000000 	.word	0x20000000

08003284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff ff5b 	bl	8003158 <SPI_WaitFifoStateUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e027      	b.n	8003308 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2200      	movs	r2, #0
 80032c0:	2180      	movs	r1, #128	@ 0x80
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff fec0 	bl	8003048 <SPI_WaitFlagStateUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e014      	b.n	8003308 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff ff34 	bl	8003158 <SPI_WaitFifoStateUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e000      	b.n	8003308 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e040      	b.n	80033a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fa2c 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	@ 0x24
 800333c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fe54 	bl	8004004 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fc7d 	bl	8003c5c <UART_SetConfig>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e01b      	b.n	80033a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800337a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800338a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fed3 	bl	8004148 <UART_CheckIdleState>
 80033a2:	4603      	mov	r3, r0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d177      	bne.n	80034b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_UART_Transmit+0x24>
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e070      	b.n	80034b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2221      	movs	r2, #33	@ 0x21
 80033e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033e2:	f7fd fb2f 	bl	8000a44 <HAL_GetTick>
 80033e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003400:	d108      	bne.n	8003414 <HAL_UART_Transmit+0x68>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e003      	b.n	800341c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800341c:	e02f      	b.n	800347e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	2180      	movs	r1, #128	@ 0x80
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 ff35 	bl	8004298 <UART_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e03b      	b.n	80034b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	881a      	ldrh	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003450:	b292      	uxth	r2, r2
 8003452:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	3302      	adds	r3, #2
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e007      	b.n	800346c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3301      	adds	r3, #1
 800346a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1c9      	bne.n	800341e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2200      	movs	r2, #0
 8003492:	2140      	movs	r1, #64	@ 0x40
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 feff 	bl	8004298 <UART_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e005      	b.n	80034b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b08a      	sub	sp, #40	@ 0x28
 80034c2:	af02      	add	r7, sp, #8
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	f040 80b6 	bne.w	8003646 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_UART_Receive+0x28>
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0ae      	b.n	8003648 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2222      	movs	r2, #34	@ 0x22
 80034f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003500:	f7fd faa0 	bl	8000a44 <HAL_GetTick>
 8003504:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351e:	d10e      	bne.n	800353e <HAL_UART_Receive+0x80>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_UART_Receive+0x76>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800352e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003532:	e02d      	b.n	8003590 <HAL_UART_Receive+0xd2>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	22ff      	movs	r2, #255	@ 0xff
 8003538:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800353c:	e028      	b.n	8003590 <HAL_UART_Receive+0xd2>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_UART_Receive+0xa4>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <HAL_UART_Receive+0x9a>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	22ff      	movs	r2, #255	@ 0xff
 8003552:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003556:	e01b      	b.n	8003590 <HAL_UART_Receive+0xd2>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	227f      	movs	r2, #127	@ 0x7f
 800355c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003560:	e016      	b.n	8003590 <HAL_UART_Receive+0xd2>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800356a:	d10d      	bne.n	8003588 <HAL_UART_Receive+0xca>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <HAL_UART_Receive+0xc0>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	227f      	movs	r2, #127	@ 0x7f
 8003578:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800357c:	e008      	b.n	8003590 <HAL_UART_Receive+0xd2>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	223f      	movs	r2, #63	@ 0x3f
 8003582:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003586:	e003      	b.n	8003590 <HAL_UART_Receive+0xd2>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003596:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a0:	d108      	bne.n	80035b4 <HAL_UART_Receive+0xf6>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e003      	b.n	80035bc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80035bc:	e037      	b.n	800362e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2120      	movs	r1, #32
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fe65 	bl	8004298 <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e033      	b.n	8003648 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	8a7b      	ldrh	r3, [r7, #18]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	3302      	adds	r3, #2
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e00d      	b.n	800361c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003606:	b29b      	uxth	r3, r3
 8003608:	b2da      	uxtb	r2, r3
 800360a:	8a7b      	ldrh	r3, [r7, #18]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	4013      	ands	r3, r2
 8003610:	b2da      	uxtb	r2, r3
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1c1      	bne.n	80035be <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b0ba      	sub	sp, #232	@ 0xe8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003676:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800367a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800367e:	4013      	ands	r3, r2
 8003680:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d115      	bne.n	80036b8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800368c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00f      	beq.n	80036b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 82ab 	beq.w	8003c04 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
      }
      return;
 80036b6:	e2a5      	b.n	8003c04 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8117 	beq.w	80038f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036d2:	4b85      	ldr	r3, [pc, #532]	@ (80038e8 <HAL_UART_IRQHandler+0x298>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 810a 	beq.w	80038f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d011      	beq.n	800370c <HAL_UART_IRQHandler+0xbc>
 80036e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2201      	movs	r2, #1
 80036fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003702:	f043 0201 	orr.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800370c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d011      	beq.n	800373c <HAL_UART_IRQHandler+0xec>
 8003718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2202      	movs	r2, #2
 800372a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003732:	f043 0204 	orr.w	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d011      	beq.n	800376c <HAL_UART_IRQHandler+0x11c>
 8003748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2204      	movs	r2, #4
 800375a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003762:	f043 0202 	orr.w	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d017      	beq.n	80037a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003788:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2208      	movs	r2, #8
 8003796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800379e:	f043 0208 	orr.w	r2, r3, #8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d012      	beq.n	80037da <HAL_UART_IRQHandler+0x18a>
 80037b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8211 	beq.w	8003c08 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003814:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003822:	2b40      	cmp	r3, #64	@ 0x40
 8003824:	d005      	beq.n	8003832 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800382a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800382e:	2b00      	cmp	r3, #0
 8003830:	d04f      	beq.n	80038d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fd9d 	bl	8004372 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d141      	bne.n	80038ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3308      	adds	r3, #8
 800384c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800385c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3308      	adds	r3, #8
 800386e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003872:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800387e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800388a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1d9      	bne.n	8003846 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003896:	2b00      	cmp	r3, #0
 8003898:	d013      	beq.n	80038c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800389e:	4a13      	ldr	r2, [pc, #76]	@ (80038ec <HAL_UART_IRQHandler+0x29c>)
 80038a0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fa27 	bl	8000cfa <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d017      	beq.n	80038e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00f      	b.n	80038e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f9b4 	bl	8003c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e00b      	b.n	80038e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f9b0 	bl	8003c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e007      	b.n	80038e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f9ac 	bl	8003c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80038e0:	e192      	b.n	8003c08 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	bf00      	nop
    return;
 80038e4:	e190      	b.n	8003c08 <HAL_UART_IRQHandler+0x5b8>
 80038e6:	bf00      	nop
 80038e8:	04000120 	.word	0x04000120
 80038ec:	0800443b 	.word	0x0800443b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	f040 814b 	bne.w	8003b90 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8144 	beq.w	8003b90 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 813d 	beq.w	8003b90 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2210      	movs	r2, #16
 800391c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003928:	2b40      	cmp	r3, #64	@ 0x40
 800392a:	f040 80b5 	bne.w	8003a98 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800393a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8164 	beq.w	8003c0c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800394a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800394e:	429a      	cmp	r2, r3
 8003950:	f080 815c 	bcs.w	8003c0c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800395a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b20      	cmp	r3, #32
 8003966:	f000 8086 	beq.w	8003a76 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800397e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003982:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003994:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003998:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1da      	bne.n	800396a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e1      	bne.n	80039b4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3308      	adds	r3, #8
 80039f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3308      	adds	r3, #8
 8003a10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a14:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a1a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e3      	bne.n	80039f0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a46:	f023 0310 	bic.w	r3, r3, #16
 8003a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a5a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e4      	bne.n	8003a36 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fd f904 	bl	8000c7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f8d7 	bl	8003c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a96:	e0b9      	b.n	8003c0c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80ab 	beq.w	8003c10 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003aba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a6 	beq.w	8003c10 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e4      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3308      	adds	r3, #8
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	623b      	str	r3, [r7, #32]
   return(result);
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e3      	bne.n	8003afa <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0310 	bic.w	r3, r3, #16
 8003b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	617b      	str	r3, [r7, #20]
   return(result);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e4      	bne.n	8003b46 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f85b 	bl	8003c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b8e:	e03f      	b.n	8003c10 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00e      	beq.n	8003bba <HAL_UART_IRQHandler+0x56a>
 8003b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003bb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fc81 	bl	80044ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bb8:	e02d      	b.n	8003c16 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01c      	beq.n	8003c14 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
    }
    return;
 8003be2:	e017      	b.n	8003c14 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d012      	beq.n	8003c16 <HAL_UART_IRQHandler+0x5c6>
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00c      	beq.n	8003c16 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fc32 	bl	8004466 <UART_EndTransmit_IT>
    return;
 8003c02:	e008      	b.n	8003c16 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c04:	bf00      	nop
 8003c06:	e006      	b.n	8003c16 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c08:	bf00      	nop
 8003c0a:	e004      	b.n	8003c16 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c0c:	bf00      	nop
 8003c0e:	e002      	b.n	8003c16 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c14:	bf00      	nop
  }

}
 8003c16:	37e8      	adds	r7, #232	@ 0xe8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b92      	ldr	r3, [pc, #584]	@ (8003ed0 <UART_SetConfig+0x274>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	6979      	ldr	r1, [r7, #20]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a80      	ldr	r2, [pc, #512]	@ (8003ed4 <UART_SetConfig+0x278>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d120      	bne.n	8003d1a <UART_SetConfig+0xbe>
 8003cd8:	4b7f      	ldr	r3, [pc, #508]	@ (8003ed8 <UART_SetConfig+0x27c>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d817      	bhi.n	8003d14 <UART_SetConfig+0xb8>
 8003ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cec <UART_SetConfig+0x90>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d09 	.word	0x08003d09
 8003cf4:	08003d0f 	.word	0x08003d0f
 8003cf8:	08003d03 	.word	0x08003d03
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e0b5      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d02:	2302      	movs	r3, #2
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e0b2      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e0af      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e0ac      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d14:	2310      	movs	r3, #16
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e0a9      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8003edc <UART_SetConfig+0x280>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d124      	bne.n	8003d6e <UART_SetConfig+0x112>
 8003d24:	4b6c      	ldr	r3, [pc, #432]	@ (8003ed8 <UART_SetConfig+0x27c>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d30:	d011      	beq.n	8003d56 <UART_SetConfig+0xfa>
 8003d32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d36:	d817      	bhi.n	8003d68 <UART_SetConfig+0x10c>
 8003d38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d3c:	d011      	beq.n	8003d62 <UART_SetConfig+0x106>
 8003d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d42:	d811      	bhi.n	8003d68 <UART_SetConfig+0x10c>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <UART_SetConfig+0xf4>
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4c:	d006      	beq.n	8003d5c <UART_SetConfig+0x100>
 8003d4e:	e00b      	b.n	8003d68 <UART_SetConfig+0x10c>
 8003d50:	2300      	movs	r3, #0
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e08b      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d56:	2302      	movs	r3, #2
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e088      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e085      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d62:	2308      	movs	r3, #8
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e082      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e07f      	b.n	8003e6e <UART_SetConfig+0x212>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a5b      	ldr	r2, [pc, #364]	@ (8003ee0 <UART_SetConfig+0x284>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d124      	bne.n	8003dc2 <UART_SetConfig+0x166>
 8003d78:	4b57      	ldr	r3, [pc, #348]	@ (8003ed8 <UART_SetConfig+0x27c>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d80:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d84:	d011      	beq.n	8003daa <UART_SetConfig+0x14e>
 8003d86:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d8a:	d817      	bhi.n	8003dbc <UART_SetConfig+0x160>
 8003d8c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d90:	d011      	beq.n	8003db6 <UART_SetConfig+0x15a>
 8003d92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d96:	d811      	bhi.n	8003dbc <UART_SetConfig+0x160>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <UART_SetConfig+0x148>
 8003d9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003da0:	d006      	beq.n	8003db0 <UART_SetConfig+0x154>
 8003da2:	e00b      	b.n	8003dbc <UART_SetConfig+0x160>
 8003da4:	2300      	movs	r3, #0
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e061      	b.n	8003e6e <UART_SetConfig+0x212>
 8003daa:	2302      	movs	r3, #2
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e05e      	b.n	8003e6e <UART_SetConfig+0x212>
 8003db0:	2304      	movs	r3, #4
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e05b      	b.n	8003e6e <UART_SetConfig+0x212>
 8003db6:	2308      	movs	r3, #8
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e058      	b.n	8003e6e <UART_SetConfig+0x212>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e055      	b.n	8003e6e <UART_SetConfig+0x212>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a47      	ldr	r2, [pc, #284]	@ (8003ee4 <UART_SetConfig+0x288>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d124      	bne.n	8003e16 <UART_SetConfig+0x1ba>
 8003dcc:	4b42      	ldr	r3, [pc, #264]	@ (8003ed8 <UART_SetConfig+0x27c>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003dd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dd8:	d011      	beq.n	8003dfe <UART_SetConfig+0x1a2>
 8003dda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dde:	d817      	bhi.n	8003e10 <UART_SetConfig+0x1b4>
 8003de0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003de4:	d011      	beq.n	8003e0a <UART_SetConfig+0x1ae>
 8003de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dea:	d811      	bhi.n	8003e10 <UART_SetConfig+0x1b4>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <UART_SetConfig+0x19c>
 8003df0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df4:	d006      	beq.n	8003e04 <UART_SetConfig+0x1a8>
 8003df6:	e00b      	b.n	8003e10 <UART_SetConfig+0x1b4>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e037      	b.n	8003e6e <UART_SetConfig+0x212>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e034      	b.n	8003e6e <UART_SetConfig+0x212>
 8003e04:	2304      	movs	r3, #4
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e031      	b.n	8003e6e <UART_SetConfig+0x212>
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e02e      	b.n	8003e6e <UART_SetConfig+0x212>
 8003e10:	2310      	movs	r3, #16
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e02b      	b.n	8003e6e <UART_SetConfig+0x212>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a33      	ldr	r2, [pc, #204]	@ (8003ee8 <UART_SetConfig+0x28c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d124      	bne.n	8003e6a <UART_SetConfig+0x20e>
 8003e20:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed8 <UART_SetConfig+0x27c>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e2c:	d011      	beq.n	8003e52 <UART_SetConfig+0x1f6>
 8003e2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e32:	d817      	bhi.n	8003e64 <UART_SetConfig+0x208>
 8003e34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e38:	d011      	beq.n	8003e5e <UART_SetConfig+0x202>
 8003e3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e3e:	d811      	bhi.n	8003e64 <UART_SetConfig+0x208>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <UART_SetConfig+0x1f0>
 8003e44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e48:	d006      	beq.n	8003e58 <UART_SetConfig+0x1fc>
 8003e4a:	e00b      	b.n	8003e64 <UART_SetConfig+0x208>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e00d      	b.n	8003e6e <UART_SetConfig+0x212>
 8003e52:	2302      	movs	r3, #2
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e00a      	b.n	8003e6e <UART_SetConfig+0x212>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e007      	b.n	8003e6e <UART_SetConfig+0x212>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e004      	b.n	8003e6e <UART_SetConfig+0x212>
 8003e64:	2310      	movs	r3, #16
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e001      	b.n	8003e6e <UART_SetConfig+0x212>
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e76:	d16b      	bne.n	8003f50 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003e78:	7ffb      	ldrb	r3, [r7, #31]
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d838      	bhi.n	8003ef0 <UART_SetConfig+0x294>
 8003e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e84 <UART_SetConfig+0x228>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003ea9 	.word	0x08003ea9
 8003e88:	08003eb1 	.word	0x08003eb1
 8003e8c:	08003eb9 	.word	0x08003eb9
 8003e90:	08003ef1 	.word	0x08003ef1
 8003e94:	08003ebf 	.word	0x08003ebf
 8003e98:	08003ef1 	.word	0x08003ef1
 8003e9c:	08003ef1 	.word	0x08003ef1
 8003ea0:	08003ef1 	.word	0x08003ef1
 8003ea4:	08003ec7 	.word	0x08003ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f7fe fb38 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003eac:	61b8      	str	r0, [r7, #24]
        break;
 8003eae:	e024      	b.n	8003efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eb0:	f7fe fb56 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 8003eb4:	61b8      	str	r0, [r7, #24]
        break;
 8003eb6:	e020      	b.n	8003efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <UART_SetConfig+0x290>)
 8003eba:	61bb      	str	r3, [r7, #24]
        break;
 8003ebc:	e01d      	b.n	8003efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ebe:	f7fe facd 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003ec2:	61b8      	str	r0, [r7, #24]
        break;
 8003ec4:	e019      	b.n	8003efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eca:	61bb      	str	r3, [r7, #24]
        break;
 8003ecc:	e015      	b.n	8003efa <UART_SetConfig+0x29e>
 8003ece:	bf00      	nop
 8003ed0:	efff69f3 	.word	0xefff69f3
 8003ed4:	40013800 	.word	0x40013800
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40004400 	.word	0x40004400
 8003ee0:	40004800 	.word	0x40004800
 8003ee4:	40004c00 	.word	0x40004c00
 8003ee8:	40005000 	.word	0x40005000
 8003eec:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	77bb      	strb	r3, [r7, #30]
        break;
 8003ef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d073      	beq.n	8003fe8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	005a      	lsls	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b0f      	cmp	r3, #15
 8003f1a:	d916      	bls.n	8003f4a <UART_SetConfig+0x2ee>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f22:	d212      	bcs.n	8003f4a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f023 030f 	bic.w	r3, r3, #15
 8003f2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	89fa      	ldrh	r2, [r7, #14]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	e04e      	b.n	8003fe8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	77bb      	strb	r3, [r7, #30]
 8003f4e:	e04b      	b.n	8003fe8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d827      	bhi.n	8003fa6 <UART_SetConfig+0x34a>
 8003f56:	a201      	add	r2, pc, #4	@ (adr r2, 8003f5c <UART_SetConfig+0x300>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f81 	.word	0x08003f81
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	08003f91 	.word	0x08003f91
 8003f68:	08003fa7 	.word	0x08003fa7
 8003f6c:	08003f97 	.word	0x08003f97
 8003f70:	08003fa7 	.word	0x08003fa7
 8003f74:	08003fa7 	.word	0x08003fa7
 8003f78:	08003fa7 	.word	0x08003fa7
 8003f7c:	08003f9f 	.word	0x08003f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f80:	f7fe facc 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003f84:	61b8      	str	r0, [r7, #24]
        break;
 8003f86:	e013      	b.n	8003fb0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7fe faea 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	61b8      	str	r0, [r7, #24]
        break;
 8003f8e:	e00f      	b.n	8003fb0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f90:	4b1b      	ldr	r3, [pc, #108]	@ (8004000 <UART_SetConfig+0x3a4>)
 8003f92:	61bb      	str	r3, [r7, #24]
        break;
 8003f94:	e00c      	b.n	8003fb0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f96:	f7fe fa61 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003f9a:	61b8      	str	r0, [r7, #24]
        break;
 8003f9c:	e008      	b.n	8003fb0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fa2:	61bb      	str	r3, [r7, #24]
        break;
 8003fa4:	e004      	b.n	8003fb0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	77bb      	strb	r3, [r7, #30]
        break;
 8003fae:	bf00      	nop
    }

    if (pclk != 0U)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d018      	beq.n	8003fe8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	085a      	lsrs	r2, r3, #1
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	441a      	add	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b0f      	cmp	r3, #15
 8003fce:	d909      	bls.n	8003fe4 <UART_SetConfig+0x388>
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd6:	d205      	bcs.n	8003fe4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	e001      	b.n	8003fe8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ff4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	007a1200 	.word	0x007a1200

08004004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01a      	beq.n	800411a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004102:	d10a      	bne.n	800411a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b098      	sub	sp, #96	@ 0x60
 800414c:	af02      	add	r7, sp, #8
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004158:	f7fc fc74 	bl	8000a44 <HAL_GetTick>
 800415c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d12e      	bne.n	80041ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004174:	2200      	movs	r2, #0
 8004176:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f88c 	bl	8004298 <UART_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d021      	beq.n	80041ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419a:	653b      	str	r3, [r7, #80]	@ 0x50
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e6      	bne.n	8004186 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e062      	b.n	8004290 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d149      	bne.n	800426c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e0:	2200      	movs	r2, #0
 80041e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f856 	bl	8004298 <UART_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d03c      	beq.n	800426c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
 8004212:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e6      	bne.n	80041f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3308      	adds	r3, #8
 800422a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	60fb      	str	r3, [r7, #12]
   return(result);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3308      	adds	r3, #8
 8004242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004244:	61fa      	str	r2, [r7, #28]
 8004246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	617b      	str	r3, [r7, #20]
   return(result);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e5      	bne.n	8004224 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e011      	b.n	8004290 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3758      	adds	r7, #88	@ 0x58
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a8:	e04f      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d04b      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b2:	f7fc fbc7 	bl	8000a44 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e04e      	b.n	800436a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d037      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b80      	cmp	r3, #128	@ 0x80
 80042de:	d034      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b40      	cmp	r3, #64	@ 0x40
 80042e4:	d031      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d110      	bne.n	8004316 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2208      	movs	r2, #8
 80042fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f838 	bl	8004372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2208      	movs	r2, #8
 8004306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e029      	b.n	800436a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004324:	d111      	bne.n	800434a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800432e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f81e 	bl	8004372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e00f      	b.n	800436a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4013      	ands	r3, r2
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	429a      	cmp	r2, r3
 8004358:	bf0c      	ite	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	2300      	movne	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	429a      	cmp	r2, r3
 8004366:	d0a0      	beq.n	80042aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004372:	b480      	push	{r7}
 8004374:	b095      	sub	sp, #84	@ 0x54
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800438e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004398:	643b      	str	r3, [r7, #64]	@ 0x40
 800439a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800439e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e6      	bne.n	800437a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3308      	adds	r3, #8
 80043b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d118      	bne.n	800441a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	613b      	str	r3, [r7, #16]
   return(result);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e6      	bne.n	80043e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800442e:	bf00      	nop
 8004430:	3754      	adds	r7, #84	@ 0x54
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff fbe9 	bl	8003c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b088      	sub	sp, #32
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	60bb      	str	r3, [r7, #8]
   return(result);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004482:	61fb      	str	r3, [r7, #28]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6979      	ldr	r1, [r7, #20]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	613b      	str	r3, [r7, #16]
   return(result);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e6      	bne.n	800446e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fbb5 	bl	8003c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044b2:	bf00      	nop
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <siprintf>:
 80044d0:	b40e      	push	{r1, r2, r3}
 80044d2:	b500      	push	{lr}
 80044d4:	b09c      	sub	sp, #112	@ 0x70
 80044d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80044d8:	9002      	str	r0, [sp, #8]
 80044da:	9006      	str	r0, [sp, #24]
 80044dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044e0:	4809      	ldr	r0, [pc, #36]	@ (8004508 <siprintf+0x38>)
 80044e2:	9107      	str	r1, [sp, #28]
 80044e4:	9104      	str	r1, [sp, #16]
 80044e6:	4909      	ldr	r1, [pc, #36]	@ (800450c <siprintf+0x3c>)
 80044e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ec:	9105      	str	r1, [sp, #20]
 80044ee:	6800      	ldr	r0, [r0, #0]
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	a902      	add	r1, sp, #8
 80044f4:	f000 f994 	bl	8004820 <_svfiprintf_r>
 80044f8:	9b02      	ldr	r3, [sp, #8]
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	b01c      	add	sp, #112	@ 0x70
 8004500:	f85d eb04 	ldr.w	lr, [sp], #4
 8004504:	b003      	add	sp, #12
 8004506:	4770      	bx	lr
 8004508:	2000000c 	.word	0x2000000c
 800450c:	ffff0208 	.word	0xffff0208

08004510 <memset>:
 8004510:	4402      	add	r2, r0
 8004512:	4603      	mov	r3, r0
 8004514:	4293      	cmp	r3, r2
 8004516:	d100      	bne.n	800451a <memset+0xa>
 8004518:	4770      	bx	lr
 800451a:	f803 1b01 	strb.w	r1, [r3], #1
 800451e:	e7f9      	b.n	8004514 <memset+0x4>

08004520 <__errno>:
 8004520:	4b01      	ldr	r3, [pc, #4]	@ (8004528 <__errno+0x8>)
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	2000000c 	.word	0x2000000c

0800452c <__libc_init_array>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4d0d      	ldr	r5, [pc, #52]	@ (8004564 <__libc_init_array+0x38>)
 8004530:	4c0d      	ldr	r4, [pc, #52]	@ (8004568 <__libc_init_array+0x3c>)
 8004532:	1b64      	subs	r4, r4, r5
 8004534:	10a4      	asrs	r4, r4, #2
 8004536:	2600      	movs	r6, #0
 8004538:	42a6      	cmp	r6, r4
 800453a:	d109      	bne.n	8004550 <__libc_init_array+0x24>
 800453c:	4d0b      	ldr	r5, [pc, #44]	@ (800456c <__libc_init_array+0x40>)
 800453e:	4c0c      	ldr	r4, [pc, #48]	@ (8004570 <__libc_init_array+0x44>)
 8004540:	f000 fc66 	bl	8004e10 <_init>
 8004544:	1b64      	subs	r4, r4, r5
 8004546:	10a4      	asrs	r4, r4, #2
 8004548:	2600      	movs	r6, #0
 800454a:	42a6      	cmp	r6, r4
 800454c:	d105      	bne.n	800455a <__libc_init_array+0x2e>
 800454e:	bd70      	pop	{r4, r5, r6, pc}
 8004550:	f855 3b04 	ldr.w	r3, [r5], #4
 8004554:	4798      	blx	r3
 8004556:	3601      	adds	r6, #1
 8004558:	e7ee      	b.n	8004538 <__libc_init_array+0xc>
 800455a:	f855 3b04 	ldr.w	r3, [r5], #4
 800455e:	4798      	blx	r3
 8004560:	3601      	adds	r6, #1
 8004562:	e7f2      	b.n	800454a <__libc_init_array+0x1e>
 8004564:	08004ef8 	.word	0x08004ef8
 8004568:	08004ef8 	.word	0x08004ef8
 800456c:	08004ef8 	.word	0x08004ef8
 8004570:	08004efc 	.word	0x08004efc

08004574 <__retarget_lock_acquire_recursive>:
 8004574:	4770      	bx	lr

08004576 <__retarget_lock_release_recursive>:
 8004576:	4770      	bx	lr

08004578 <_free_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4605      	mov	r5, r0
 800457c:	2900      	cmp	r1, #0
 800457e:	d041      	beq.n	8004604 <_free_r+0x8c>
 8004580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004584:	1f0c      	subs	r4, r1, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	bfb8      	it	lt
 800458a:	18e4      	addlt	r4, r4, r3
 800458c:	f000 f8e0 	bl	8004750 <__malloc_lock>
 8004590:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <_free_r+0x90>)
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	b933      	cbnz	r3, 80045a4 <_free_r+0x2c>
 8004596:	6063      	str	r3, [r4, #4]
 8004598:	6014      	str	r4, [r2, #0]
 800459a:	4628      	mov	r0, r5
 800459c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045a0:	f000 b8dc 	b.w	800475c <__malloc_unlock>
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	d908      	bls.n	80045ba <_free_r+0x42>
 80045a8:	6820      	ldr	r0, [r4, #0]
 80045aa:	1821      	adds	r1, r4, r0
 80045ac:	428b      	cmp	r3, r1
 80045ae:	bf01      	itttt	eq
 80045b0:	6819      	ldreq	r1, [r3, #0]
 80045b2:	685b      	ldreq	r3, [r3, #4]
 80045b4:	1809      	addeq	r1, r1, r0
 80045b6:	6021      	streq	r1, [r4, #0]
 80045b8:	e7ed      	b.n	8004596 <_free_r+0x1e>
 80045ba:	461a      	mov	r2, r3
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	b10b      	cbz	r3, 80045c4 <_free_r+0x4c>
 80045c0:	42a3      	cmp	r3, r4
 80045c2:	d9fa      	bls.n	80045ba <_free_r+0x42>
 80045c4:	6811      	ldr	r1, [r2, #0]
 80045c6:	1850      	adds	r0, r2, r1
 80045c8:	42a0      	cmp	r0, r4
 80045ca:	d10b      	bne.n	80045e4 <_free_r+0x6c>
 80045cc:	6820      	ldr	r0, [r4, #0]
 80045ce:	4401      	add	r1, r0
 80045d0:	1850      	adds	r0, r2, r1
 80045d2:	4283      	cmp	r3, r0
 80045d4:	6011      	str	r1, [r2, #0]
 80045d6:	d1e0      	bne.n	800459a <_free_r+0x22>
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	6053      	str	r3, [r2, #4]
 80045de:	4408      	add	r0, r1
 80045e0:	6010      	str	r0, [r2, #0]
 80045e2:	e7da      	b.n	800459a <_free_r+0x22>
 80045e4:	d902      	bls.n	80045ec <_free_r+0x74>
 80045e6:	230c      	movs	r3, #12
 80045e8:	602b      	str	r3, [r5, #0]
 80045ea:	e7d6      	b.n	800459a <_free_r+0x22>
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	1821      	adds	r1, r4, r0
 80045f0:	428b      	cmp	r3, r1
 80045f2:	bf04      	itt	eq
 80045f4:	6819      	ldreq	r1, [r3, #0]
 80045f6:	685b      	ldreq	r3, [r3, #4]
 80045f8:	6063      	str	r3, [r4, #4]
 80045fa:	bf04      	itt	eq
 80045fc:	1809      	addeq	r1, r1, r0
 80045fe:	6021      	streq	r1, [r4, #0]
 8004600:	6054      	str	r4, [r2, #4]
 8004602:	e7ca      	b.n	800459a <_free_r+0x22>
 8004604:	bd38      	pop	{r3, r4, r5, pc}
 8004606:	bf00      	nop
 8004608:	20000358 	.word	0x20000358

0800460c <sbrk_aligned>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	4e0f      	ldr	r6, [pc, #60]	@ (800464c <sbrk_aligned+0x40>)
 8004610:	460c      	mov	r4, r1
 8004612:	6831      	ldr	r1, [r6, #0]
 8004614:	4605      	mov	r5, r0
 8004616:	b911      	cbnz	r1, 800461e <sbrk_aligned+0x12>
 8004618:	f000 fba6 	bl	8004d68 <_sbrk_r>
 800461c:	6030      	str	r0, [r6, #0]
 800461e:	4621      	mov	r1, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f000 fba1 	bl	8004d68 <_sbrk_r>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d103      	bne.n	8004632 <sbrk_aligned+0x26>
 800462a:	f04f 34ff 	mov.w	r4, #4294967295
 800462e:	4620      	mov	r0, r4
 8004630:	bd70      	pop	{r4, r5, r6, pc}
 8004632:	1cc4      	adds	r4, r0, #3
 8004634:	f024 0403 	bic.w	r4, r4, #3
 8004638:	42a0      	cmp	r0, r4
 800463a:	d0f8      	beq.n	800462e <sbrk_aligned+0x22>
 800463c:	1a21      	subs	r1, r4, r0
 800463e:	4628      	mov	r0, r5
 8004640:	f000 fb92 	bl	8004d68 <_sbrk_r>
 8004644:	3001      	adds	r0, #1
 8004646:	d1f2      	bne.n	800462e <sbrk_aligned+0x22>
 8004648:	e7ef      	b.n	800462a <sbrk_aligned+0x1e>
 800464a:	bf00      	nop
 800464c:	20000354 	.word	0x20000354

08004650 <_malloc_r>:
 8004650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004654:	1ccd      	adds	r5, r1, #3
 8004656:	f025 0503 	bic.w	r5, r5, #3
 800465a:	3508      	adds	r5, #8
 800465c:	2d0c      	cmp	r5, #12
 800465e:	bf38      	it	cc
 8004660:	250c      	movcc	r5, #12
 8004662:	2d00      	cmp	r5, #0
 8004664:	4606      	mov	r6, r0
 8004666:	db01      	blt.n	800466c <_malloc_r+0x1c>
 8004668:	42a9      	cmp	r1, r5
 800466a:	d904      	bls.n	8004676 <_malloc_r+0x26>
 800466c:	230c      	movs	r3, #12
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	2000      	movs	r0, #0
 8004672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800474c <_malloc_r+0xfc>
 800467a:	f000 f869 	bl	8004750 <__malloc_lock>
 800467e:	f8d8 3000 	ldr.w	r3, [r8]
 8004682:	461c      	mov	r4, r3
 8004684:	bb44      	cbnz	r4, 80046d8 <_malloc_r+0x88>
 8004686:	4629      	mov	r1, r5
 8004688:	4630      	mov	r0, r6
 800468a:	f7ff ffbf 	bl	800460c <sbrk_aligned>
 800468e:	1c43      	adds	r3, r0, #1
 8004690:	4604      	mov	r4, r0
 8004692:	d158      	bne.n	8004746 <_malloc_r+0xf6>
 8004694:	f8d8 4000 	ldr.w	r4, [r8]
 8004698:	4627      	mov	r7, r4
 800469a:	2f00      	cmp	r7, #0
 800469c:	d143      	bne.n	8004726 <_malloc_r+0xd6>
 800469e:	2c00      	cmp	r4, #0
 80046a0:	d04b      	beq.n	800473a <_malloc_r+0xea>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	4639      	mov	r1, r7
 80046a6:	4630      	mov	r0, r6
 80046a8:	eb04 0903 	add.w	r9, r4, r3
 80046ac:	f000 fb5c 	bl	8004d68 <_sbrk_r>
 80046b0:	4581      	cmp	r9, r0
 80046b2:	d142      	bne.n	800473a <_malloc_r+0xea>
 80046b4:	6821      	ldr	r1, [r4, #0]
 80046b6:	1a6d      	subs	r5, r5, r1
 80046b8:	4629      	mov	r1, r5
 80046ba:	4630      	mov	r0, r6
 80046bc:	f7ff ffa6 	bl	800460c <sbrk_aligned>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d03a      	beq.n	800473a <_malloc_r+0xea>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	442b      	add	r3, r5
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	f8d8 3000 	ldr.w	r3, [r8]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	bb62      	cbnz	r2, 800472c <_malloc_r+0xdc>
 80046d2:	f8c8 7000 	str.w	r7, [r8]
 80046d6:	e00f      	b.n	80046f8 <_malloc_r+0xa8>
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	1b52      	subs	r2, r2, r5
 80046dc:	d420      	bmi.n	8004720 <_malloc_r+0xd0>
 80046de:	2a0b      	cmp	r2, #11
 80046e0:	d917      	bls.n	8004712 <_malloc_r+0xc2>
 80046e2:	1961      	adds	r1, r4, r5
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	6025      	str	r5, [r4, #0]
 80046e8:	bf18      	it	ne
 80046ea:	6059      	strne	r1, [r3, #4]
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	bf08      	it	eq
 80046f0:	f8c8 1000 	streq.w	r1, [r8]
 80046f4:	5162      	str	r2, [r4, r5]
 80046f6:	604b      	str	r3, [r1, #4]
 80046f8:	4630      	mov	r0, r6
 80046fa:	f000 f82f 	bl	800475c <__malloc_unlock>
 80046fe:	f104 000b 	add.w	r0, r4, #11
 8004702:	1d23      	adds	r3, r4, #4
 8004704:	f020 0007 	bic.w	r0, r0, #7
 8004708:	1ac2      	subs	r2, r0, r3
 800470a:	bf1c      	itt	ne
 800470c:	1a1b      	subne	r3, r3, r0
 800470e:	50a3      	strne	r3, [r4, r2]
 8004710:	e7af      	b.n	8004672 <_malloc_r+0x22>
 8004712:	6862      	ldr	r2, [r4, #4]
 8004714:	42a3      	cmp	r3, r4
 8004716:	bf0c      	ite	eq
 8004718:	f8c8 2000 	streq.w	r2, [r8]
 800471c:	605a      	strne	r2, [r3, #4]
 800471e:	e7eb      	b.n	80046f8 <_malloc_r+0xa8>
 8004720:	4623      	mov	r3, r4
 8004722:	6864      	ldr	r4, [r4, #4]
 8004724:	e7ae      	b.n	8004684 <_malloc_r+0x34>
 8004726:	463c      	mov	r4, r7
 8004728:	687f      	ldr	r7, [r7, #4]
 800472a:	e7b6      	b.n	800469a <_malloc_r+0x4a>
 800472c:	461a      	mov	r2, r3
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	42a3      	cmp	r3, r4
 8004732:	d1fb      	bne.n	800472c <_malloc_r+0xdc>
 8004734:	2300      	movs	r3, #0
 8004736:	6053      	str	r3, [r2, #4]
 8004738:	e7de      	b.n	80046f8 <_malloc_r+0xa8>
 800473a:	230c      	movs	r3, #12
 800473c:	6033      	str	r3, [r6, #0]
 800473e:	4630      	mov	r0, r6
 8004740:	f000 f80c 	bl	800475c <__malloc_unlock>
 8004744:	e794      	b.n	8004670 <_malloc_r+0x20>
 8004746:	6005      	str	r5, [r0, #0]
 8004748:	e7d6      	b.n	80046f8 <_malloc_r+0xa8>
 800474a:	bf00      	nop
 800474c:	20000358 	.word	0x20000358

08004750 <__malloc_lock>:
 8004750:	4801      	ldr	r0, [pc, #4]	@ (8004758 <__malloc_lock+0x8>)
 8004752:	f7ff bf0f 	b.w	8004574 <__retarget_lock_acquire_recursive>
 8004756:	bf00      	nop
 8004758:	20000350 	.word	0x20000350

0800475c <__malloc_unlock>:
 800475c:	4801      	ldr	r0, [pc, #4]	@ (8004764 <__malloc_unlock+0x8>)
 800475e:	f7ff bf0a 	b.w	8004576 <__retarget_lock_release_recursive>
 8004762:	bf00      	nop
 8004764:	20000350 	.word	0x20000350

08004768 <__ssputs_r>:
 8004768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800476c:	688e      	ldr	r6, [r1, #8]
 800476e:	461f      	mov	r7, r3
 8004770:	42be      	cmp	r6, r7
 8004772:	680b      	ldr	r3, [r1, #0]
 8004774:	4682      	mov	sl, r0
 8004776:	460c      	mov	r4, r1
 8004778:	4690      	mov	r8, r2
 800477a:	d82d      	bhi.n	80047d8 <__ssputs_r+0x70>
 800477c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004780:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004784:	d026      	beq.n	80047d4 <__ssputs_r+0x6c>
 8004786:	6965      	ldr	r5, [r4, #20]
 8004788:	6909      	ldr	r1, [r1, #16]
 800478a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800478e:	eba3 0901 	sub.w	r9, r3, r1
 8004792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004796:	1c7b      	adds	r3, r7, #1
 8004798:	444b      	add	r3, r9
 800479a:	106d      	asrs	r5, r5, #1
 800479c:	429d      	cmp	r5, r3
 800479e:	bf38      	it	cc
 80047a0:	461d      	movcc	r5, r3
 80047a2:	0553      	lsls	r3, r2, #21
 80047a4:	d527      	bpl.n	80047f6 <__ssputs_r+0x8e>
 80047a6:	4629      	mov	r1, r5
 80047a8:	f7ff ff52 	bl	8004650 <_malloc_r>
 80047ac:	4606      	mov	r6, r0
 80047ae:	b360      	cbz	r0, 800480a <__ssputs_r+0xa2>
 80047b0:	6921      	ldr	r1, [r4, #16]
 80047b2:	464a      	mov	r2, r9
 80047b4:	f000 fae8 	bl	8004d88 <memcpy>
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c2:	81a3      	strh	r3, [r4, #12]
 80047c4:	6126      	str	r6, [r4, #16]
 80047c6:	6165      	str	r5, [r4, #20]
 80047c8:	444e      	add	r6, r9
 80047ca:	eba5 0509 	sub.w	r5, r5, r9
 80047ce:	6026      	str	r6, [r4, #0]
 80047d0:	60a5      	str	r5, [r4, #8]
 80047d2:	463e      	mov	r6, r7
 80047d4:	42be      	cmp	r6, r7
 80047d6:	d900      	bls.n	80047da <__ssputs_r+0x72>
 80047d8:	463e      	mov	r6, r7
 80047da:	6820      	ldr	r0, [r4, #0]
 80047dc:	4632      	mov	r2, r6
 80047de:	4641      	mov	r1, r8
 80047e0:	f000 faa8 	bl	8004d34 <memmove>
 80047e4:	68a3      	ldr	r3, [r4, #8]
 80047e6:	1b9b      	subs	r3, r3, r6
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	4433      	add	r3, r6
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	2000      	movs	r0, #0
 80047f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f6:	462a      	mov	r2, r5
 80047f8:	f000 fad4 	bl	8004da4 <_realloc_r>
 80047fc:	4606      	mov	r6, r0
 80047fe:	2800      	cmp	r0, #0
 8004800:	d1e0      	bne.n	80047c4 <__ssputs_r+0x5c>
 8004802:	6921      	ldr	r1, [r4, #16]
 8004804:	4650      	mov	r0, sl
 8004806:	f7ff feb7 	bl	8004578 <_free_r>
 800480a:	230c      	movs	r3, #12
 800480c:	f8ca 3000 	str.w	r3, [sl]
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	e7e9      	b.n	80047f2 <__ssputs_r+0x8a>
	...

08004820 <_svfiprintf_r>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	4698      	mov	r8, r3
 8004826:	898b      	ldrh	r3, [r1, #12]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	b09d      	sub	sp, #116	@ 0x74
 800482c:	4607      	mov	r7, r0
 800482e:	460d      	mov	r5, r1
 8004830:	4614      	mov	r4, r2
 8004832:	d510      	bpl.n	8004856 <_svfiprintf_r+0x36>
 8004834:	690b      	ldr	r3, [r1, #16]
 8004836:	b973      	cbnz	r3, 8004856 <_svfiprintf_r+0x36>
 8004838:	2140      	movs	r1, #64	@ 0x40
 800483a:	f7ff ff09 	bl	8004650 <_malloc_r>
 800483e:	6028      	str	r0, [r5, #0]
 8004840:	6128      	str	r0, [r5, #16]
 8004842:	b930      	cbnz	r0, 8004852 <_svfiprintf_r+0x32>
 8004844:	230c      	movs	r3, #12
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	b01d      	add	sp, #116	@ 0x74
 800484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004852:	2340      	movs	r3, #64	@ 0x40
 8004854:	616b      	str	r3, [r5, #20]
 8004856:	2300      	movs	r3, #0
 8004858:	9309      	str	r3, [sp, #36]	@ 0x24
 800485a:	2320      	movs	r3, #32
 800485c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004860:	f8cd 800c 	str.w	r8, [sp, #12]
 8004864:	2330      	movs	r3, #48	@ 0x30
 8004866:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a04 <_svfiprintf_r+0x1e4>
 800486a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800486e:	f04f 0901 	mov.w	r9, #1
 8004872:	4623      	mov	r3, r4
 8004874:	469a      	mov	sl, r3
 8004876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800487a:	b10a      	cbz	r2, 8004880 <_svfiprintf_r+0x60>
 800487c:	2a25      	cmp	r2, #37	@ 0x25
 800487e:	d1f9      	bne.n	8004874 <_svfiprintf_r+0x54>
 8004880:	ebba 0b04 	subs.w	fp, sl, r4
 8004884:	d00b      	beq.n	800489e <_svfiprintf_r+0x7e>
 8004886:	465b      	mov	r3, fp
 8004888:	4622      	mov	r2, r4
 800488a:	4629      	mov	r1, r5
 800488c:	4638      	mov	r0, r7
 800488e:	f7ff ff6b 	bl	8004768 <__ssputs_r>
 8004892:	3001      	adds	r0, #1
 8004894:	f000 80a7 	beq.w	80049e6 <_svfiprintf_r+0x1c6>
 8004898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800489a:	445a      	add	r2, fp
 800489c:	9209      	str	r2, [sp, #36]	@ 0x24
 800489e:	f89a 3000 	ldrb.w	r3, [sl]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 809f 	beq.w	80049e6 <_svfiprintf_r+0x1c6>
 80048a8:	2300      	movs	r3, #0
 80048aa:	f04f 32ff 	mov.w	r2, #4294967295
 80048ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048b2:	f10a 0a01 	add.w	sl, sl, #1
 80048b6:	9304      	str	r3, [sp, #16]
 80048b8:	9307      	str	r3, [sp, #28]
 80048ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048be:	931a      	str	r3, [sp, #104]	@ 0x68
 80048c0:	4654      	mov	r4, sl
 80048c2:	2205      	movs	r2, #5
 80048c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c8:	484e      	ldr	r0, [pc, #312]	@ (8004a04 <_svfiprintf_r+0x1e4>)
 80048ca:	f7fb fc89 	bl	80001e0 <memchr>
 80048ce:	9a04      	ldr	r2, [sp, #16]
 80048d0:	b9d8      	cbnz	r0, 800490a <_svfiprintf_r+0xea>
 80048d2:	06d0      	lsls	r0, r2, #27
 80048d4:	bf44      	itt	mi
 80048d6:	2320      	movmi	r3, #32
 80048d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048dc:	0711      	lsls	r1, r2, #28
 80048de:	bf44      	itt	mi
 80048e0:	232b      	movmi	r3, #43	@ 0x2b
 80048e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048e6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ec:	d015      	beq.n	800491a <_svfiprintf_r+0xfa>
 80048ee:	9a07      	ldr	r2, [sp, #28]
 80048f0:	4654      	mov	r4, sl
 80048f2:	2000      	movs	r0, #0
 80048f4:	f04f 0c0a 	mov.w	ip, #10
 80048f8:	4621      	mov	r1, r4
 80048fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048fe:	3b30      	subs	r3, #48	@ 0x30
 8004900:	2b09      	cmp	r3, #9
 8004902:	d94b      	bls.n	800499c <_svfiprintf_r+0x17c>
 8004904:	b1b0      	cbz	r0, 8004934 <_svfiprintf_r+0x114>
 8004906:	9207      	str	r2, [sp, #28]
 8004908:	e014      	b.n	8004934 <_svfiprintf_r+0x114>
 800490a:	eba0 0308 	sub.w	r3, r0, r8
 800490e:	fa09 f303 	lsl.w	r3, r9, r3
 8004912:	4313      	orrs	r3, r2
 8004914:	9304      	str	r3, [sp, #16]
 8004916:	46a2      	mov	sl, r4
 8004918:	e7d2      	b.n	80048c0 <_svfiprintf_r+0xa0>
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	1d19      	adds	r1, r3, #4
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	9103      	str	r1, [sp, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	bfbb      	ittet	lt
 8004926:	425b      	neglt	r3, r3
 8004928:	f042 0202 	orrlt.w	r2, r2, #2
 800492c:	9307      	strge	r3, [sp, #28]
 800492e:	9307      	strlt	r3, [sp, #28]
 8004930:	bfb8      	it	lt
 8004932:	9204      	strlt	r2, [sp, #16]
 8004934:	7823      	ldrb	r3, [r4, #0]
 8004936:	2b2e      	cmp	r3, #46	@ 0x2e
 8004938:	d10a      	bne.n	8004950 <_svfiprintf_r+0x130>
 800493a:	7863      	ldrb	r3, [r4, #1]
 800493c:	2b2a      	cmp	r3, #42	@ 0x2a
 800493e:	d132      	bne.n	80049a6 <_svfiprintf_r+0x186>
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	1d1a      	adds	r2, r3, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	9203      	str	r2, [sp, #12]
 8004948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800494c:	3402      	adds	r4, #2
 800494e:	9305      	str	r3, [sp, #20]
 8004950:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a14 <_svfiprintf_r+0x1f4>
 8004954:	7821      	ldrb	r1, [r4, #0]
 8004956:	2203      	movs	r2, #3
 8004958:	4650      	mov	r0, sl
 800495a:	f7fb fc41 	bl	80001e0 <memchr>
 800495e:	b138      	cbz	r0, 8004970 <_svfiprintf_r+0x150>
 8004960:	9b04      	ldr	r3, [sp, #16]
 8004962:	eba0 000a 	sub.w	r0, r0, sl
 8004966:	2240      	movs	r2, #64	@ 0x40
 8004968:	4082      	lsls	r2, r0
 800496a:	4313      	orrs	r3, r2
 800496c:	3401      	adds	r4, #1
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004974:	4824      	ldr	r0, [pc, #144]	@ (8004a08 <_svfiprintf_r+0x1e8>)
 8004976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800497a:	2206      	movs	r2, #6
 800497c:	f7fb fc30 	bl	80001e0 <memchr>
 8004980:	2800      	cmp	r0, #0
 8004982:	d036      	beq.n	80049f2 <_svfiprintf_r+0x1d2>
 8004984:	4b21      	ldr	r3, [pc, #132]	@ (8004a0c <_svfiprintf_r+0x1ec>)
 8004986:	bb1b      	cbnz	r3, 80049d0 <_svfiprintf_r+0x1b0>
 8004988:	9b03      	ldr	r3, [sp, #12]
 800498a:	3307      	adds	r3, #7
 800498c:	f023 0307 	bic.w	r3, r3, #7
 8004990:	3308      	adds	r3, #8
 8004992:	9303      	str	r3, [sp, #12]
 8004994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004996:	4433      	add	r3, r6
 8004998:	9309      	str	r3, [sp, #36]	@ 0x24
 800499a:	e76a      	b.n	8004872 <_svfiprintf_r+0x52>
 800499c:	fb0c 3202 	mla	r2, ip, r2, r3
 80049a0:	460c      	mov	r4, r1
 80049a2:	2001      	movs	r0, #1
 80049a4:	e7a8      	b.n	80048f8 <_svfiprintf_r+0xd8>
 80049a6:	2300      	movs	r3, #0
 80049a8:	3401      	adds	r4, #1
 80049aa:	9305      	str	r3, [sp, #20]
 80049ac:	4619      	mov	r1, r3
 80049ae:	f04f 0c0a 	mov.w	ip, #10
 80049b2:	4620      	mov	r0, r4
 80049b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049b8:	3a30      	subs	r2, #48	@ 0x30
 80049ba:	2a09      	cmp	r2, #9
 80049bc:	d903      	bls.n	80049c6 <_svfiprintf_r+0x1a6>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0c6      	beq.n	8004950 <_svfiprintf_r+0x130>
 80049c2:	9105      	str	r1, [sp, #20]
 80049c4:	e7c4      	b.n	8004950 <_svfiprintf_r+0x130>
 80049c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ca:	4604      	mov	r4, r0
 80049cc:	2301      	movs	r3, #1
 80049ce:	e7f0      	b.n	80049b2 <_svfiprintf_r+0x192>
 80049d0:	ab03      	add	r3, sp, #12
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	462a      	mov	r2, r5
 80049d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <_svfiprintf_r+0x1f0>)
 80049d8:	a904      	add	r1, sp, #16
 80049da:	4638      	mov	r0, r7
 80049dc:	f3af 8000 	nop.w
 80049e0:	1c42      	adds	r2, r0, #1
 80049e2:	4606      	mov	r6, r0
 80049e4:	d1d6      	bne.n	8004994 <_svfiprintf_r+0x174>
 80049e6:	89ab      	ldrh	r3, [r5, #12]
 80049e8:	065b      	lsls	r3, r3, #25
 80049ea:	f53f af2d 	bmi.w	8004848 <_svfiprintf_r+0x28>
 80049ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049f0:	e72c      	b.n	800484c <_svfiprintf_r+0x2c>
 80049f2:	ab03      	add	r3, sp, #12
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	462a      	mov	r2, r5
 80049f8:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <_svfiprintf_r+0x1f0>)
 80049fa:	a904      	add	r1, sp, #16
 80049fc:	4638      	mov	r0, r7
 80049fe:	f000 f879 	bl	8004af4 <_printf_i>
 8004a02:	e7ed      	b.n	80049e0 <_svfiprintf_r+0x1c0>
 8004a04:	08004ebc 	.word	0x08004ebc
 8004a08:	08004ec6 	.word	0x08004ec6
 8004a0c:	00000000 	.word	0x00000000
 8004a10:	08004769 	.word	0x08004769
 8004a14:	08004ec2 	.word	0x08004ec2

08004a18 <_printf_common>:
 8004a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	4698      	mov	r8, r3
 8004a20:	688a      	ldr	r2, [r1, #8]
 8004a22:	690b      	ldr	r3, [r1, #16]
 8004a24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bfb8      	it	lt
 8004a2c:	4613      	movlt	r3, r2
 8004a2e:	6033      	str	r3, [r6, #0]
 8004a30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a34:	4607      	mov	r7, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	b10a      	cbz	r2, 8004a3e <_printf_common+0x26>
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	6033      	str	r3, [r6, #0]
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	0699      	lsls	r1, r3, #26
 8004a42:	bf42      	ittt	mi
 8004a44:	6833      	ldrmi	r3, [r6, #0]
 8004a46:	3302      	addmi	r3, #2
 8004a48:	6033      	strmi	r3, [r6, #0]
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	f015 0506 	ands.w	r5, r5, #6
 8004a50:	d106      	bne.n	8004a60 <_printf_common+0x48>
 8004a52:	f104 0a19 	add.w	sl, r4, #25
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	6832      	ldr	r2, [r6, #0]
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	42ab      	cmp	r3, r5
 8004a5e:	dc26      	bgt.n	8004aae <_printf_common+0x96>
 8004a60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a64:	6822      	ldr	r2, [r4, #0]
 8004a66:	3b00      	subs	r3, #0
 8004a68:	bf18      	it	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	0692      	lsls	r2, r2, #26
 8004a6e:	d42b      	bmi.n	8004ac8 <_printf_common+0xb0>
 8004a70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a74:	4641      	mov	r1, r8
 8004a76:	4638      	mov	r0, r7
 8004a78:	47c8      	blx	r9
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d01e      	beq.n	8004abc <_printf_common+0xa4>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	6922      	ldr	r2, [r4, #16]
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	bf02      	ittt	eq
 8004a8a:	68e5      	ldreq	r5, [r4, #12]
 8004a8c:	6833      	ldreq	r3, [r6, #0]
 8004a8e:	1aed      	subeq	r5, r5, r3
 8004a90:	68a3      	ldr	r3, [r4, #8]
 8004a92:	bf0c      	ite	eq
 8004a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a98:	2500      	movne	r5, #0
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	bfc4      	itt	gt
 8004a9e:	1a9b      	subgt	r3, r3, r2
 8004aa0:	18ed      	addgt	r5, r5, r3
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	341a      	adds	r4, #26
 8004aa6:	42b5      	cmp	r5, r6
 8004aa8:	d11a      	bne.n	8004ae0 <_printf_common+0xc8>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e008      	b.n	8004ac0 <_printf_common+0xa8>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	47c8      	blx	r9
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d103      	bne.n	8004ac4 <_printf_common+0xac>
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	e7c6      	b.n	8004a56 <_printf_common+0x3e>
 8004ac8:	18e1      	adds	r1, r4, r3
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	2030      	movs	r0, #48	@ 0x30
 8004ace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ad2:	4422      	add	r2, r4
 8004ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004adc:	3302      	adds	r3, #2
 8004ade:	e7c7      	b.n	8004a70 <_printf_common+0x58>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	47c8      	blx	r9
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0e6      	beq.n	8004abc <_printf_common+0xa4>
 8004aee:	3601      	adds	r6, #1
 8004af0:	e7d9      	b.n	8004aa6 <_printf_common+0x8e>
	...

08004af4 <_printf_i>:
 8004af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	7e0f      	ldrb	r7, [r1, #24]
 8004afa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004afc:	2f78      	cmp	r7, #120	@ 0x78
 8004afe:	4691      	mov	r9, r2
 8004b00:	4680      	mov	r8, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	469a      	mov	sl, r3
 8004b06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b0a:	d807      	bhi.n	8004b1c <_printf_i+0x28>
 8004b0c:	2f62      	cmp	r7, #98	@ 0x62
 8004b0e:	d80a      	bhi.n	8004b26 <_printf_i+0x32>
 8004b10:	2f00      	cmp	r7, #0
 8004b12:	f000 80d2 	beq.w	8004cba <_printf_i+0x1c6>
 8004b16:	2f58      	cmp	r7, #88	@ 0x58
 8004b18:	f000 80b9 	beq.w	8004c8e <_printf_i+0x19a>
 8004b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b24:	e03a      	b.n	8004b9c <_printf_i+0xa8>
 8004b26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b2a:	2b15      	cmp	r3, #21
 8004b2c:	d8f6      	bhi.n	8004b1c <_printf_i+0x28>
 8004b2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b34 <_printf_i+0x40>)
 8004b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b34:	08004b8d 	.word	0x08004b8d
 8004b38:	08004ba1 	.word	0x08004ba1
 8004b3c:	08004b1d 	.word	0x08004b1d
 8004b40:	08004b1d 	.word	0x08004b1d
 8004b44:	08004b1d 	.word	0x08004b1d
 8004b48:	08004b1d 	.word	0x08004b1d
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004b1d 	.word	0x08004b1d
 8004b54:	08004b1d 	.word	0x08004b1d
 8004b58:	08004b1d 	.word	0x08004b1d
 8004b5c:	08004b1d 	.word	0x08004b1d
 8004b60:	08004ca1 	.word	0x08004ca1
 8004b64:	08004bcb 	.word	0x08004bcb
 8004b68:	08004c5b 	.word	0x08004c5b
 8004b6c:	08004b1d 	.word	0x08004b1d
 8004b70:	08004b1d 	.word	0x08004b1d
 8004b74:	08004cc3 	.word	0x08004cc3
 8004b78:	08004b1d 	.word	0x08004b1d
 8004b7c:	08004bcb 	.word	0x08004bcb
 8004b80:	08004b1d 	.word	0x08004b1d
 8004b84:	08004b1d 	.word	0x08004b1d
 8004b88:	08004c63 	.word	0x08004c63
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6032      	str	r2, [r6, #0]
 8004b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e09d      	b.n	8004cdc <_printf_i+0x1e8>
 8004ba0:	6833      	ldr	r3, [r6, #0]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1d19      	adds	r1, r3, #4
 8004ba6:	6031      	str	r1, [r6, #0]
 8004ba8:	0606      	lsls	r6, r0, #24
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0xbc>
 8004bac:	681d      	ldr	r5, [r3, #0]
 8004bae:	e003      	b.n	8004bb8 <_printf_i+0xc4>
 8004bb0:	0645      	lsls	r5, r0, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0xb8>
 8004bb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	da03      	bge.n	8004bc4 <_printf_i+0xd0>
 8004bbc:	232d      	movs	r3, #45	@ 0x2d
 8004bbe:	426d      	negs	r5, r5
 8004bc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bc4:	4859      	ldr	r0, [pc, #356]	@ (8004d2c <_printf_i+0x238>)
 8004bc6:	230a      	movs	r3, #10
 8004bc8:	e011      	b.n	8004bee <_printf_i+0xfa>
 8004bca:	6821      	ldr	r1, [r4, #0]
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	0608      	lsls	r0, r1, #24
 8004bd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bd4:	d402      	bmi.n	8004bdc <_printf_i+0xe8>
 8004bd6:	0649      	lsls	r1, r1, #25
 8004bd8:	bf48      	it	mi
 8004bda:	b2ad      	uxthmi	r5, r5
 8004bdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bde:	4853      	ldr	r0, [pc, #332]	@ (8004d2c <_printf_i+0x238>)
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	bf14      	ite	ne
 8004be4:	230a      	movne	r3, #10
 8004be6:	2308      	moveq	r3, #8
 8004be8:	2100      	movs	r1, #0
 8004bea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bee:	6866      	ldr	r6, [r4, #4]
 8004bf0:	60a6      	str	r6, [r4, #8]
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	bfa2      	ittt	ge
 8004bf6:	6821      	ldrge	r1, [r4, #0]
 8004bf8:	f021 0104 	bicge.w	r1, r1, #4
 8004bfc:	6021      	strge	r1, [r4, #0]
 8004bfe:	b90d      	cbnz	r5, 8004c04 <_printf_i+0x110>
 8004c00:	2e00      	cmp	r6, #0
 8004c02:	d04b      	beq.n	8004c9c <_printf_i+0x1a8>
 8004c04:	4616      	mov	r6, r2
 8004c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c0e:	5dc7      	ldrb	r7, [r0, r7]
 8004c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c14:	462f      	mov	r7, r5
 8004c16:	42bb      	cmp	r3, r7
 8004c18:	460d      	mov	r5, r1
 8004c1a:	d9f4      	bls.n	8004c06 <_printf_i+0x112>
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d10b      	bne.n	8004c38 <_printf_i+0x144>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	07df      	lsls	r7, r3, #31
 8004c24:	d508      	bpl.n	8004c38 <_printf_i+0x144>
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	6861      	ldr	r1, [r4, #4]
 8004c2a:	4299      	cmp	r1, r3
 8004c2c:	bfde      	ittt	le
 8004c2e:	2330      	movle	r3, #48	@ 0x30
 8004c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c38:	1b92      	subs	r2, r2, r6
 8004c3a:	6122      	str	r2, [r4, #16]
 8004c3c:	f8cd a000 	str.w	sl, [sp]
 8004c40:	464b      	mov	r3, r9
 8004c42:	aa03      	add	r2, sp, #12
 8004c44:	4621      	mov	r1, r4
 8004c46:	4640      	mov	r0, r8
 8004c48:	f7ff fee6 	bl	8004a18 <_printf_common>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d14a      	bne.n	8004ce6 <_printf_i+0x1f2>
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	b004      	add	sp, #16
 8004c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	4833      	ldr	r0, [pc, #204]	@ (8004d30 <_printf_i+0x23c>)
 8004c64:	2778      	movs	r7, #120	@ 0x78
 8004c66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	6831      	ldr	r1, [r6, #0]
 8004c6e:	061f      	lsls	r7, r3, #24
 8004c70:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c74:	d402      	bmi.n	8004c7c <_printf_i+0x188>
 8004c76:	065f      	lsls	r7, r3, #25
 8004c78:	bf48      	it	mi
 8004c7a:	b2ad      	uxthmi	r5, r5
 8004c7c:	6031      	str	r1, [r6, #0]
 8004c7e:	07d9      	lsls	r1, r3, #31
 8004c80:	bf44      	itt	mi
 8004c82:	f043 0320 	orrmi.w	r3, r3, #32
 8004c86:	6023      	strmi	r3, [r4, #0]
 8004c88:	b11d      	cbz	r5, 8004c92 <_printf_i+0x19e>
 8004c8a:	2310      	movs	r3, #16
 8004c8c:	e7ac      	b.n	8004be8 <_printf_i+0xf4>
 8004c8e:	4827      	ldr	r0, [pc, #156]	@ (8004d2c <_printf_i+0x238>)
 8004c90:	e7e9      	b.n	8004c66 <_printf_i+0x172>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	f023 0320 	bic.w	r3, r3, #32
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	e7f6      	b.n	8004c8a <_printf_i+0x196>
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	e7bd      	b.n	8004c1c <_printf_i+0x128>
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	6825      	ldr	r5, [r4, #0]
 8004ca4:	6961      	ldr	r1, [r4, #20]
 8004ca6:	1d18      	adds	r0, r3, #4
 8004ca8:	6030      	str	r0, [r6, #0]
 8004caa:	062e      	lsls	r6, r5, #24
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	d501      	bpl.n	8004cb4 <_printf_i+0x1c0>
 8004cb0:	6019      	str	r1, [r3, #0]
 8004cb2:	e002      	b.n	8004cba <_printf_i+0x1c6>
 8004cb4:	0668      	lsls	r0, r5, #25
 8004cb6:	d5fb      	bpl.n	8004cb0 <_printf_i+0x1bc>
 8004cb8:	8019      	strh	r1, [r3, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6123      	str	r3, [r4, #16]
 8004cbe:	4616      	mov	r6, r2
 8004cc0:	e7bc      	b.n	8004c3c <_printf_i+0x148>
 8004cc2:	6833      	ldr	r3, [r6, #0]
 8004cc4:	1d1a      	adds	r2, r3, #4
 8004cc6:	6032      	str	r2, [r6, #0]
 8004cc8:	681e      	ldr	r6, [r3, #0]
 8004cca:	6862      	ldr	r2, [r4, #4]
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f7fb fa86 	bl	80001e0 <memchr>
 8004cd4:	b108      	cbz	r0, 8004cda <_printf_i+0x1e6>
 8004cd6:	1b80      	subs	r0, r0, r6
 8004cd8:	6060      	str	r0, [r4, #4]
 8004cda:	6863      	ldr	r3, [r4, #4]
 8004cdc:	6123      	str	r3, [r4, #16]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ce4:	e7aa      	b.n	8004c3c <_printf_i+0x148>
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	4632      	mov	r2, r6
 8004cea:	4649      	mov	r1, r9
 8004cec:	4640      	mov	r0, r8
 8004cee:	47d0      	blx	sl
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d0ad      	beq.n	8004c50 <_printf_i+0x15c>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	079b      	lsls	r3, r3, #30
 8004cf8:	d413      	bmi.n	8004d22 <_printf_i+0x22e>
 8004cfa:	68e0      	ldr	r0, [r4, #12]
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	4298      	cmp	r0, r3
 8004d00:	bfb8      	it	lt
 8004d02:	4618      	movlt	r0, r3
 8004d04:	e7a6      	b.n	8004c54 <_printf_i+0x160>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4632      	mov	r2, r6
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	47d0      	blx	sl
 8004d10:	3001      	adds	r0, #1
 8004d12:	d09d      	beq.n	8004c50 <_printf_i+0x15c>
 8004d14:	3501      	adds	r5, #1
 8004d16:	68e3      	ldr	r3, [r4, #12]
 8004d18:	9903      	ldr	r1, [sp, #12]
 8004d1a:	1a5b      	subs	r3, r3, r1
 8004d1c:	42ab      	cmp	r3, r5
 8004d1e:	dcf2      	bgt.n	8004d06 <_printf_i+0x212>
 8004d20:	e7eb      	b.n	8004cfa <_printf_i+0x206>
 8004d22:	2500      	movs	r5, #0
 8004d24:	f104 0619 	add.w	r6, r4, #25
 8004d28:	e7f5      	b.n	8004d16 <_printf_i+0x222>
 8004d2a:	bf00      	nop
 8004d2c:	08004ecd 	.word	0x08004ecd
 8004d30:	08004ede 	.word	0x08004ede

08004d34 <memmove>:
 8004d34:	4288      	cmp	r0, r1
 8004d36:	b510      	push	{r4, lr}
 8004d38:	eb01 0402 	add.w	r4, r1, r2
 8004d3c:	d902      	bls.n	8004d44 <memmove+0x10>
 8004d3e:	4284      	cmp	r4, r0
 8004d40:	4623      	mov	r3, r4
 8004d42:	d807      	bhi.n	8004d54 <memmove+0x20>
 8004d44:	1e43      	subs	r3, r0, #1
 8004d46:	42a1      	cmp	r1, r4
 8004d48:	d008      	beq.n	8004d5c <memmove+0x28>
 8004d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d52:	e7f8      	b.n	8004d46 <memmove+0x12>
 8004d54:	4402      	add	r2, r0
 8004d56:	4601      	mov	r1, r0
 8004d58:	428a      	cmp	r2, r1
 8004d5a:	d100      	bne.n	8004d5e <memmove+0x2a>
 8004d5c:	bd10      	pop	{r4, pc}
 8004d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d66:	e7f7      	b.n	8004d58 <memmove+0x24>

08004d68 <_sbrk_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4d06      	ldr	r5, [pc, #24]	@ (8004d84 <_sbrk_r+0x1c>)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f7fb fd9a 	bl	80008ac <_sbrk>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_sbrk_r+0x1a>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_sbrk_r+0x1a>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	2000034c 	.word	0x2000034c

08004d88 <memcpy>:
 8004d88:	440a      	add	r2, r1
 8004d8a:	4291      	cmp	r1, r2
 8004d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d90:	d100      	bne.n	8004d94 <memcpy+0xc>
 8004d92:	4770      	bx	lr
 8004d94:	b510      	push	{r4, lr}
 8004d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d9e:	4291      	cmp	r1, r2
 8004da0:	d1f9      	bne.n	8004d96 <memcpy+0xe>
 8004da2:	bd10      	pop	{r4, pc}

08004da4 <_realloc_r>:
 8004da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da8:	4680      	mov	r8, r0
 8004daa:	4615      	mov	r5, r2
 8004dac:	460c      	mov	r4, r1
 8004dae:	b921      	cbnz	r1, 8004dba <_realloc_r+0x16>
 8004db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004db4:	4611      	mov	r1, r2
 8004db6:	f7ff bc4b 	b.w	8004650 <_malloc_r>
 8004dba:	b92a      	cbnz	r2, 8004dc8 <_realloc_r+0x24>
 8004dbc:	f7ff fbdc 	bl	8004578 <_free_r>
 8004dc0:	2400      	movs	r4, #0
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc8:	f000 f81a 	bl	8004e00 <_malloc_usable_size_r>
 8004dcc:	4285      	cmp	r5, r0
 8004dce:	4606      	mov	r6, r0
 8004dd0:	d802      	bhi.n	8004dd8 <_realloc_r+0x34>
 8004dd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004dd6:	d8f4      	bhi.n	8004dc2 <_realloc_r+0x1e>
 8004dd8:	4629      	mov	r1, r5
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f7ff fc38 	bl	8004650 <_malloc_r>
 8004de0:	4607      	mov	r7, r0
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d0ec      	beq.n	8004dc0 <_realloc_r+0x1c>
 8004de6:	42b5      	cmp	r5, r6
 8004de8:	462a      	mov	r2, r5
 8004dea:	4621      	mov	r1, r4
 8004dec:	bf28      	it	cs
 8004dee:	4632      	movcs	r2, r6
 8004df0:	f7ff ffca 	bl	8004d88 <memcpy>
 8004df4:	4621      	mov	r1, r4
 8004df6:	4640      	mov	r0, r8
 8004df8:	f7ff fbbe 	bl	8004578 <_free_r>
 8004dfc:	463c      	mov	r4, r7
 8004dfe:	e7e0      	b.n	8004dc2 <_realloc_r+0x1e>

08004e00 <_malloc_usable_size_r>:
 8004e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e04:	1f18      	subs	r0, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bfbc      	itt	lt
 8004e0a:	580b      	ldrlt	r3, [r1, r0]
 8004e0c:	18c0      	addlt	r0, r0, r3
 8004e0e:	4770      	bx	lr

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
